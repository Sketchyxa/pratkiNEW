#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))

from services.achievement_service import achievement_service
from database.connection import db
from loguru import logger


async def init_achievements():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.connect()
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...")
        await achievement_service.create_default_achievements()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        all_achievements = await achievement_service.get_all_achievements()
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {len(all_achievements)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        difficulties = {}
        
        for achievement in all_achievements:
            # –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            category = achievement.category
            if category not in categories:
                categories[category] = 0
            categories[category] += 1
            
            # –ü–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            difficulty = achievement.difficulty
            if difficulty not in difficulties:
                difficulties[difficulty] = 0
            difficulties[difficulty] += 1
        
        logger.info("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        category_names = {
            "general": "üéØ –û–±—â–∏–µ",
            "collection": "üé¥ –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", 
            "economy": "üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞",
            "social": "üë• –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ",
            "special": "‚≠ê –û—Å–æ–±—ã–µ"
        }
        
        for category, count in categories.items():
            category_name = category_names.get(category, category.title())
            logger.info(f"  {category_name}: {count}")
        
        logger.info("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:")
        difficulty_names = {
            "easy": "üü¢ –õ–µ–≥–∫–∏–µ",
            "normal": "üü° –û–±—ã—á–Ω—ã–µ", 
            "hard": "üü† –°–ª–æ–∂–Ω—ã–µ",
            "legendary": "üî¥ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ",
            "special": "üü£ –û—Å–æ–±—ã–µ"
        }
        
        for difficulty, count in difficulties.items():
            difficulty_name = difficulty_names.get(difficulty, difficulty.title())
            logger.info(f"  {difficulty_name}: {count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
        logger.info("\nüéØ –ü—Ä–∏–º–µ—Ä—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:")
        for i, achievement in enumerate(all_achievements[:5], 1):
            difficulty_emoji = achievement.get_difficulty_emoji()
            logger.info(f"  {i}. {difficulty_emoji} {achievement.name} - {achievement.description}")
        
        if len(all_achievements) > 5:
            logger.info(f"  ... –∏ –µ—â–µ {len(all_achievements) - 5} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
    finally:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == "__main__":
    logger.remove()
    logger.add(sys.stderr, level="INFO", format="<green>{time:HH:mm:ss}</green> | <level>{message}</level>")
    
    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...")
    asyncio.run(init_achievements())
