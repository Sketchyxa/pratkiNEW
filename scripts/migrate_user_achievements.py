#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.connection import db
from services.user_service import user_service
from loguru import logger

async def migrate_user_achievements():
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    print("üîß –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.connect()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = await user_service.get_all_users()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(all_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        migrated_count = 0
        for user in all_users:
            needs_update = False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
            if not hasattr(user, 'daily_streak'):
                user.daily_streak = 0
                needs_update = True
            
            if not hasattr(user, 'max_daily_streak'):
                user.max_daily_streak = 0
                needs_update = True
            
            if not hasattr(user, 'last_daily_streak_date'):
                user.last_daily_streak_date = None
                needs_update = True
            
            if not hasattr(user, 'shop_purchases_count'):
                user.shop_purchases_count = 0
                needs_update = True
            
            if not hasattr(user, 'total_coins_spent'):
                user.total_coins_spent = 0
                needs_update = True
            
            if not hasattr(user, 'cards_sold_count'):
                user.cards_sold_count = 0
                needs_update = True
            
            if not hasattr(user, 'selling_profit'):
                user.selling_profit = 0
                needs_update = True
            
            if not hasattr(user, 'suggestions_made'):
                user.suggestions_made = 0
                needs_update = True
            
            if not hasattr(user, 'accepted_suggestions'):
                user.accepted_suggestions = 0
                needs_update = True
            
            if not hasattr(user, 'giveaway_participation'):
                user.giveaway_participation = 0
                needs_update = True
            
            if not hasattr(user, 'giveaway_wins'):
                user.giveaway_wins = 0
                needs_update = True
            
            if not hasattr(user, 'artifact_cards_received'):
                user.artifact_cards_received = 0
                needs_update = True
            
            if not hasattr(user, 'legendary_streak'):
                user.legendary_streak = 0
                needs_update = True
            
            if not hasattr(user, 'max_legendary_streak'):
                user.max_legendary_streak = 0
                needs_update = True
            
            if not hasattr(user, 'artifacts_this_month'):
                user.artifacts_this_month = 0
                needs_update = True
            
            if not hasattr(user, 'last_month_reset'):
                user.last_month_reset = None
                needs_update = True
            
            if not hasattr(user, 'cards_received_today'):
                user.cards_received_today = 0
                needs_update = True
            
            if not hasattr(user, 'last_day_reset'):
                user.last_day_reset = None
                needs_update = True
            
            if not hasattr(user, 'cards_received_at_hours'):
                user.cards_received_at_hours = []
                needs_update = True
            
            if not hasattr(user, 'night_cards_count'):
                user.night_cards_count = 0
                needs_update = True
            
            if not hasattr(user, 'morning_cards_count'):
                user.morning_cards_count = 0
                needs_update = True
            
            if not hasattr(user, 'card_streak'):
                user.card_streak = 0
                needs_update = True
            
            if not hasattr(user, 'max_card_streak'):
                user.max_card_streak = 0
                needs_update = True
            
            if not hasattr(user, 'events_completed'):
                user.events_completed = 0
                needs_update = True
            
            if not hasattr(user, 'total_days_played'):
                user.total_days_played = 0
                needs_update = True
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if needs_update:
                await user_service.update_user(user)
                migrated_count += 1
                print(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.telegram_id}")
        
        print(f"\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±–Ω–æ–≤–ª–µ–Ω–æ {migrated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ {len(all_users)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await db.disconnect()
        print("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")


if __name__ == "__main__":
    asyncio.run(migrate_user_achievements())
