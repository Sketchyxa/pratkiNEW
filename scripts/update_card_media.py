#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
"""

import asyncio
import sys
import os
import glob

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.connection import db
from services.card_service import card_service
from loguru import logger

async def update_card_media():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã"""
    print("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏...")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.connect()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        all_cards = await card_service.get_all_cards()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(all_cards)} –∫–∞—Ä—Ç–æ—á–µ–∫")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        media_files = glob.glob("assets/images/*.mp4")
        media_files.extend(glob.glob("assets/images/*.gif"))
        media_files.extend(glob.glob("assets/images/*.jpg"))
        media_files.extend(glob.glob("assets/images/*.jpeg"))
        media_files.extend(glob.glob("assets/images/*.png"))
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(media_files)} –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–º–µ–Ω –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ —Ñ–∞–π–ª–æ–≤
        card_media_map = {}
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã —Å –∏–º–µ–Ω–∞–º–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ (card24.mp4, card25.mp4 –∏ —Ç.–¥.)
        for file_path in media_files:
            filename = os.path.basename(file_path)
            name_without_ext = os.path.splitext(filename)[0]
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "card" –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–æ
            if name_without_ext.startswith("card") and name_without_ext[4:].isdigit():
                card_number = int(name_without_ext[4:])
                # –ù–∞–π–¥–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ –Ω–æ–º–µ—Ä—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if card_number <= len(all_cards):
                    card = all_cards[card_number - 1]  # –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 0
                    card_media_map[card.name] = f"assets/images/{filename}"
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
        special_cards = [
            "ancient_sage", "crystal_phoenix", "mechanical_titan", "wind_shaman",
            "sea_leviathan", "mountain_dwarf", "poison_basilisk", "fire_dragon",
            "ghost_knight", "sand_scorpion", "desert_djinn", "snow_wolf",
            "ice_golem", "forest_bear", "sky_whale", "forest_fairy",
            "star_drake", "sacred_unicorn", "forest_elf", "vampire_queen",
            "dark_mage", "goblin_mechanic", "wisdom_tree"
        ]
        
        for card_name in special_cards:
            for file_path in media_files:
                filename = os.path.basename(file_path)
                name_without_ext = os.path.splitext(filename)[0]
                
                if name_without_ext == card_name:
                    # –ù–∞–π–¥–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ –∏–º–µ–Ω–∏
                    for card in all_cards:
                        if card_name.lower() in card.name.lower():
                            card_media_map[card.name] = f"assets/images/{filename}"
                            break
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(card_media_map)} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
        updated_count = 0
        for card_name, media_path in card_media_map.items():
            card = await card_service.get_card_by_name(card_name)
            if card:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
                if media_path.endswith('.mp4'):
                    card.video_url = media_path
                elif media_path.endswith('.gif'):
                    card.gif_url = media_path
                elif media_path.endswith(('.jpg', '.jpeg', '.png')):
                    card.image_url = media_path
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
                success = await card_service.update_card(card)
                if success:
                    updated_count += 1
                    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞: {card_name} -> {media_path}")
        
        print(f"\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ {len(card_media_map)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        print("\nüìã –ü—Ä–∏–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫:")
        for i, (card_name, media_path) in enumerate(list(card_media_map.items())[:5]):
            print(f"  {i+1}. {card_name} -> {media_path}")
        
        print("\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await db.disconnect()
        print("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")


if __name__ == "__main__":
    asyncio.run(update_card_media())
