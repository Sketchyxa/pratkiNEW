#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–∞–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏ NFT
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from services.card_service import card_service
from config import settings
from database.connection import db


async def setup_nft_cards():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–∞–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è NFT"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ NFT –∫–∞—Ä—Ç–æ—á–µ–∫...")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.connect()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        all_cards = await card_service.get_all_cards()
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(all_cards)}")
        
        # –¶–µ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–¥–∫–æ—Å—Ç–µ–π
        nft_prices = {
            "common": 1000,
            "rare": 2000,
            "epic": 3000,
            "legendary": 4000,
            "artifact": 5000
        }
        
        updated_count = 0
        
        for card in all_cards:
            # –î–µ–ª–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è NFT
            if not card.is_nft_available:
                card.is_nft_available = True
                card.nft_price = nft_prices.get(card.rarity, 1000)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –±–∞–∑–µ
                success = await card_service.update_card(card)
                if success:
                    updated_count += 1
                    print(f"‚úÖ {card.name} ({card.rarity}) - {card.nft_price} XP")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {card.name}")
        
        print(f"\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìà –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {updated_count}")
        print(f"üíé –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–∞–∫ NFT!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        rarity_stats = {}
        for card in all_cards:
            if card.is_nft_available:
                rarity_stats[card.rarity] = rarity_stats.get(card.rarity, 0) + 1
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º:")
        for rarity, count in rarity_stats.items():
            price = nft_prices.get(rarity, 1000)
            print(f"‚Ä¢ {rarity.title()}: {count} –∫–∞—Ä—Ç–æ—á–µ–∫ - {price} XP")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await db.disconnect()


async def reset_nft_cards():
    """–°–±—Ä–æ—Å –≤—Å–µ—Ö NFT –∫–∞—Ä—Ç–æ—á–µ–∫ (—É–¥–∞–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤)"""
    print("üîÑ –°–±—Ä–æ—Å NFT –∫–∞—Ä—Ç–æ—á–µ–∫...")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.connect()
    
    try:
        all_cards = await card_service.get_all_cards()
        reset_count = 0
        
        for card in all_cards:
            if card.is_nft_owned():
                card.nft_owner_id = None
                card.nft_assigned_at = None
                card.nft_transfer_count = 0
                
                success = await card_service.update_card(card)
                if success:
                    reset_count += 1
                    print(f"üîÑ –°–±—Ä–æ—à–µ–Ω–∞ NFT: {card.name}")
        
        print(f"\n‚úÖ –°–±—Ä–æ—à–µ–Ω–æ NFT –∫–∞—Ä—Ç–æ—á–µ–∫: {reset_count}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await db.disconnect()


async def show_nft_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å NFT –∫–∞—Ä—Ç–æ—á–µ–∫"""
    print("üìä –°—Ç–∞—Ç—É—Å NFT –∫–∞—Ä—Ç–æ—á–µ–∫...")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.connect()
    
    try:
        all_cards = await card_service.get_all_cards()
        
        available_count = 0
        owned_count = 0
        
        for card in all_cards:
            if card.is_nft_available:
                available_count += 1
                if card.is_nft_owned():
                    owned_count += 1
                    print(f"üîí {card.name} - –≤–ª–∞–¥–µ–ª–µ—Ü: {card.nft_owner_id}")
                else:
                    print(f"üõí {card.name} - {card.nft_price} XP")
        
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"‚Ä¢ –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(all_cards)}")
        print(f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è NFT: {available_count}")
        print(f"‚Ä¢ –ü—Ä–∏—Å–≤–æ–µ–Ω–æ –∫–∞–∫ NFT: {owned_count}")
        print(f"‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏: {available_count - owned_count}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await db.disconnect()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python setup_nft_cards.py setup    - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞–∫ NFT")
        print("  python setup_nft_cards.py reset    - –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ NFT")
        print("  python setup_nft_cards.py status   - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å")
        return
    
    command = sys.argv[1]
    
    if command == "setup":
        await setup_nft_cards()
    elif command == "reset":
        await reset_nft_cards()
    elif command == "status":
        await show_nft_status()
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")


if __name__ == "__main__":
    asyncio.run(main())
