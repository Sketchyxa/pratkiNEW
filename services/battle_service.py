import random
from datetime import datetime, timedelta
from typing import List, Optional, Tuple
from loguru import logger

from models.user import User, BattleDeck
from models.card import Mob
from database.connection import db


class BattleService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—è–º–∏ —Å –º–æ–±–∞–º–∏"""
    
    def __init__(self):
        self.mobs_data = self._generate_mobs()
    
    def _generate_mobs(self) -> List[Mob]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–±–æ–≤ –¥–ª—è –≤—Å–µ—Ö 50 —É—Ä–æ–≤–Ω–µ–π"""
        mobs = []
        
        # –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –º–æ–±–æ–≤
        mob_names = [
            "–ì–æ–±–ª–∏–Ω", "–û—Ä–∫", "–¢—Ä–æ–ª–ª—å", "–î—Ä–∞–∫–æ–Ω", "–î–µ–º–æ–Ω", "–í–∞–º–ø–∏—Ä", "–û–±–æ—Ä–æ—Ç–µ–Ω—å", "–ó–æ–º–±–∏",
            "–°–∫–µ–ª–µ—Ç", "–ü—Ä–∏–∑—Ä–∞–∫", "–≠–ª–µ–º–µ–Ω—Ç–∞–ª—å", "–ì–∏–≥–∞–Ω—Ç", "–¶–∏–∫–ª–æ–ø", "–ú–∏–Ω–æ—Ç–∞–≤—Ä", "–•–∏–º–µ—Ä–∞",
            "–ì–∞—Ä–ø–∏—è", "–ö–µ–Ω—Ç–∞–≤—Ä", "–ü–µ–≥–∞—Å", "–ï–¥–∏–Ω–æ—Ä–æ–≥", "–§–µ–Ω–∏–∫—Å", "–ì—Ä–∏—Ñ–æ–Ω", "–í–∞—Å–∏–ª–∏—Å–∫",
            "–ö—Ä–∞–∫–µ–Ω", "–õ–µ–≤–∏–∞—Ñ–∞–Ω", "–ë–µ–≥–µ–º–æ—Ç", "–ö—Ä–∞–∫–µ–Ω", "–ú–µ–¥—É–∑–∞", "–°–∏—Ä–µ–Ω–∞", "–†—É—Å–∞–ª–∫–∞",
            "–¢—Ä–∏—Ç–æ–Ω", "–ù–µ—Ä–µ–∏–¥–∞", "–û–∫–µ–∞–Ω–∏–¥", "–ù–∞—è–¥–∞", "–î—Ä–∏–∞–¥–∞", "–ù–∏–º—Ñ–∞", "–§–µ—è", "–≠–ª—å—Ñ",
            "–î–≤–∞—Ä—Ñ", "–•–∞–ª—Ñ–ª–∏–Ω–≥", "–ì–Ω–æ–º", "–ö–æ–±–æ–ª—å–¥", "–ì–Ω–æ–ª–ª", "–ë—É–≥–∞–π", "–û–≥—Ä", "–≠—Ç—Ç–∏–Ω",
            "–§–æ–º–æ—Ä", "–¢–∏—Ç–∞–Ω", "–ë–æ–≥", "–ê—Ä—Ö–∏–¥–µ–º–æ–Ω", "–î—Ä–µ–≤–Ω–∏–π", "–ü—Ä–∏–º–∏—Ç–∏–≤"
        ]
        
        for level in range(1, 51):
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–∏–ª—É –º–æ–±–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç)
            if level <= 30:
                base_power = int(level * 80 + (level ** 1.5) * 10) + random.randint(-30, 30)
            else:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∏–ª—É –¥–ª—è —É—Ä–æ–≤–Ω–µ–π 30-50
                base_power = int(level * 120 + (level ** 2) * 15) + random.randint(-50, 50)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
            if level <= 10:
                difficulty = "easy"
                power_multiplier = 0.7
            elif level <= 25:
                difficulty = "normal"
                power_multiplier = 1.0
            elif level <= 40:
                difficulty = "hard"
                power_multiplier = 1.6
            else:
                difficulty = "boss"
                power_multiplier = 2.5
            
            power = int(base_power * power_multiplier)
            health = power * 2
            
            # –ù–∞–≥—Ä–∞–¥—ã
            exp_reward = level * 2 + random.randint(5, 15)
            coin_reward = level + random.randint(1, 5)
            
            mob = Mob(
                name=f"{mob_names[level-1]} –£—Ä–æ–≤–Ω—è {level}",
                description=f"–ú–æ–≥—É—á–∏–π {mob_names[level-1].lower()} {level} —É—Ä–æ–≤–Ω—è",
                level=level,
                power=power,
                health=health,
                experience_reward=exp_reward,
                coin_reward=coin_reward,
                difficulty=difficulty
            )
            mobs.append(mob)
        
        return mobs
    
    async def get_mob_by_level(self, level: int) -> Optional[Mob]:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–æ–±–∞ –ø–æ —É—Ä–æ–≤–Ω—é"""
        if 1 <= level <= 50:
            return self.mobs_data[level - 1]
        return None
    
    def calculate_card_power(self, card_rarity: str) -> int:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–∏–ª—É –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –µ—ë —Ä–µ–¥–∫–æ—Å—Ç–∏"""
        power_map = {
            "common": random.randint(100, 300),
            "rare": random.randint(400, 800),
            "epic": random.randint(1000, 2000),
            "legendary": random.randint(2500, 5000),
            "artifact": random.randint(6000, 12000)
        }
        return power_map.get(card_rarity, 200)
    
    async def get_user_deck_power(self, user: User) -> int:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â—É—é —Å–∏–ª—É –∫–æ–ª–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        total_power = 0
        
        for card_id in user.battle_deck.card_ids:
            # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_card = next((c for c in user.cards if c.card_id == card_id), None)
            if user_card:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–æ—á–∫–µ –∏–∑ –±–∞–∑—ã
                from bson import ObjectId
                try:
                    card_info = await db.cards.find_one({"_id": ObjectId(card_id)})
                    if card_info:
                        rarity = card_info.get("rarity", "common")
                        total_power += self.calculate_card_power(rarity)
                except:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Å–∏–ª—É
                    total_power += self.calculate_card_power("common")
        
        return total_power
    
    async def battle_mob(self, user: User, mob_level: int) -> Tuple[bool, str, dict]:
        """
        –ü—Ä–æ–≤–æ–¥–∏—Ç –±–æ–π —Å –º–æ–±–æ–º
        
        Returns:
            Tuple[bool, str, dict]: (–ø–æ–±–µ–¥–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–≥—Ä–∞–¥—ã)
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±–æ—è
        if not user.can_battle():
            time_left = 3600
            if user.battle_progress.last_battle_time:
                time_passed = (datetime.utcnow() - user.battle_progress.last_battle_time).total_seconds()
                time_left = max(0, 3600 - time_passed)
            
            if time_left > 0:
                minutes = int(time_left // 60)
                seconds = int(time_left % 60)
                return False, f"‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {minutes:02d}:{seconds:02d} –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –±–æ–µ–º", {}
            
            return False, "‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–ª–æ–¥–∞ –∏–∑ 5 –∫–∞—Ä—Ç –¥–ª—è –±–æ—è", {}
        
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–±–∞
        mob = await self.get_mob_by_level(mob_level)
        if not mob:
            return False, "‚ùå –ú–æ–± –Ω–µ –Ω–∞–π–¥–µ–Ω", {}
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–∏–ª—É –∫–æ–ª–æ–¥—ã
        deck_power = await self.get_user_deck_power(user)
        
        # –ü—Ä–æ–≤–æ–¥–∏–º –±–æ–π
        battle_result = self._simulate_battle(deck_power, mob.power)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.battle_progress.total_battles += 1
        user.battle_progress.last_battle_time = datetime.utcnow()
        
        if battle_result:
            # –ü–æ–±–µ–¥–∞
            user.battle_progress.battles_won += 1
            if user.battle_progress.current_level == mob_level:
                user.battle_progress.current_level = min(50, mob_level + 1)
            
            # –ù–∞–≥—Ä–∞–¥—ã
            rewards = {
                "experience": mob.experience_reward,
                "coins": mob.coin_reward
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            user.add_experience(mob.experience_reward)
            user.coins += mob.coin_reward
            
            message = (
                f"üéâ **–ü–æ–±–µ–¥–∞!**\n\n"
                f"‚öîÔ∏è –í—ã –ø–æ–±–µ–¥–∏–ª–∏ {mob.name}\n"
                f"üí™ –°–∏–ª–∞ –≤–∞—à–µ–π –∫–æ–ª–æ–¥—ã: {deck_power}\n"
                f"üíÄ –°–∏–ª–∞ –º–æ–±–∞: {mob.power}\n\n"
                f"üí∞ –ù–∞–≥—Ä–∞–¥—ã:\n"
                f"üìà –û–ø—ã—Ç: +{mob.experience_reward}\n"
                f"ü™ô –ú–æ–Ω–µ—Ç—ã: +{mob.coin_reward}\n\n"
                f"üèÜ –ü—Ä–æ–≥—Ä–µ—Å—Å: {user.battle_progress.current_level}/50"
            )
            
            return True, message, rewards
        else:
            # –ü–æ—Ä–∞–∂–µ–Ω–∏–µ
            message = (
                f"üíÄ **–ü–æ—Ä–∞–∂–µ–Ω–∏–µ!**\n\n"
                f"‚öîÔ∏è {mob.name} –æ–∫–∞–∑–∞–ª—Å—è —Å–∏–ª—å–Ω–µ–µ\n"
                f"üí™ –°–∏–ª–∞ –≤–∞—à–µ–π –∫–æ–ª–æ–¥—ã: {deck_power}\n"
                f"üíÄ –°–∏–ª–∞ –º–æ–±–∞: {mob.power}\n\n"
                f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ—é –∫–æ–ª–æ–¥—É –∏–ª–∏ —Å–æ–±—Ä–∞—Ç—å –±–æ–ª–µ–µ —Å–∏–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã"
            )
            
            return False, message, {}
    
    def _simulate_battle(self, deck_power: int, mob_power: int) -> bool:
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –±–æ–π –º–µ–∂–¥—É –∫–æ–ª–æ–¥–æ–π –∏ –º–æ–±–æ–º"""
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
        deck_roll = random.randint(int(deck_power * 0.8), int(deck_power * 1.2))
        mob_roll = random.randint(int(mob_power * 0.8), int(mob_power * 1.2))
        
        return deck_roll >= mob_roll
    
    async def get_available_mobs(self, user: User) -> List[Mob]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–±–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        available_mobs = []
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–µ–¥—É—é—â–∏—Ö
        start_level = max(1, user.battle_progress.current_level - 2)
        end_level = min(50, user.battle_progress.current_level + 2)
        
        for level in range(start_level, end_level + 1):
            mob = await self.get_mob_by_level(level)
            if mob:
                available_mobs.append(mob)
        
        return available_mobs
    
    async def can_battle_mob(self, user: User, mob_level: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ä–∞–∂–∞—Ç—å—Å—è —Å –º–æ–±–æ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
        if not user.can_battle():
            return False
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å—Ä–∞–∂–∞—Ç—å—Å—è —Å –º–æ–±–∞–º–∏ —Å–≤–æ–µ–≥–æ —É—Ä–æ–≤–Ω—è –∏ –Ω–∏–∂–µ
        return mob_level <= user.battle_progress.current_level


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
battle_service = BattleService()
