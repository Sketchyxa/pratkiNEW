from datetime import datetime, timedelta
from typing import List, Optional
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from loguru import logger

from models.user import User
from models.card import Card
from services.user_service import user_service


class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    
    def __init__(self):
        self.bot: Optional[Bot] = None
    
    def set_bot(self, bot: Bot):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
        self.bot = bot
    
    async def notify_new_card(self, card: Card) -> int:
        """
        –£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        if not self.bot:
            logger.error("Bot instance not set for notifications")
            return 0
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
            users = await user_service.get_all_users()
            active_users = [user for user in users if user.notifications_enabled]
            
            notification_text = (
                f"üÜï **–ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!**\n\n"
                f"{card.get_rarity_emoji()} **{card.name}**\n\n"
                f"üìù {card.description}\n\n"
                f"‚≠ê **–†–µ–¥–∫–æ—Å—Ç—å:** {card.rarity.title()}\n"
                f"üé≤ **–®–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω–∏—è:** {self._get_rarity_probability(card.rarity)}%\n\n"
                f"üé¥ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –µ—ë –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ –∏–ª–∏ –º–∞–≥–∞–∑–∏–Ω–µ!"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üé¥ –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–Ω—è", callback_data="daily_card"),
                    InlineKeyboardButton(text="üè™ –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")
                ],
                [InlineKeyboardButton(text="üìö –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data="my_cards")]
            ])
            
            sent_count = 0
            
            for user in active_users:
                try:
                    await self.bot.send_message(
                        chat_id=user.telegram_id,
                        text=notification_text,
                        reply_markup=keyboard
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    user.last_card_notification = datetime.utcnow()
                    await user_service.update_user(user)
                    
                    sent_count += 1
                    
                except Exception as e:
                    logger.error(f"Failed to send notification to user {user.telegram_id}: {e}")
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –æ—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    if "bot was blocked" in str(e).lower():
                        user.notifications_enabled = False
                        await user_service.update_user(user)
            
            logger.info(f"Sent new card notification to {sent_count} users")
            return sent_count
            
        except Exception as e:
            logger.error(f"Error sending new card notifications: {e}")
            return 0
    
    async def notify_event_completion(self, user: User, event_name: str, reward_text: str):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≤–µ–Ω—Ç–∞"""
        if not self.bot or not user.notifications_enabled:
            return
        
        try:
            notification_text = (
                f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n"
                f"–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∏–≤–µ–Ω—Ç: **{event_name}**\n\n"
                f"üéÅ **–ù–∞–≥—Ä–∞–¥—ã:**\n{reward_text}\n\n"
                f"–ó–∞–±–µ—Ä–∏—Ç–µ –∏—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ –∏–≤–µ–Ω—Ç–æ–≤!"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üé™ –ö –∏–≤–µ–Ω—Ç–∞–º", callback_data="events")]
            ])
            
            await self.bot.send_message(
                chat_id=user.telegram_id,
                text=notification_text,
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"Failed to send event completion notification: {e}")
    
    async def notify_achievement(self, user: User, achievement_name: str, points: int, coins: int):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        if not self.bot or not user.notifications_enabled:
            return
        
        try:
            reward_parts = []
            if points > 0:
                reward_parts.append(f"‚≠ê {points} –æ—á–∫–æ–≤")
            if coins > 0:
                reward_parts.append(f"ü™ô {coins} –º–æ–Ω–µ—Ç")
            
            reward_text = " + ".join(reward_parts) if reward_parts else "–ü—Ä–µ—Å—Ç–∏–∂!"
            
            notification_text = (
                f"üèÜ **–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!**\n\n"
                f"**{achievement_name}**\n\n"
                f"üéÅ **–ù–∞–≥—Ä–∞–¥–∞:** {reward_text}\n\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üèÖ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements")]
            ])
            
            await self.bot.send_message(
                chat_id=user.telegram_id,
                text=notification_text,
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"Failed to send achievement notification: {e}")
    
    async def broadcast_message(self, message: str, admin_only: bool = False) -> int:
        """
        –†–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        if not self.bot:
            logger.error("Bot instance not set for broadcast")
            return 0
        
        try:
            if admin_only:
                from config import settings
                users = await user_service.get_users_by_ids(settings.admin_ids)
            else:
                users = await user_service.get_all_users()
                users = [user for user in users if user.notifications_enabled]
            
            sent_count = 0
            
            for user in users:
                try:
                    await self.bot.send_message(
                        chat_id=user.telegram_id,
                        text=message
                    )
                    sent_count += 1
                    
                except Exception as e:
                    logger.error(f"Failed to broadcast to user {user.telegram_id}: {e}")
                    if "bot was blocked" in str(e).lower():
                        user.notifications_enabled = False
                        await user_service.update_user(user)
            
            logger.info(f"Broadcast sent to {sent_count} users")
            return sent_count
            
        except Exception as e:
            logger.error(f"Error in broadcast: {e}")
            return 0
    
    def _get_rarity_probability(self, rarity: str) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–¥–∫–æ—Å—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫–∏"""
        from config import settings
        return settings.rarities.get(rarity, {}).get("probability", 0)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
notification_service = NotificationService()
