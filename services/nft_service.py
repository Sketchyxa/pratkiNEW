from datetime import datetime
from typing import Optional, List, Tuple
from loguru import logger

from models.user import User, UserNFT
from models.card import Card
from services.user_service import user_service
from services.card_service import card_service


class NFTService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å NFT –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏"""
    
    async def get_available_nft_cards(self) -> List[Card]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–∞–∫ NFT"""
        try:
            all_cards = await card_service.get_all_cards()
            available_nfts = []
            
            for card in all_cards:
                # –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è NFT –µ—Å–ª–∏:
                # 1. –û–Ω–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –¥–æ—Å—Ç—É–ø–Ω–∞—è –¥–ª—è NFT
                # 2. –ï—â–µ –Ω–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ –Ω–∏–∫–æ–º—É
                if card.is_nft_available and not card.is_nft_owned():
                    available_nfts.append(card)
            
            return available_nfts
            
        except Exception as e:
            logger.error(f"Error getting available NFT cards: {e}")
            return []
    
    async def get_user_nfts(self, user: User) -> List[Tuple[Card, UserNFT]]:
        """–ü–æ–ª—É—á–∞–µ—Ç NFT –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_nfts = []
            
            for user_nft in user.nfts:
                if user_nft.is_active:
                    card = await card_service.get_card_by_id(user_nft.card_id)
                    if card:
                        user_nfts.append((card, user_nft))
            
            return user_nfts
            
        except Exception as e:
            logger.error(f"Error getting user NFTs: {e}")
            return []
    
    async def buy_nft(self, user: User, card_name: str) -> Tuple[bool, str]:
        """
        –ü–æ–∫—É–ø–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–∫ NFT
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫—É
            card = await card_service.get_card_by_name(card_name)
            if not card:
                return False, f"‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ '{card_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–∞–∫ NFT
            if not card.is_nft_available:
                return False, f"‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ '{card_name}' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–∞–∫ NFT"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ –ª–∏ —É–∂–µ –∫–æ–º—É-—Ç–æ
            if card.is_nft_owned():
                return False, f"‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ '{card_name}' —É–∂–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—ã—á–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
            if user.get_card_count(str(card.id)) == 0:
                return False, f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ '{card_name}'. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –µ—ë!"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–∞
            if user.experience < card.nft_price:
                return False, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–∞! –ù—É–∂–Ω–æ: {card.nft_price} XP, –µ—Å—Ç—å: {user.experience} XP"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–º–µ–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å NFT –≤–µ—Ä—Å–∏—é —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
            if user.has_nft(str(card.id)):
                return False, f"‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å NFT –≤–µ—Ä—Å–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ '{card_name}'"
            
            # –°–ø–∏—Å—ã–≤–∞–µ–º –æ–ø—ã—Ç
            user.experience -= card.nft_price
            
            # –°–æ–∑–¥–∞–µ–º NFT –∑–∞–ø–∏—Å—å
            user_nft = UserNFT(
                card_id=str(card.id),
                assigned_at=datetime.utcnow()
            )
            user.nfts.append(user_nft)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
            card.nft_owner_id = user.telegram_id
            card.nft_assigned_at = datetime.utcnow()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await user_service.update_user(user)
            await card_service.update_card(card)
            
            username = user.username if user.username else "Anonymous"
            
            message = (
                f"üéâ **NFT –ü–†–ò–°–í–û–ï–ù–ê!**\n\n"
                f"üíé @{username} –∫—É–ø–∏–ª –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–∫ NFT:\n"
                f"{card.get_rarity_emoji()} **{card.name}**\n"
                f"üìù {card.description}\n\n"
                f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {card.nft_price} XP\n"
                f"üèÜ –¢–µ–ø–µ—Ä—å –≤—ã –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–π NFT!\n"
                f"üíé –í—Å–µ–≥–æ –≤–∞—à–∏—Ö NFT: {len([nft for nft in user.nfts if nft.is_active])}"
            )
            
            return True, message
            
        except Exception as e:
            logger.error(f"Error buying NFT for user {user.telegram_id}: {e}")
            return False, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ NFT"
    
    async def transfer_nft(self, from_user: User, to_user: User, card_name: str) -> Tuple[bool, str]:
        """
        –ü–µ—Ä–µ–¥–∞–µ—Ç NFT –∫–∞—Ä—Ç–æ—á–∫—É –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫—É
            card = await card_service.get_card_by_name(card_name)
            if not card:
                return False, f"‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ '{card_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
            if card.nft_owner_id != from_user.telegram_id:
                return False, f"‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ '{card_name}' –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è –µ—Å—Ç—å –æ–±—ã—á–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
            if to_user.get_card_count(str(card.id)) == 0:
                return False, f"‚ùå –£ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ '{card_name}'. –û–Ω –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç—å –µ—ë!"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç —É–∂–µ NFT –≤–µ—Ä—Å–∏—é
            if to_user.has_nft(str(card.id)):
                return False, f"‚ùå –£ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å NFT –≤–µ—Ä—Å–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ '{card_name}'"
            
            # –ù–∞—Ö–æ–¥–∏–º NFT —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            from_user_nft = from_user.get_nft(str(card.id))
            if not from_user_nft:
                return False, f"‚ùå NFT –∫–∞—Ä—Ç–æ—á–∫–∞ '{card_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"
            
            # –°–æ–∑–¥–∞–µ–º NFT —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            to_user_nft = UserNFT(
                card_id=str(card.id),
                assigned_at=datetime.utcnow(),
                transfer_count=from_user_nft.transfer_count + 1,
                last_transfer_date=datetime.utcnow()
            )
            to_user.nfts.append(to_user_nft)
            
            # –£–¥–∞–ª—è–µ–º NFT —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            from_user.nfts = [nft for nft in from_user.nfts if nft.card_id != str(card.id)]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
            card.nft_owner_id = to_user.telegram_id
            card.nft_transfer_count += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await user_service.update_user(from_user)
            await user_service.update_user(to_user)
            await card_service.update_card(card)
            
            from_username = from_user.username if from_user.username else "Anonymous"
            to_username = to_user.username if to_user.username else "Anonymous"
            
            message = (
                f"üîÑ **NFT –ü–ï–†–ï–î–ê–ù–ê!**\n\n"
                f"üíé {from_username} ‚Üí {to_username}\n"
                f"{card.get_rarity_emoji()} **{card.name}**\n"
                f"üìù {card.description}\n\n"
                f"üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–¥–∞—á: {card.nft_transfer_count}"
            )
            
            return True, message
            
        except Exception as e:
            logger.error(f"Error transferring NFT: {e}")
            return False, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ NFT"
    
    async def sell_nft(self, user: User, card_name: str) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–¥–∞–µ—Ç NFT –∫–∞—Ä—Ç–æ—á–∫—É –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—É
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫—É
            card = await card_service.get_card_by_name(card_name)
            if not card:
                return False, f"‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ '{card_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if card.nft_owner_id != user.telegram_id:
                return False, f"‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ '{card_name}' –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º"
            
            # –ù–∞—Ö–æ–¥–∏–º NFT —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_nft = user.get_nft(str(card.id))
            if not user_nft:
                return False, f"‚ùå NFT –∫–∞—Ä—Ç–æ—á–∫–∞ '{card_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é (50% –æ—Ç —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏)
            compensation = card.nft_price // 2
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é
            user.experience += compensation
            
            # –£–¥–∞–ª—è–µ–º NFT —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.nfts = [nft for nft in user.nfts if nft.card_id != str(card.id)]
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º NFT —Å—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç–æ—á–∫–∏
            card.nft_owner_id = None
            card.nft_assigned_at = None
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await user_service.update_user(user)
            await card_service.update_card(card)
            
            username = user.username if user.username else "Anonymous"
            
            message = (
                f"üí∞ **NFT –ü–†–û–î–ê–ù–ê!**\n\n"
                f"üíé @{username} –ø—Ä–æ–¥–∞–ª NFT –∫–∞—Ä—Ç–æ—á–∫—É:\n"
                f"{card.get_rarity_emoji()} **{card.name}**\n"
                f"üìù {card.description}\n\n"
                f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ: {compensation} XP\n"
                f"üíé –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–∞–∫ NFT!"
            )
            
            return True, message
            
        except Exception as e:
            logger.error(f"Error selling NFT for user {user.telegram_id}: {e}")
            return False, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ NFT"
    
    async def get_nft_leaderboard(self) -> List[Tuple[User, int]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É NFT"""
        try:
            all_users = await user_service.get_all_users()
            nft_leaderboard = []
            
            for user in all_users:
                nft_count = len([nft for nft in user.nfts if nft.is_active])
                if nft_count > 0:
                    nft_leaderboard.append((user, nft_count))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É NFT (—É–±—ã–≤–∞–Ω–∏–µ)
            nft_leaderboard.sort(key=lambda x: x[1], reverse=True)
            
            return nft_leaderboard[:10]  # –¢–æ–ø-10
            
        except Exception as e:
            logger.error(f"Error getting NFT leaderboard: {e}")
            return []


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
nft_service = NFTService()
