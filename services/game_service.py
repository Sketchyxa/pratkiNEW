import random
from datetime import datetime, timedelta
from typing import Optional, Tuple, List
from loguru import logger

from models.user import User
from models.card import Card
from services.user_service import user_service
from services.card_service import card_service
from config import settings


class GameService:
    """–°–µ—Ä–≤–∏—Å –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏"""
    
    async def give_daily_card(self, user: User) -> Tuple[Optional[Card], bool, str]:
        """
        –í—ã–¥–∞—á–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (–∫–∞—Ä—Ç–æ—á–∫–∞, –±–æ–Ω—É—Å–Ω–∞—è_–∫–∞—Ä—Ç–æ—á–∫–∞_–≤—ã–¥–∞–Ω–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
            if not await user_service.can_get_daily_card(user):
                cooldown_hours = settings.daily_card_cooldown_hours
                return None, False, f"‚ùå –°–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ {cooldown_hours} —á–∞—Å–æ–≤!"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            card = await card_service.get_random_card()
            if not card:
                return None, False, "‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await user_service.add_card_to_user(user, str(card.id))
            await user_service.update_daily_card_time(user)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            user.update_daily_streak()
            user.increment_cards_today()
            user.record_card_received(card.rarity)
            user.reset_monthly_counters()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ä—Ç–æ—á–∫–∏
            await card_service.update_card_stats(card.name, 1, 
                                               1 if user.get_card_count(str(card.id)) == 1 else 0)
            
            # –ë–æ–Ω—É—Å –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤
            bonus_card = False
            if settings.newbie_bonus and not user.first_card_received:
                user.first_card_received = True
                await user_service.update_user(user)
                
                # –í—ã–¥–∞–µ–º –±–æ–Ω—É—Å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
                bonus_card_obj = await card_service.get_random_card()
                if bonus_card_obj:
                    await user_service.add_card_to_user(user, str(bonus_card_obj.id))
                    await card_service.update_card_stats(bonus_card_obj.name, 1, 
                                                       1 if user.get_card_count(str(bonus_card_obj.id)) == 1 else 0)
                    bonus_card = True
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç
            exp_gained = 10
            if card.rarity == "rare":
                exp_gained = 25
            elif card.rarity == "epic":
                exp_gained = 50
            elif card.rarity == "legendary":
                exp_gained = 100
            elif card.rarity == "artifact":
                exp_gained = 250
            
            level_up = await user_service.add_experience(user, exp_gained)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã –∑–∞ –∫–∞—Ä—Ç–æ—á–∫—É
            coins_gained = 5
            if card.rarity == "rare":
                coins_gained = 10
            elif card.rarity == "epic":
                coins_gained = 20
            elif card.rarity == "legendary":
                coins_gained = 50
            elif card.rarity == "artifact":
                coins_gained = 100
            
            user.coins += coins_gained
            await user_service.update_user(user)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
            try:
                from handlers.achievement_handlers import check_and_notify_achievements
                await check_and_notify_achievements(user, None)  # bot –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –ø–æ–∑–∂–µ
            except Exception as achievement_error:
                logger.error(f"Error checking achievements after daily card: {achievement_error}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≤–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
            try:
                from handlers.event_handlers import check_and_notify_events
                await check_and_notify_events(user)
            except Exception as event_error:
                logger.error(f"Error checking events after daily card: {event_error}")
            
            # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
            username = user.username if user.username else "Anonymous"
            rarity_name = settings.rarities.get(card.rarity, {}).get("name", card.rarity.title())
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏
            if settings.daily_card_cooldown_hours > 0:
                next_card_time = user.last_daily_card + timedelta(hours=settings.daily_card_cooldown_hours)
                remaining = next_card_time - datetime.utcnow()
                if remaining.total_seconds() > 0:
                    hours = remaining.seconds // 3600
                    minutes = (remaining.seconds % 3600) // 60
                    cooldown_text = f"üîÅ –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞: —á–µ—Ä–µ–∑ {hours}—á {minutes}–º"
                else:
                    cooldown_text = "üîÅ –°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞: –¥–æ—Å—Ç—É–ø–Ω–∞ —Å–µ–π—á–∞—Å!"
            else:
                cooldown_text = "üîÅ –°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞: –¥–æ—Å—Ç—É–ø–Ω–∞ —Å–µ–π—á–∞—Å!"
            
            message = (
                f"üéâ @{username} –ø–æ–ª—É—á–∏–ª –∫–∞—Ä—Ç–æ—á–∫—É:\n"
                f"{card.get_rarity_emoji()} **{card.name}**\n"
                f"üîπ –†–µ–¥–∫–æ—Å—Ç—å: {rarity_name}\n"
                f"üìù {card.description}\n"
                f"üß† +{exp_gained} –æ–ø—ã—Ç–∞\n"
                f"ü™ô +{coins_gained} –º–æ–Ω–µ—Ç\n\n"
                f"üëë –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —É —Ç–µ–±—è: {user.total_cards + 1}\n"
                f"{cooldown_text}"
            )
            
            if level_up > 0:
                message += f"\n\nüÜô **–ù–û–í–´–ô –£–†–û–í–ï–ù–¨: {user.level}!**"
            
            if bonus_card:
                message += f"\n\nüéÅ **–ë–æ–Ω—É—Å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –Ω–æ–≤–∏—á–∫–∞!**"
            
            return card, bonus_card, message
            
        except Exception as e:
            logger.error(f"Error giving daily card to user {user.telegram_id}: {e}")
            return None, False, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏"
    
    async def upgrade_cards(self, user: User, card_name: str) -> Tuple[bool, str]:
        """
        –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ (3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ -> 1 —Å–ª–µ–¥—É—é—â–µ–π —Ä–µ–¥–∫–æ—Å—Ç–∏)
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫—É
            card = await card_service.get_card_by_name(card_name)
            if not card:
                return False, f"‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ '{card_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_card_count = user.get_card_count(str(card.id))
            if user_card_count < settings.cards_for_upgrade:
                return False, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫. –ù—É–∂–Ω–æ: {settings.cards_for_upgrade}, –µ—Å—Ç—å: {user_card_count}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è
            target_rarity = await card_service.get_upgrade_result(card.rarity)
            if not target_rarity:
                return False, f"‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–¥–∫–æ—Å—Ç–∏ '{card.rarity}' –Ω–µ–ª—å–∑—è —É–ª—É—á—à–∏—Ç—å"
            
            # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            success = await user_service.remove_card_from_user(user, str(card.id), settings.cards_for_upgrade)
            if not success:
                return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å—Ö–æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
            await card_service.update_card_stats(card.name, -settings.cards_for_upgrade)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –Ω–æ–≤–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
            new_card = await card_service.get_random_card_by_rarity(target_rarity)
            if not new_card:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                await user_service.add_card_to_user(user, str(card.id), settings.cards_for_upgrade)
                return False, f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ–¥–∫–æ—Å—Ç–∏ '{target_rarity}'"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            await user_service.add_card_to_user(user, str(new_card.id))
            await card_service.update_card_stats(new_card.name, 1, 
                                               1 if user.get_card_count(str(new_card.id)) == 1 else 0)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–π –æ–ø—ã—Ç
            bonus_exp = 50 + (len(settings.rarities) - list(settings.rarities.keys()).index(target_rarity)) * 25
            level_up = await user_service.add_experience(user, bonus_exp)
            
            username = user.username if user.username else "Anonymous"
            old_rarity = settings.rarities.get(card.rarity, {}).get("name", card.rarity.title())
            new_rarity = settings.rarities.get(new_card.rarity, {}).get("name", new_card.rarity.title())
            
            message = (
                f"üîÑ @{username} —É–ª—É—á—à–∏–ª –∫–∞—Ä—Ç–æ—á–∫–∏!\n\n"
                f"üì§ **–û—Ç–¥–∞–ª:** {settings.cards_for_upgrade}x {card.get_rarity_emoji()} {card.name}\n"
                f"üì• **–ü–æ–ª—É—á–∏–ª:** 1x {new_card.get_rarity_emoji()} **{new_card.name}**\n"
                f"üîπ –†–µ–¥–∫–æ—Å—Ç—å: {old_rarity} ‚Üí {new_rarity}\n"
                f"üìù {new_card.description}\n"
                f"üß† +{bonus_exp} –æ–ø—ã—Ç–∞\n\n"
                f"üëë –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {user.total_cards}"
            )
            
            if level_up > 0:
                message += f"\n\nüÜô **–ù–û–í–´–ô –£–†–û–í–ï–ù–¨: {user.level}!**"
            
            return True, message
            
        except Exception as e:
            logger.error(f"Error upgrading cards for user {user.telegram_id}: {e}")
            return False, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫"
    
    async def handle_artifact_effect(self, user: User) -> Tuple[bool, str]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (–ø—Ä–æ–∏–∑–æ—à–µ–ª_—ç—Ñ—Ñ–µ–∫—Ç, –æ–ø–∏—Å–∞–Ω–∏–µ_—ç—Ñ—Ñ–µ–∫—Ç–∞)
        """
        try:
            if not user.cards:
                return False, ""
            
            # 50% —à–∞–Ω—Å –Ω–∞ –±–æ–Ω—É—Å –∏–ª–∏ —à—Ç—Ä–∞—Ñ
            is_bonus = random.choice([True, False])
            
            if is_bonus:
                # –ë–æ–Ω—É—Å: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
                bonus_card = await card_service.get_random_card()
                if bonus_card:
                    await user_service.add_card_to_user(user, str(bonus_card.id))
                    await card_service.update_card_stats(bonus_card.name, 1, 
                                                       1 if user.get_card_count(str(bonus_card.id)) == 1 else 0)
                    return True, (
                        f"üéÅ **–ê–†–¢–ï–§–ê–ö–¢–ù–´–ô –ë–û–ù–£–°!**\n"
                        f"‚ú® –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞: {bonus_card.get_rarity_emoji()} **{bonus_card.name}**\n"
                        f"üìù {bonus_card.description}"
                    )
            else:
                # –®—Ç—Ä–∞—Ñ: –ø–æ—Ç–µ—Ä—è —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
                if user.cards:
                    random_user_card = random.choice(user.cards)
                    card = await card_service.get_card_by_id(random_user_card.card_id)
                    
                    if card and await user_service.remove_card_from_user(user, str(card.id), 1):
                        await card_service.update_card_stats(card.name, -1)
                        return True, (
                            f"üíÄ **–ê–†–¢–ï–§–ê–ö–¢–ù–û–ï –ü–†–û–ö–õ–Ø–¢–ò–ï!**\n"
                            f"‚ùå –ü–æ—Ç–µ—Ä—è–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞: {card.get_rarity_emoji()} **{card.name}**\n"
                            f"üìù {card.description}\n"
                            f"üò± –¢–∞–∫–æ–≤–∞ —Ü–µ–Ω–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–Ω–æ–π –º–∞–≥–∏–∏..."
                        )
            
            return False, ""
            
        except Exception as e:
            logger.error(f"Error handling artifact effect for user {user.telegram_id}: {e}")
            return False, ""
    
    async def get_user_collection(self, user: User, page: int = 1, 
                                 page_size: int = 10) -> Tuple[List[Tuple[Card, int]], int, int]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (—Å–ø–∏—Å–æ–∫_(–∫–∞—Ä—Ç–æ—á–∫–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ), –æ–±—â–µ–µ_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –≤—Å–µ–≥–æ_—Å—Ç—Ä–∞–Ω–∏—Ü)
        """
        try:
            logger.info(f"Getting collection for user with {len(user.cards) if user.cards else 0} cards")
            
            if not user.cards:
                logger.warning(f"User has no cards in user.cards list")
                return [], 0, 0
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö (—Ç–æ–ª—å–∫–æ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º > 0)
            collection = []
            for user_card in user.cards:
                logger.info(f"Processing user card: {user_card.card_id}, quantity: {user_card.quantity}")
                if user_card.quantity > 0:  # –¢–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–æ–ª—å—à–µ 0
                    card = await card_service.get_card_by_id(user_card.card_id)
                    if card:
                        logger.info(f"Found card: {card.name}")
                        collection.append((card, user_card.quantity))
                    else:
                        logger.warning(f"Card not found for ID: {user_card.card_id}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—é
            rarity_order = list(settings.rarities.keys())
            collection.sort(key=lambda x: (rarity_order.index(x[0].rarity), x[0].name))
            
            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            total_items = len(collection)
            total_pages = (total_items + page_size - 1) // page_size
            start_idx = (page - 1) * page_size
            end_idx = start_idx + page_size
            
            return collection[start_idx:end_idx], total_items, total_pages
            
        except Exception as e:
            logger.error(f"Error getting user collection {user.telegram_id}: {e}")
            return [], 0, 0


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
game_service = GameService()
