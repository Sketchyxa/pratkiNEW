from datetime import datetime
from typing import Optional, List, Dict, Any, Annotated
from pydantic import BaseModel, Field, BeforeValidator
from bson import ObjectId


def validate_object_id(v):
    if isinstance(v, ObjectId):
        return v
    if isinstance(v, str) and ObjectId.is_valid(v):
        return ObjectId(v)
    raise ValueError("Invalid ObjectId")


PyObjectId = Annotated[ObjectId, BeforeValidator(validate_object_id)]


class EventReward(BaseModel):
    """–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∏–≤–µ–Ω—Ç"""
    coins: int = 0
    experience: int = 0
    cards: List[str] = []  # ID –∫–∞—Ä—Ç–æ—á–µ–∫
    special_title: Optional[str] = None  # –û—Å–æ–±–æ–µ –∑–≤–∞–Ω–∏–µ


class Event(BaseModel):
    """–°–µ–∑–æ–Ω–Ω—ã–π –∏–≤–µ–Ω—Ç"""
    id: Optional[PyObjectId] = Field(default_factory=PyObjectId, alias="_id")
    name: str = Field(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞")
    description: str = Field(..., description="–û–ø–∏—Å–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞")
    icon: str = Field(default="üé™", description="–ò–∫–æ–Ω–∫–∞ –∏–≤–µ–Ω—Ç–∞")
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
    start_date: datetime = Field(..., description="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞")
    end_date: datetime = Field(..., description="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è")
    
    # –¢–∏–ø –∏–≤–µ–Ω—Ç–∞
    event_type: str = Field(default="collection", description="–¢–∏–ø –∏–≤–µ–Ω—Ç–∞: collection, cards, level")
    
    # –£—Å–ª–æ–≤–∏—è
    target_type: str = Field(..., description="–¢–∏–ø —Ü–µ–ª–∏: card_rarity, total_cards, specific_cards")
    target_value: Any = Field(..., description="–ó–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–∏")
    target_data: Dict[str, Any] = Field(default_factory=dict, description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    # –ù–∞–≥—Ä–∞–¥—ã
    rewards: EventReward = Field(default_factory=EventReward)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_participants: int = Field(default=0)
    total_completed: int = Field(default=0)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    is_active: bool = Field(default=True)
    is_hidden: bool = Field(default=False, description="–°–∫—Ä—ã—Ç—ã–π –∏–≤–µ–Ω—Ç –¥–æ —Å—Ç–∞—Ä—Ç–∞")
    max_participants: Optional[int] = Field(default=None, description="–ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–ª—è
    created_at: datetime = Field(default_factory=datetime.utcnow)
    created_by: int = Field(..., description="ID –∞–¥–º–∏–Ω–∞ —Å–æ–∑–¥–∞–≤—à–µ–≥–æ –∏–≤–µ–Ω—Ç")
    
    class Config:
        populate_by_name = True
        arbitrary_types_allowed = True
        json_encoders = {ObjectId: str}


class UserEventProgress(BaseModel):
    """–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–≤–µ–Ω—Ç–µ"""
    event_id: str
    user_id: int
    current_progress: int = Field(default=0)
    target_progress: int = Field(...)
    is_completed: bool = Field(default=False)
    completed_at: Optional[datetime] = None
    rewards_claimed: bool = Field(default=False)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress_data: Dict[str, Any] = Field(default_factory=dict)
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–ª—è
    started_at: datetime = Field(default_factory=datetime.utcnow)
    last_updated: datetime = Field(default_factory=datetime.utcnow)
    
    class Config:
        populate_by_name = True
        arbitrary_types_allowed = True
