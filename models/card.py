from datetime import datetime
from typing import Optional, List, Dict, Any
from pydantic import BaseModel, Field
from bson import ObjectId
from models.user import PyObjectId


class Card(BaseModel):
    id: Optional[PyObjectId] = Field(default_factory=PyObjectId, alias="_id")
    name: str = Field(..., unique=True)
    description: str = ""
    rarity: str  # common, rare, epic, legendary, artifact
    
    # Media files
    image_url: Optional[str] = None
    gif_url: Optional[str] = None
    video_url: Optional[str] = None
    
    # Metadata
    tags: List[str] = []
    is_active: bool = True
    
    # Stats
    total_owned: int = 0  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    unique_owners: int = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
    
    # NFT System
    is_nft_available: bool = False  # –ú–æ–∂–Ω–æ –ª–∏ –∫—É–ø–∏—Ç—å –∫–∞–∫ NFT
    nft_price: int = 1000  # –¶–µ–Ω–∞ –≤ XP –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–∞–∫ NFT
    nft_owner_id: Optional[int] = None  # Telegram ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ NFT (–µ—Å–ª–∏ –ø—Ä–∏—Å–≤–æ–µ–Ω–∞)
    nft_assigned_at: Optional[datetime] = None  # –ö–æ–≥–¥–∞ –±—ã–ª–∞ –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ –∫–∞–∫ NFT
    nft_transfer_count: int = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–¥–∞—á NFT
    
    # Timestamps
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: datetime = Field(default_factory=datetime.utcnow)
    created_by: Optional[int] = None  # Telegram ID –∞–¥–º–∏–Ω–∞
    
    class Config:
        populate_by_name = True
        arbitrary_types_allowed = True
        json_encoders = {ObjectId: str}
    
    def get_rarity_emoji(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫–∏"""
        rarity_emojis = {
            "common": "‚ö™",
            "rare": "üîµ", 
            "epic": "üü£",
            "legendary": "üü°",
            "artifact": "üî¥"
        }
        return rarity_emojis.get(self.rarity, "‚ùì")
    
    def get_media_url(self) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: video > gif > image)"""
        if self.video_url:
            return self.video_url
        if self.gif_url:
            return self.gif_url
        return self.image_url
    
    def is_nft_owned(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ –ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –∫–∞–∫ NFT"""
        return self.nft_owner_id is not None
    
    def get_nft_status_text(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ NFT"""
        if self.is_nft_owned():
            return f"üíé NFT –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ (–≤–ª–∞–¥–µ–ª–µ—Ü: {self.nft_owner_id})"
        elif self.is_nft_available:
            return f"üíé –î–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–∞–∫ NFT –∑–∞ {self.nft_price} XP"
        else:
            return "üìÑ –û–±—ã—á–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞"


class Mob(BaseModel):
    """–ú–æ–± –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –±–æ—è"""
    id: Optional[PyObjectId] = Field(default_factory=PyObjectId, alias="_id")
    name: str = Field(..., unique=True)
    description: str = ""
    level: int = Field(..., ge=1, le=50)
    
    # Battle stats
    power: int = Field(..., ge=1)  # –°–∏–ª–∞ –º–æ–±–∞
    health: int = Field(..., ge=1)  # –ó–¥–æ—Ä–æ–≤—å–µ –º–æ–±–∞
    
    # Rewards
    experience_reward: int = Field(default=10)
    coin_reward: int = Field(default=5)
    
    # Metadata
    is_active: bool = True
    difficulty: str = "normal"  # easy, normal, hard, boss
    
    # Timestamps
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: datetime = Field(default_factory=datetime.utcnow)
    
    class Config:
        populate_by_name = True
        arbitrary_types_allowed = True
        json_encoders = {ObjectId: str}
    
    def get_difficulty_emoji(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–±–∞"""
        difficulty_emojis = {
            "easy": "üü¢",
            "normal": "üü°",
            "hard": "üü†",
            "boss": "üî¥"
        }
        return difficulty_emojis.get(self.difficulty, "‚ùì")


class CardStats(BaseModel):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫"""
    id: Optional[PyObjectId] = Field(default_factory=PyObjectId, alias="_id")
    total_cards: int = 0
    total_unique_cards: int = 0
    cards_by_rarity: Dict[str, int] = {}
    most_popular_card: Optional[str] = None
    rarest_card: Optional[str] = None
    
    updated_at: datetime = Field(default_factory=datetime.utcnow)
    
    class Config:
        populate_by_name = True
        arbitrary_types_allowed = True
        json_encoders = {ObjectId: str}
