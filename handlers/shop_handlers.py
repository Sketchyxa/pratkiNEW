from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from loguru import logger
import random

from models.user import User
from services.user_service import user_service
from services.card_service import card_service
from services.game_service import game_service

router = Router()


async def safe_edit_message(callback, text: str, reply_markup=None, success_message: str = None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        await callback.message.edit_text(text, reply_markup=reply_markup)
        if success_message:
            await callback.answer(success_message)
        else:
            await callback.answer()
    except Exception as e:
        if "message is not modified" in str(e):
            await callback.answer("üìä –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
        elif "there is no text in the message to edit" in str(e):
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer(text, reply_markup=reply_markup)
            await callback.answer()
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
            logger.error(f"Error editing message: {e}")


@router.callback_query(F.data == "shop")
async def shop_menu(callback: CallbackQuery):
    """–ú–∞–≥–∞–∑–∏–Ω –∫–∞—Ä—Ç–æ—á–µ–∫"""
    try:
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        from datetime import datetime, timedelta
        now = datetime.utcnow()
        
        pack_info = {
            "starter": {"name": "–°—Ç–∞—Ä—Ç–µ—Ä –ø–∞–∫", "cost": 25, "desc": "1 –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è Common", "cooldown": 0.2},
            "basic": {"name": "–ë–∞–∑–æ–≤—ã–π –ø–∞–∫", "cost": 50, "desc": "1 —Å–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞", "cooldown": 0.5},
            "premium": {"name": "–ü—Ä–µ–º–∏—É–º –ø–∞–∫", "cost": 100, "desc": "2 –∫–∞—Ä—Ç–æ—á–∫–∏ + —à–∞–Ω—Å Epic", "cooldown": 1},
            "elite": {"name": "–≠–ª–∏—Ç–Ω—ã–π –ø–∞–∫", "cost": 200, "desc": "3 –∫–∞—Ä—Ç–æ—á–∫–∏ + Rare", "cooldown": 2},
            "super": {"name": "–°—É–ø–µ—Ä –ø–∞–∫", "cost": 350, "desc": "5 –∫–∞—Ä—Ç–æ—á–µ–∫ + Epic", "cooldown": 3},
            "mega": {"name": "–ú–µ–≥–∞ –ø–∞–∫", "cost": 600, "desc": "8 –∫–∞—Ä—Ç–æ—á–µ–∫ + Legendary", "cooldown": 5},
            "ultra": {"name": "–£–ª—å—Ç—Ä–∞ –ø–∞–∫", "cost": 1000, "desc": "12 –∫–∞—Ä—Ç–æ—á–µ–∫ + 2 Legendary", "cooldown": 10},
            "legendary": {"name": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–∞–∫", "cost": 1500, "desc": "15 –∫–∞—Ä—Ç–æ—á–µ–∫ + Legendary", "cooldown": 15},
            "artifact": {"name": "–ê—Ä—Ç–µ—Ñ–∞–∫—Ç–Ω—ã–π –ø–∞–∫", "cost": 2500, "desc": "20 –∫–∞—Ä—Ç–æ—á–µ–∫ + Artifact", "cooldown": 30},
            "divine": {"name": "–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–∞–∫", "cost": 5000, "desc": "30 –∫–∞—Ä—Ç–æ—á–µ–∫ + Artifact", "cooldown": 60}
        }
        
        shop_text = f"üè™ **–ú–∞–≥–∞–∑–∏–Ω –∫–∞—Ä—Ç–æ—á–µ–∫**\n\nü™ô **–í–∞—à–∏ –º–æ–Ω–µ—Ç—ã:** {user.coins} üí∞\n\nüéÅ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–∏:**\n\n"
        
        for pack_type, info in pack_info.items():
            cooldown_text = ""
            if pack_type in user.pack_cooldowns:
                last_purchase = user.pack_cooldowns[pack_type]
                cooldown_end = last_purchase + timedelta(minutes=info["cooldown"])
                
                if now < cooldown_end:
                    time_left = cooldown_end - now
                    minutes_left = int(time_left.total_seconds() // 60)
                    seconds_left = int(time_left.total_seconds() % 60)
                    cooldown_text = f" ‚è∞ ({minutes_left}–º {seconds_left}—Å)"
            
            shop_text += f"üì¶ **{info['name']}** - {info['cost']} ü™ô{cooldown_text}\n"
            shop_text += f"‚Ä¢ {info['desc']} ‚Ä¢ –ö—É–ª–¥–∞—É–Ω: {info['cooldown']}–º\n\n"
        
        shop_text += "üé≤ –®–∞–Ω—Å –Ω–∞ Artifact: 0.1%"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üì¶ –°—Ç–∞—Ä—Ç–µ—Ä (25 ü™ô)", callback_data="buy_pack_starter"),
                InlineKeyboardButton(text="üìÑ –ë–∞–∑–æ–≤—ã–π (50 ü™ô)", callback_data="buy_pack_basic")
            ],
            [
                InlineKeyboardButton(text="üíé –ü—Ä–µ–º–∏—É–º (100 ü™ô)", callback_data="buy_pack_premium"),
                InlineKeyboardButton(text="‚≠ê –≠–ª–∏—Ç–Ω—ã–π (200 ü™ô)", callback_data="buy_pack_elite")
            ],
            [
                InlineKeyboardButton(text="üé∞ –°—É–ø–µ—Ä (350 ü™ô)", callback_data="buy_pack_super"),
                InlineKeyboardButton(text="üî• –ú–µ–≥–∞ (600 ü™ô)", callback_data="buy_pack_mega")
            ],
            [
                InlineKeyboardButton(text="üí´ –£–ª—å—Ç—Ä–∞ (1000 ü™ô)", callback_data="buy_pack_ultra"),
                InlineKeyboardButton(text="üëë –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π (1500 ü™ô)", callback_data="buy_pack_legendary")
            ],
            [
                InlineKeyboardButton(text="üî¥ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–Ω—ã–π (2500 ü™ô)", callback_data="buy_pack_artifact"),
                InlineKeyboardButton(text="‚ú® –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π (5000 ü™ô)", callback_data="buy_pack_divine")
            ],
            [
                InlineKeyboardButton(text="üéØ –í—ã–±—Ä–∞—Ç—å —Ä–µ–¥–∫–æ—Å—Ç—å", callback_data="shop_rarity"),
                InlineKeyboardButton(text="üí∞ –ü—Ä–æ–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data="sell_cards_menu")
            ],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        
        await safe_edit_message(callback, shop_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in shop menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞–≥–∞–∑–∏–Ω–∞", show_alert=True)


@router.callback_query(F.data.startswith("buy_pack_"))
async def buy_pack(callback: CallbackQuery):
    """–ü–æ–∫—É–ø–∫–∞ –ø–∞–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫"""
    try:
        pack_type = callback.data.split("_")[-1]
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–∫–æ–≤ —Å –∫—É–ª–¥–∞—É–Ω–∞–º–∏ (—É–º–µ–Ω—å—à–µ–Ω—ã –¥–ª—è –±–æ–ª—å—à–µ–π —Å–≤–æ–±–æ–¥—ã)
        pack_configs = {
            "starter": {"cost": 25, "cards": 1, "guaranteed": "common", "boost": False, "cooldown_minutes": 0.2},
            "basic": {"cost": 50, "cards": 1, "guaranteed": None, "boost": False, "cooldown_minutes": 0.5},
            "premium": {"cost": 100, "cards": 2, "guaranteed": None, "boost": True, "cooldown_minutes": 1},
            "elite": {"cost": 200, "cards": 3, "guaranteed": "rare", "boost": True, "cooldown_minutes": 2},
            "super": {"cost": 350, "cards": 5, "guaranteed": "epic", "boost": True, "cooldown_minutes": 3},
            "mega": {"cost": 600, "cards": 8, "guaranteed": "legendary", "boost": True, "cooldown_minutes": 5},
            "ultra": {"cost": 1000, "cards": 12, "guaranteed": "legendary", "boost": True, "extra_legendary": True, "cooldown_minutes": 10},
            "legendary": {"cost": 1500, "cards": 15, "guaranteed": "legendary", "boost": True, "extra_legendary": True, "cooldown_minutes": 15},
            "artifact": {"cost": 2500, "cards": 20, "guaranteed": "artifact", "boost": True, "extra_legendary": True, "cooldown_minutes": 30},
            "divine": {"cost": 5000, "cards": 30, "guaranteed": "artifact", "boost": True, "extra_legendary": True, "cooldown_minutes": 60}
        }
        
        if pack_type not in pack_configs:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–∞–∫–∞", show_alert=True)
            return
        
        config = pack_configs[pack_type]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –ø–∞–∫–∞
        from datetime import datetime, timedelta
        now = datetime.utcnow()
        
        if pack_type in user.pack_cooldowns:
            last_purchase = user.pack_cooldowns[pack_type]
            cooldown_end = last_purchase + timedelta(minutes=config["cooldown_minutes"])
            
            if now < cooldown_end:
                time_left = cooldown_end - now
                minutes_left = int(time_left.total_seconds() // 60)
                seconds_left = int(time_left.total_seconds() % 60)
                
                await callback.answer(
                    f"‚è∞ –ü–∞–∫ –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ! –û—Å—Ç–∞–ª–æ—Å—å: {minutes_left}–º {seconds_left}—Å",
                    show_alert=True
                )
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –º–æ–Ω–µ—Ç
        if user.coins < config["cost"]:
            await callback.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ: {config['cost']} ü™ô, –µ—Å—Ç—å: {user.coins} ü™ô",
                show_alert=True
            )
            return
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω
        user.coins -= config["cost"]
        user.pack_cooldowns[pack_type] = now
        await user_service.update_user(user)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–∫
        opened_cards = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        if config["guaranteed"]:
            guaranteed_card = await card_service.get_random_card_by_rarity(config["guaranteed"])
            if guaranteed_card:
                opened_cards.append(guaranteed_card)
                await user_service.add_card_to_user(user, str(guaranteed_card.id))
                await card_service.update_card_stats(guaranteed_card.name, 1, 1)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é legendary –¥–ª—è —É–ª—å—Ç—Ä–∞ –ø–∞–∫–∞
        if config.get("extra_legendary"):
            extra_leg = await card_service.get_random_card_by_rarity("legendary")
            if extra_leg:
                opened_cards.append(extra_leg)
                await user_service.add_card_to_user(user, str(extra_leg.id))
                await card_service.update_card_stats(extra_leg.name, 1, 1)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        remaining_cards = config["cards"] - (1 if config["guaranteed"] else 0) - (1 if config.get("extra_legendary") else 0)
        
        for _ in range(remaining_cards):
            if config["boost"]:
                # –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —à–∞–Ω—Å –Ω–∞ —Ä–µ–¥–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
                rand = random.uniform(0, 100)
                if pack_type == "ultra":
                    # –£–ª—å—Ç—Ä–∞ –ø–∞–∫ - –µ—â–µ –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –Ω–∞ —Ä–µ–¥–∫–∏–µ
                    if rand <= 20:  # 20% Common
                        rarity = "common"
                    elif rand <= 45:  # 25% Rare
                        rarity = "rare"
                    elif rand <= 75:  # 30% Epic
                        rarity = "epic"
                    elif rand <= 98:  # 23% Legendary
                        rarity = "legendary"
                    else:  # 2% Artifact
                        rarity = "artifact"
                else:
                    # –û–±—ã—á–Ω—ã–µ —É—Å–∏–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–∏
                    if rand <= 40:  # 40% –≤–º–µ—Å—Ç–æ 69.89%
                        rarity = "common"
                    elif rand <= 65:  # 25% –≤–º–µ—Å—Ç–æ 20%
                        rarity = "rare"
                    elif rand <= 85:  # 20% –≤–º–µ—Å—Ç–æ 8%
                        rarity = "epic"
                    elif rand <= 98:  # 13% –≤–º–µ—Å—Ç–æ 2%
                        rarity = "legendary"
                    else:  # 2% –≤–º–µ—Å—Ç–æ 0.1%
                        rarity = "artifact"
                
                card = await card_service.get_random_card_by_rarity(rarity)
            else:
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø–∞–∫ —Ç–æ–ª—å–∫–æ Common-Rare
                if pack_type == "basic":
                    rand = random.uniform(0, 100)
                    if rand <= 80:
                        rarity = "common"
                    else:
                        rarity = "rare"
                    card = await card_service.get_random_card_by_rarity(rarity)
                else:
                    card = await card_service.get_random_card()
            
            if card:
                opened_cards.append(card)
                await user_service.add_card_to_user(user, str(card.id))
                await card_service.update_card_stats(card.name, 1, 1)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        result_text = f"üéâ **–ü–∞–∫ '{pack_type.title()}' –æ—Ç–∫—Ä—ã—Ç!**\n\n"
        result_text += f"ü™ô –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {config['cost']} –º–æ–Ω–µ—Ç\n"
        result_text += f"üé¥ –ü–æ–ª—É—á–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(opened_cards)}\n\n"
        
        for i, card in enumerate(opened_cards, 1):
            result_text += f"{i}. {card.get_rarity_emoji()} **{card.name}**\n"
        
        # –ë–æ–Ω—É—Å–Ω—ã–π –æ–ø—ã—Ç –∑–∞ –ø–æ–∫—É–ø–∫—É
        bonus_exp = config["cost"] // 10
        await user_service.add_experience(user, bonus_exp)
        result_text += f"\n‚ú® –ë–æ–Ω—É—Å –æ–ø—ã—Ç–∞: +{bonus_exp} XP"
        result_text += f"\nü™ô –û—Å—Ç–∞–ª–æ—Å—å –º–æ–Ω–µ—Ç: {user.coins}"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å –µ—â–µ", callback_data="shop"),
                InlineKeyboardButton(text="üìö –ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è", callback_data="my_cards")
            ],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await safe_edit_message(callback, result_text, reply_markup=keyboard, success_message=f"üéâ –ü–∞–∫ –æ—Ç–∫—Ä—ã—Ç! –ü–æ–ª—É—á–µ–Ω–æ {len(opened_cards)} –∫–∞—Ä—Ç–æ—á–µ–∫!")
        
    except Exception as e:
        logger.error(f"Error buying pack: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–∞–∫–∞", show_alert=True)


@router.callback_query(F.data == "shop_rarity")
async def shop_rarity_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏"""
    user = await user_service.get_user_by_telegram_id(callback.from_user.id)
    
    rarity_text = (
        "üéØ **–í—ã–±–æ—Ä –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏**\n\n"
        f"üí∞ –í–∞—à –æ–ø—ã—Ç: {user.experience} XP\n\n"
        "‚ö™ **Common** - 25 XP\n"
        "üîµ **Rare** - 75 XP\n"
        "üü£ **Epic** - 200 XP\n"
        "üü° **Legendary** - 500 XP\n"
        "üî¥ **Artifact** - 1000 XP\n\n"
        "üí° –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ä–µ–¥–∫–æ—Å—Ç—å:"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ö™ Common (25)", callback_data="buy_rarity_common"),
            InlineKeyboardButton(text="üîµ Rare (75)", callback_data="buy_rarity_rare")
        ],
        [
            InlineKeyboardButton(text="üü£ Epic (200)", callback_data="buy_rarity_epic"),
            InlineKeyboardButton(text="üü° Legendary (500)", callback_data="buy_rarity_legendary")
        ],
        [InlineKeyboardButton(text="üî¥ Artifact (1000)", callback_data="buy_rarity_artifact")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="shop")]
    ])
    
    await safe_edit_message(callback, rarity_text, reply_markup=keyboard)


@router.callback_query(F.data.startswith("buy_rarity_"))
async def buy_rarity_card(callback: CallbackQuery):
    """–ü–æ–∫—É–ø–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏"""
    try:
        rarity = callback.data.split("_")[-1]
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        costs = {
            "common": 25,
            "rare": 75,
            "epic": 200,
            "legendary": 500,
            "artifact": 1000
        }
        
        cost = costs.get(rarity, 0)
        
        if user.experience < cost:
            await callback.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–∞! –ù—É–∂–Ω–æ: {cost} XP, –µ—Å—Ç—å: {user.experience} XP",
                show_alert=True
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        card = await card_service.get_random_card_by_rarity(rarity)
        
        if not card:
            await callback.answer("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ —ç—Ç–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", show_alert=True)
            return
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –æ–ø—ã—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        user.experience -= cost
        await user_service.update_user(user)
        await user_service.add_card_to_user(user, str(card.id))
        await card_service.update_card_stats(card.name, 1, 1)
        
        result_text = (
            f"üéâ **–ö–∞—Ä—Ç–æ—á–∫–∞ –∫—É–ø–ª–µ–Ω–∞!**\n\n"
            f"{card.get_rarity_emoji()} **{card.name}**\n"
            f"üìñ {card.description}\n\n"
            f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {cost} XP\n"
            f"üí∞ –û—Å—Ç–∞–ª–æ—Å—å: {user.experience} XP"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å –µ—â–µ", callback_data="shop_rarity"),
                InlineKeyboardButton(text="üìö –ö–æ–ª–ª–µ–∫—Ü–∏—è", callback_data="my_cards")
            ]
        ])
        
        await safe_edit_message(callback, result_text, reply_markup=keyboard, success_message=f"üéâ –ü–æ–ª—É—á–µ–Ω–∞ {card.name}!")
        
    except Exception as e:
        logger.error(f"Error buying rarity card: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ", show_alert=True)


@router.callback_query(F.data == "shop_exchange")
async def shop_exchange_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –æ–±–º–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–µ–∫"""
    exchange_text = (
        "üîÑ **–û–±–º–µ–Ω –∫–∞—Ä—Ç–æ—á–µ–∫**\n\n"
        "üí± **–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±–º–µ–Ω—ã:**\n\n"
        "üì§ **–ü—Ä–æ–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏:**\n"
        "‚Ä¢ ‚ö™ Common ‚Üí 5 XP\n"
        "‚Ä¢ üîµ Rare ‚Üí 15 XP\n"
        "‚Ä¢ üü£ Epic ‚Üí 40 XP\n"
        "‚Ä¢ üü° Legendary ‚Üí 100 XP\n\n"
        "üîÑ **–û–±–º–µ–Ω –∫–∞—Ä—Ç–æ—á–µ–∫:**\n"
        "‚Ä¢ 5x Common ‚Üí 1x Rare\n"
        "‚Ä¢ 5x Rare ‚Üí 1x Epic\n"
        "‚Ä¢ 3x Epic ‚Üí 1x Legendary\n\n"
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/sell <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –ø—Ä–æ–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É\n"
        "/exchange <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –æ–±–º–µ–Ω—è—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="shop")]
    ])
    
    await safe_edit_message(callback, exchange_text, reply_markup=keyboard)


@router.message(Command("sell"))
async def sell_card_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–¥–∞–∂–∏ –∫–∞—Ä—Ç–æ—á–∫–∏"""
    try:
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.answer("‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sell <–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–∞—Ä—Ç–æ—á–∫–∏>")
            return
        
        card_name = args[1].strip()
        user = await user_service.get_user_by_telegram_id(message.from_user.id)
        
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫—É
        card = await card_service.get_card_by_name(card_name)
        if not card:
            await message.answer(f"‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ '{card_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user.get_card_count(str(card.id)) == 0:
            await message.answer(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ '{card_name}'")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É –≤ –º–æ–Ω–µ—Ç–∞—Ö
        prices = {
            "common": 15,
            "rare": 45,
            "epic": 120,
            "legendary": 350,
            "artifact": 1000
        }
        
        price = prices.get(card.rarity, 1)
        
        # –ü—Ä–æ–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        success = await user_service.remove_card_from_user(user, str(card.id), 1)
        if success:
            user.coins += price
            await user_service.update_user(user)
            await card_service.update_card_stats(card.name, -1)
            
            await message.answer(
                f"üí∞ **–ö–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ–¥–∞–Ω–∞!**\n\n"
                f"{card.get_rarity_emoji()} {card.name}\n"
                f"ü™ô –ü–æ–ª—É—á–µ–Ω–æ: {price} –º–æ–Ω–µ—Ç\n"
                f"üí∞ –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç: {user.coins}"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –∫–∞—Ä—Ç–æ—á–∫–∏")
        
    except Exception as e:
        logger.error(f"Error selling card: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –∫–∞—Ä—Ç–æ—á–∫–∏")


@router.callback_query(F.data.startswith("sell_cards_menu"))
async def sell_cards_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –ø—Ä–æ–¥–∞–∂–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page = 1
        if ":" in callback.data:
            try:
                page = int(callback.data.split(":")[1])
            except (ValueError, IndexError):
                page = 1
        
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        if not user.cards or len(user.cards) == 0:
            await safe_edit_message(
                callback,
                "üí∞ **–ü—Ä–æ–¥–∞–∂–∞ –∫–∞—Ä—Ç–æ—á–µ–∫**\n\n"
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏\n\n"
                "üé¥ –ü–æ–ª—É—á–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —á–µ—Ä–µ–∑ /dailycard –∏–ª–∏ –º–∞–≥–∞–∑–∏–Ω",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="shop")]
                ])
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        sellable_cards = []
        for user_card in user.cards:
            if user_card.quantity > 0:
                card = await card_service.get_card_by_id(user_card.card_id)
                if card:
                    # –¶–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏
                    prices = {
                        "common": 15, "rare": 45, "epic": 120,
                        "legendary": 350, "artifact": 1000
                    }
                    price = prices.get(card.rarity, 1)
                    sellable_cards.append((card, user_card.quantity, price))
        
        if not sellable_cards:
            await safe_edit_message(
                callback,
                "üí∞ **–ü—Ä–æ–¥–∞–∂–∞ –∫–∞—Ä—Ç–æ—á–µ–∫**\n\n"
                "‚ùå –ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="shop")]
                ])
            )
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ (–¥–æ—Ä–æ–∂–µ —Å–Ω–∞—á–∞–ª–∞)
        sellable_cards.sort(key=lambda x: x[2], reverse=True)
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        page_size = 6
        total_pages = (len(sellable_cards) + page_size - 1) // page_size
        start_idx = (page - 1) * page_size
        end_idx = start_idx + page_size
        page_cards = sellable_cards[start_idx:end_idx]
        
        text = f"üí∞ **–ü—Ä–æ–¥–∞–∂–∞ –∫–∞—Ä—Ç–æ—á–µ–∫** (—Å—Ç—Ä. {page}/{total_pages})\n\n"
        text += f"ü™ô –í–∞—à–∏ –º–æ–Ω–µ—Ç—ã: {user.coins}\n\n"
        
        keyboard_buttons = []
        
        for card, quantity, price in page_cards:
            text += f"{card.get_rarity_emoji()} **{card.name}** x{quantity}\n"
            text += f"   üí∞ –¶–µ–Ω–∞: {price} ü™ô –∑–∞ —à—Ç—É–∫—É\n\n"
            
            button_text = f"üí∞ {card.name[:15]}... ({price}ü™ô)"
            keyboard_buttons.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"sell_card:{card.name}"
            )])
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        nav_buttons = []
        if page > 1:
            nav_buttons.append(InlineKeyboardButton(
                text="‚óÄÔ∏è", 
                callback_data=f"sell_cards_menu:{page-1}"
            ))
        
        nav_buttons.append(InlineKeyboardButton(
            text=f"{page}/{total_pages}", 
            callback_data="ignore"
        ))
        
        if page < total_pages:
            nav_buttons.append(InlineKeyboardButton(
                text="‚ñ∂Ô∏è", 
                callback_data=f"sell_cards_menu:{page+1}"
            ))
        
        if nav_buttons:
            keyboard_buttons.append(nav_buttons)
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="üí∞ –ü—Ä–æ–¥–∞—Ç—å –≤—Å–µ Common", callback_data="sell_all_common"),
            InlineKeyboardButton(text="üí∞ –ü—Ä–æ–¥–∞—Ç—å –¥—É–±–ª–∏", callback_data="sell_duplicates")
        ])
        keyboard_buttons.append([
            InlineKeyboardButton(text="üî• –ü–†–û–î–ê–¢–¨ –í–°–Å", callback_data="sell_all_cards")
        ])
        keyboard_buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="shop")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await safe_edit_message(callback, text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in sell cards menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –ø—Ä–æ–¥–∞–∂–∏", show_alert=True)


@router.callback_query(F.data.startswith("sell_card:"))
async def sell_card_callback(callback: CallbackQuery):
    """–ü—Ä–æ–¥–∞–∂–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    try:
        card_name = callback.data.split(":", 1)[1]
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫—É
        card = await card_service.get_card_by_name(card_name)
        if not card:
            await callback.answer("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ
        quantity = user.get_card_count(str(card.id))
        if quantity == 0:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏", show_alert=True)
            return
        
        # –¶–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏
        prices = {
            "common": 2, "rare": 8, "epic": 25,
            "legendary": 75, "artifact": 200
        }
        price = prices.get(card.rarity, 1)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏
        confirm_text = (
            f"üí∞ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏**\n\n"
            f"–ö–∞—Ä—Ç–æ—á–∫–∞: {card.get_rarity_emoji()} **{card.name}**\n"
            f"–£ –≤–∞—Å: {quantity} —à—Ç.\n"
            f"–¶–µ–Ω–∞: {price} ü™ô –∑–∞ —à—Ç—É–∫—É\n\n"
            f"–ü—Ä–æ–¥–∞—Ç—å 1 –∫–∞—Ä—Ç–æ—á–∫—É?"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–∞—Ç—å 1 —à—Ç", callback_data=f"confirm_sell:{card_name}:1"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="sell_cards_menu")
            ]
        ])
        
        if quantity > 1:
            keyboard.inline_keyboard.insert(0, [
                InlineKeyboardButton(text=f"üí∞ –ü—Ä–æ–¥–∞—Ç—å –≤—Å–µ ({quantity} —à—Ç)", callback_data=f"confirm_sell:{card_name}:{quantity}")
            ])
        
        await safe_edit_message(callback, confirm_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in sell card callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ", show_alert=True)


@router.callback_query(F.data.startswith("confirm_sell:"))
async def confirm_sell_card(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –∫–∞—Ä—Ç–æ—á–∫–∏"""
    try:
        parts = callback.data.split(":")
        card_name = parts[1]
        quantity_to_sell = int(parts[2])
        
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        card = await card_service.get_card_by_name(card_name)
        
        if not user or not card:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ
        available_quantity = user.get_card_count(str(card.id))
        if available_quantity < quantity_to_sell:
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫", show_alert=True)
            return
        
        # –¶–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏
        prices = {
            "common": 15, "rare": 45, "epic": 120,
            "legendary": 350, "artifact": 1000
        }
        price_per_card = prices.get(card.rarity, 1)
        total_price = price_per_card * quantity_to_sell
        
        # –ü—Ä–æ–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
        success = await user_service.remove_card_from_user(user, str(card.id), quantity_to_sell)
        
        if success:
            user.coins += total_price
            await user_service.update_user(user)
            await card_service.update_card_stats(card.name, -quantity_to_sell)
            
            result_text = (
                f"‚úÖ **–ü—Ä–æ–¥–∞–∂–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                f"{card.get_rarity_emoji()} **{card.name}** x{quantity_to_sell}\n"
                f"ü™ô –ü–æ–ª—É—á–µ–Ω–æ: {total_price} –º–æ–Ω–µ—Ç\n"
                f"üí∞ –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç: {user.coins}"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üí∞ –ü—Ä–æ–¥–∞—Ç—å –µ—â–µ", callback_data="sell_cards_menu"),
                    InlineKeyboardButton(text="üõí –í –º–∞–≥–∞–∑–∏–Ω", callback_data="shop")
                ]
            ])
            
            await safe_edit_message(callback, result_text, reply_markup=keyboard, success_message=f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ –∑–∞ {total_price} –º–æ–Ω–µ—Ç!")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ", show_alert=True)
        
    except Exception as e:
        logger.error(f"Error confirming sell: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ", show_alert=True)


# –ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
@router.callback_query(F.data == "sell_all_cards")
async def sell_all_cards_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –í–°–ï–• –∫–∞—Ä—Ç–æ—á–µ–∫"""
    try:
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user or not user.cards:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫", show_alert=True)
            return
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        total_value = 0
        total_cards = 0
        prices = {"common": 15, "rare": 45, "epic": 120, "legendary": 350, "artifact": 1000}
        
        for user_card in user.cards:
            if user_card.quantity > 0:
                card = await card_service.get_card_by_id(user_card.card_id)
                if card:
                    price = prices.get(card.rarity, 1)
                    total_value += price * user_card.quantity
                    total_cards += user_card.quantity
        
        if total_cards == 0:
            await callback.answer("‚ùå –ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏", show_alert=True)
            return
        
        confirm_text = (
            f"üî• **–ü–†–û–î–ê–ñ–ê –í–°–ï–• –ö–ê–†–¢–û–ß–ï–ö**\n\n"
            f"‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!\n\n"
            f"üìä **–ë—É–¥–µ—Ç –ø—Ä–æ–¥–∞–Ω–æ:**\n"
            f"üé¥ –ö–∞—Ä—Ç–æ—á–µ–∫: {total_cards} —à—Ç.\n"
            f"ü™ô –ü–æ–ª—É—á–∏—Ç–µ: {total_value} –º–æ–Ω–µ—Ç\n\n"
            f"üí∞ –ü–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏ —É –≤–∞—Å –±—É–¥–µ—Ç: {user.coins + total_value} –º–æ–Ω–µ—Ç\n\n"
            f"‚ùå **–í–°–Ø –ö–û–õ–õ–ï–ö–¶–ò–Ø –ë–£–î–ï–¢ –£–î–ê–õ–ï–ù–ê!**"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üî• –î–ê, –ü–†–û–î–ê–¢–¨ –í–°–Å", callback_data="confirm_sell_all")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="sell_cards_menu")]
        ])
        
        await safe_edit_message(callback, confirm_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in sell all cards: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "confirm_sell_all")
async def confirm_sell_all_cards(callback: CallbackQuery):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫"""
    try:
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user or not user.cards:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫", show_alert=True)
            return
        
        total_value = 0
        total_cards = 0
        prices = {"common": 15, "rare": 45, "epic": 120, "legendary": 350, "artifact": 1000}
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –ø—Ä–æ–¥–∞–µ–º
        for user_card in user.cards[:]:  # –ö–æ–ø–∏—è —Å–ø–∏—Å–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            if user_card.quantity > 0:
                card = await card_service.get_card_by_id(user_card.card_id)
                if card:
                    price = prices.get(card.rarity, 1)
                    total_value += price * user_card.quantity
                    total_cards += user_card.quantity
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ä—Ç–æ—á–∫–∏
                    await card_service.update_card_stats(card.name, -user_card.quantity)
        
        # –û—á–∏—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã
        user.cards = []
        user.total_cards = 0
        user.coins += total_value
        await user_service.update_user(user)
        
        result_text = (
            f"‚úÖ **–í–°–Ø –ö–û–õ–õ–ï–ö–¶–ò–Ø –ü–†–û–î–ê–ù–ê!**\n\n"
            f"üé¥ –ü—Ä–æ–¥–∞–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {total_cards}\n"
            f"ü™ô –ü–æ–ª—É—á–µ–Ω–æ –º–æ–Ω–µ—Ç: {total_value}\n"
            f"üí∞ –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç: {user.coins}\n\n"
            f"üéÆ –ù–∞—á–Ω–∏—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é –∑–∞–Ω–æ–≤–æ!"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üé¥ –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data="daily_card"),
                InlineKeyboardButton(text="üõí –í –º–∞–≥–∞–∑–∏–Ω", callback_data="shop")
            ],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await safe_edit_message(callback, result_text, reply_markup=keyboard, success_message="üí• –í—Å—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—Ä–æ–¥–∞–Ω–∞!")
        
    except Exception as e:
        logger.error(f"Error confirming sell all: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ", show_alert=True)


@router.callback_query(F.data == "sell_all_common")
async def sell_all_common_cards(callback: CallbackQuery):
    """–ü—Ä–æ–¥–∞–∂–∞ –≤—Å–µ—Ö Common –∫–∞—Ä—Ç–æ—á–µ–∫"""
    try:
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        common_cards = []
        total_value = 0
        total_count = 0
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ Common –∫–∞—Ä—Ç–æ—á–∫–∏
        for user_card in user.cards:
            if user_card.quantity > 0:
                card = await card_service.get_card_by_id(user_card.card_id)
                if card and card.rarity == "common":
                    common_cards.append((card, user_card.quantity))
                    total_value += 15 * user_card.quantity  # 15 –º–æ–Ω–µ—Ç –∑–∞ Common
                    total_count += user_card.quantity
        
        if total_count == 0:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç Common –∫–∞—Ä—Ç–æ—á–µ–∫", show_alert=True)
            return
        
        # –ü—Ä–æ–¥–∞–µ–º –≤—Å–µ Common –∫–∞—Ä—Ç–æ—á–∫–∏
        for card, quantity in common_cards:
            success = await user_service.remove_card_from_user(user, str(card.id), quantity)
            if success:
                await card_service.update_card_stats(card.name, -quantity)
        
        user.coins += total_value
        await user_service.update_user(user)
        
        result_text = (
            f"‚úÖ **Common –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–¥–∞–Ω—ã!**\n\n"
            f"‚ö™ –ü—Ä–æ–¥–∞–Ω–æ: {total_count} Common –∫–∞—Ä—Ç–æ—á–µ–∫\n"
            f"ü™ô –ü–æ–ª—É—á–µ–Ω–æ: {total_value} –º–æ–Ω–µ—Ç\n"
            f"üí∞ –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç: {user.coins}"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üí∞ –ü—Ä–æ–¥–∞—Ç—å –µ—â–µ", callback_data="sell_cards_menu"),
                InlineKeyboardButton(text="üõí –í –º–∞–≥–∞–∑–∏–Ω", callback_data="shop")
            ]
        ])
        
        await safe_edit_message(callback, result_text, reply_markup=keyboard, success_message=f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ {total_count} Common –∫–∞—Ä—Ç–æ—á–µ–∫!")
        
    except Exception as e:
        logger.error(f"Error selling common cards: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ", show_alert=True)


@router.callback_query(F.data == "sell_duplicates")
async def sell_duplicate_cards(callback: CallbackQuery):
    """–ü—Ä–æ–¥–∞–∂–∞ –¥—É–±–ª–µ–π (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ 1 —ç–∫–∑–µ–º–ø–ª—è—Ä—É)"""
    try:
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        duplicates_sold = 0
        total_value = 0
        prices = {"common": 15, "rare": 45, "epic": 120, "legendary": 350, "artifact": 1000}
        
        # –ù–∞—Ö–æ–¥–∏–º –∏ –ø—Ä–æ–¥–∞–µ–º –¥—É–±–ª–∏
        for user_card in user.cards:
            if user_card.quantity > 1:  # –ï—Å—Ç—å –¥—É–±–ª–∏
                card = await card_service.get_card_by_id(user_card.card_id)
                if card:
                    duplicates_count = user_card.quantity - 1  # –û—Å—Ç–∞–≤–ª—è–µ–º 1
                    price = prices.get(card.rarity, 1)
                    total_value += price * duplicates_count
                    duplicates_sold += duplicates_count
                    
                    # –ü—Ä–æ–¥–∞–µ–º –¥—É–±–ª–∏
                    success = await user_service.remove_card_from_user(user, str(card.id), duplicates_count)
                    if success:
                        await card_service.update_card_stats(card.name, -duplicates_count)
        
        if duplicates_sold == 0:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥—É–±–ª–µ–π –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏", show_alert=True)
            return
        
        user.coins += total_value
        await user_service.update_user(user)
        
        result_text = (
            f"‚úÖ **–î—É–±–ª–∏ –ø—Ä–æ–¥–∞–Ω—ã!**\n\n"
            f"üîÑ –ü—Ä–æ–¥–∞–Ω–æ –¥—É–±–ª–µ–π: {duplicates_sold}\n"
            f"ü™ô –ü–æ–ª—É—á–µ–Ω–æ: {total_value} –º–æ–Ω–µ—Ç\n"
            f"üí∞ –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç: {user.coins}\n\n"
            f"üìö –í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –æ—Å—Ç–∞–ª–∏—Å—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìö –ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è", callback_data="my_cards"),
                InlineKeyboardButton(text="üõí –í –º–∞–≥–∞–∑–∏–Ω", callback_data="shop")
            ]
        ])
        
        await safe_edit_message(callback, result_text, reply_markup=keyboard, success_message=f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ {duplicates_sold} –¥—É–±–ª–µ–π!")
        
    except Exception as e:
        logger.error(f"Error selling duplicates: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ", show_alert=True)


@router.callback_query(F.data == "ignore")
async def ignore_callback(callback: CallbackQuery):
    """–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    await callback.answer()
