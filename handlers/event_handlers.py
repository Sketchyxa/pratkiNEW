from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
from loguru import logger

from services.user_service import user_service
from services.event_service import event_service
from config import settings

router = Router()


class EventStates(StatesGroup):
    waiting_for_event_name = State()
    waiting_for_event_description = State()
    waiting_for_event_duration = State()
    waiting_for_event_target = State()
    waiting_for_event_rewards = State()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in settings.admin_ids


@router.callback_query(F.data == "events")
async def events_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –∏–≤–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        try:
            active_events = await event_service.get_active_events()
        except Exception as e:
            logger.error(f"Error getting active events: {e}")
            active_events = []
        
        events_text = "üé™ **–ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≤–µ–Ω—Ç—ã**\n\n"
        
        if not active_events:
            events_text += "üì≠ –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≤–µ–Ω—Ç–æ–≤\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        else:
            for event in active_events:
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                progress = await event_service.get_user_event_progress(user.telegram_id, str(event.id))
                
                status_emoji = "üèÉ" if progress and not progress.is_completed else "‚úÖ" if progress and progress.is_completed else "üÜï"
                
                time_left = event.end_date - datetime.utcnow()
                time_text = f"{time_left.days}–¥ {time_left.seconds // 3600}—á" if time_left.total_seconds() > 0 else "–ó–∞–≤–µ—Ä—à–µ–Ω"
                
                events_text += f"{status_emoji} {event.icon} **{event.name}**\n"
                events_text += f"üìÖ –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {time_text}\n"
                
                if progress:
                    events_text += f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress.current_progress}/{progress.target_progress}\n"
                    if progress.is_completed and not progress.rewards_claimed:
                        events_text += "üéÅ **–ù–∞–≥—Ä–∞–¥–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é!**\n"
                
                events_text += "\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–≤–µ–Ω—Ç–æ–≤
            keyboard_buttons = []
            for event in active_events[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –∏–≤–µ–Ω—Ç–æ–≤
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"{event.icon} {event.name}", 
                        callback_data=f"event_detail_{event.id}"
                    )
                ])
            
            keyboard_buttons.extend([
                [InlineKeyboardButton(text="‚óÄÔ∏è –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(events_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in events menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–≤–µ–Ω—Ç–æ–≤", show_alert=True)


@router.callback_query(F.data.startswith("event_detail_"))
async def event_detail(callback: CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≤–µ–Ω—Ç–µ"""
    try:
        event_id = callback.data.split("_", 2)[2]
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        event = await event_service.get_event_by_id(event_id)
        
        if not user or not event:
            await callback.answer("‚ùå –ò–≤–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        progress = await event_service.get_user_event_progress(user.telegram_id, event_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        await event_service.check_user_event_progress(user)
        progress = await event_service.get_user_event_progress(user.telegram_id, event_id)
        
        time_left = event.end_date - datetime.utcnow()
        time_text = f"{time_left.days}–¥ {time_left.seconds // 3600}—á" if time_left.total_seconds() > 0 else "–ó–∞–≤–µ—Ä—à–µ–Ω"
        
        event_text = (
            f"{event.icon} **{event.name}**\n\n"
            f"üìù {event.description}\n\n"
            f"üìÖ **–í—Ä–µ–º—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è:** {time_text}\n"
            f"üéØ **–¶–µ–ª—å:** {event.target_value} {event.target_type.replace('_', ' ')}\n"
        )
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if progress:
            progress_percent = min(100, (progress.current_progress / progress.target_progress) * 100)
            progress_bar = "‚ñà" * int(progress_percent // 10) + "‚ñë" * (10 - int(progress_percent // 10))
            
            event_text += f"\nüìä **–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:**\n"
            event_text += f"{progress_bar} {progress.current_progress}/{progress.target_progress} ({progress_percent:.1f}%)\n"
            
            if progress.is_completed:
                if progress.rewards_claimed:
                    event_text += "\n‚úÖ **–ò–≤–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞**"
                else:
                    event_text += "\nüéâ **–ò–≤–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ú–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É**"
        else:
            event_text += "\nüÜï **–í—ã –µ—â–µ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º –∏–≤–µ–Ω—Ç–µ**"
        
        # –ù–∞–≥—Ä–∞–¥—ã
        if event.rewards.coins > 0 or event.rewards.experience > 0 or event.rewards.cards:
            event_text += "\n\nüéÅ **–ù–∞–≥—Ä–∞–¥—ã:**\n"
            if event.rewards.coins > 0:
                event_text += f"ü™ô {event.rewards.coins} –º–æ–Ω–µ—Ç\n"
            if event.rewards.experience > 0:
                event_text += f"‚ú® {event.rewards.experience} –æ–ø—ã—Ç–∞\n"
            if event.rewards.cards:
                event_text += f"üé¥ {len(event.rewards.cards)} —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≤–µ–Ω—Ç–∞
        event_text += f"\nüë• **–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {event.total_participants}\n"
        event_text += f"üèÜ **–ó–∞–≤–µ—Ä—à–∏–ª–∏:** {event.total_completed}"
        
        # –ö–Ω–æ–ø–∫–∏
        keyboard_buttons = []
        
        if progress and progress.is_completed and not progress.rewards_claimed:
            keyboard_buttons.append([
                InlineKeyboardButton(text="üéÅ –ó–∞–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É", callback_data=f"claim_reward_{event_id}")
            ])
        
        keyboard_buttons.extend([
            [InlineKeyboardButton(text="üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data=f"event_leaderboard_{event_id}")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ö –∏–≤–µ–Ω—Ç–∞–º", callback_data="events")],
            [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(event_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in event detail: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –∏–≤–µ–Ω—Ç–∞", show_alert=True)


@router.callback_query(F.data.startswith("claim_reward_"))
async def claim_event_reward(callback: CallbackQuery):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∏–≤–µ–Ω—Ç"""
    try:
        event_id = callback.data.split("_", 2)[2]
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        success = await event_service.claim_event_rewards(user, event_id)
        
        if success:
            await callback.answer("üéâ –ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞!", show_alert=True)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –∏–≤–µ–Ω—Ç–∞
            await event_detail(callback)
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É", show_alert=True)
        
    except Exception as e:
        logger.error(f"Error claiming event reward: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã", show_alert=True)


@router.callback_query(F.data.startswith("event_leaderboard_"))
async def event_leaderboard(callback: CallbackQuery):
    """–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∏–≤–µ–Ω—Ç—É"""
    try:
        event_id = callback.data.split("_", 2)[2]
        event = await event_service.get_event_by_id(event_id)
        
        if not event:
            await callback.answer("‚ùå –ò–≤–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        leaderboard = await event_service.get_event_leaderboard(event_id, 10)
        
        leaderboard_text = f"üèÜ **–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ - {event.name}**\n\n"
        
        if not leaderboard:
            leaderboard_text += "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
        else:
            for entry in leaderboard:
                status = "‚úÖ" if entry["is_completed"] else "üèÉ"
                medal = "ü•á" if entry["position"] == 1 else "ü•à" if entry["position"] == 2 else "ü•â" if entry["position"] == 3 else f"{entry['position']}."
                
                leaderboard_text += f"{medal} {status} **{entry['user_name']}**\n"
                leaderboard_text += f"    üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {entry['progress']}\n\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ö –∏–≤–µ–Ω—Ç—É", callback_data=f"event_detail_{event_id}")]
        ])
        
        await callback.message.edit_text(leaderboard_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in event leaderboard: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–ø–∞", show_alert=True)


# –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≤–µ–Ω—Ç–∞–º–∏
@router.callback_query(F.data == "admin_events")
async def admin_events_menu(callback: CallbackQuery):
    """–ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é –∏–≤–µ–Ω—Ç–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    try:
        all_events = await event_service.get_all_events()
        
        events_text = "üé™ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞–º–∏**\n\n"
        events_text += f"üìä –í—Å–µ–≥–æ –∏–≤–µ–Ω—Ç–æ–≤: {len(all_events)}\n"
        
        active_count = len([e for e in all_events if e.is_active and e.start_date <= datetime.utcnow() <= e.end_date])
        events_text += f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≤–µ–Ω—Ç—ã
        if all_events:
            events_text += "üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≤–µ–Ω—Ç—ã:**\n"
            for event in all_events[:5]:
                status = "üü¢" if event.is_active and event.start_date <= datetime.utcnow() <= event.end_date else "üî¥"
                events_text += f"{status} {event.icon} {event.name}\n"
                events_text += f"    üë• {event.total_participants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, üèÜ {event.total_completed} –∑–∞–≤–µ—Ä—à–∏–ª–∏\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∏–≤–µ–Ω—Ç", callback_data="create_event"),
                InlineKeyboardButton(text="üìã –í—Å–µ –∏–≤–µ–Ω—Ç—ã", callback_data="admin_all_events")
            ],
            [
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_events_stats"),
                InlineKeyboardButton(text="üéØ –®–∞–±–ª–æ–Ω—ã", callback_data="event_templates")
            ],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ê–¥–º–∏–Ω–∫–∞", callback_data="admin_back")]
        ])
        
        await callback.message.edit_text(events_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in admin events menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –∏–≤–µ–Ω—Ç–æ–≤", show_alert=True)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–≤–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
async def check_and_notify_events(user, bot=None):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∏–≤–µ–Ω—Ç–∞—Ö –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    try:
        completed_events = await event_service.check_user_event_progress(user)
        
        if completed_events and bot:
            for event in completed_events:
                notification_text = (
                    f"üéâ **–ò–í–ï–ù–¢ –ó–ê–í–ï–†–®–ï–ù!**\n\n"
                    f"{event.icon} **{event.name}**\n"
                    f"üìù {event.description}\n\n"
                    f"üéÅ **–ù–∞–≥—Ä–∞–¥—ã –≥–æ—Ç–æ–≤—ã –∫ –ø–æ–ª—É—á–µ–Ω–∏—é!**\n"
                )
                
                if event.rewards.coins > 0:
                    notification_text += f"ü™ô +{event.rewards.coins} –º–æ–Ω–µ—Ç\n"
                if event.rewards.experience > 0:
                    notification_text += f"‚ú® +{event.rewards.experience} –æ–ø—ã—Ç–∞\n"
                if event.rewards.cards:
                    notification_text += f"üé¥ +{len(event.rewards.cards)} –∫–∞—Ä—Ç–æ—á–µ–∫\n"
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üéÅ –ó–∞–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É", callback_data=f"claim_reward_{event.id}")],
                    [InlineKeyboardButton(text="üé™ –í—Å–µ –∏–≤–µ–Ω—Ç—ã", callback_data="events")]
                ])
                
                await bot.send_message(
                    chat_id=user.telegram_id,
                    text=notification_text,
                    reply_markup=keyboard
                )
        
        return completed_events
        
    except Exception as e:
        logger.error(f"Error checking events: {e}")
        return []


@router.callback_query(F.data == "create_event")
async def create_event_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≤–µ–Ω—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–≤–µ–Ω—Ç–∞**\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_events")]
        ])
    )
    
    await state.set_state(EventStates.waiting_for_event_name)
    await callback.answer()


@router.message(EventStates.waiting_for_event_name)
async def create_event_name(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–≤–µ–Ω—Ç–∞"""
    if not is_admin(message.from_user.id):
        return
    
    if not message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç")
        return
    
    await state.update_data(name=message.text.strip())
    
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: **{message.text.strip()}**\n\n"
        "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_events")]
        ])
    )
    
    await state.set_state(EventStates.waiting_for_event_description)


@router.message(EventStates.waiting_for_event_description)
async def create_event_description(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏–≤–µ–Ω—Ç–∞"""
    if not is_admin(message.from_user.id):
        return
    
    if not message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç")
        return
    
    await state.update_data(description=message.text.strip())
    
    await message.answer(
        f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n"
        "‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≤–µ–Ω—Ç–∞ –≤ –¥–Ω—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_events")]
        ])
    )
    
    await state.set_state(EventStates.waiting_for_event_duration)


@router.message(EventStates.waiting_for_event_duration)
async def create_event_duration(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–≤–µ–Ω—Ç–∞"""
    if not is_admin(message.from_user.id):
        return
    
    if not message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    
    try:
        days = int(message.text.strip())
        if days <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        
        await state.update_data(duration_days=days)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã —Ü–µ–ª–µ–π
        await message.answer(
            f"‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {days} –¥–Ω–µ–π\n\n"
            "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ü–µ–ª–∏ –¥–ª—è –∏–≤–µ–Ω—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üé¥ –°–æ–±—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data="event_target_total_cards"),
                    InlineKeyboardButton(text="üî• –ö–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–¥–∫–æ—Å—Ç–∏", callback_data="event_target_card_rarity")
                ],
                [
                    InlineKeyboardButton(text="üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data="event_target_specific_cards"),
                    InlineKeyboardButton(text="‚≠ê –î–æ—Å—Ç–∏—á—å —É—Ä–æ–≤–Ω—è", callback_data="event_target_level")
                ],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_events")]
            ])
        )
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π")


@router.callback_query(F.data.startswith("event_target_"))
async def create_event_target(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ü–µ–ª–∏ –∏–≤–µ–Ω—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    target_type = callback.data.split("_", 2)[2]
    await state.update_data(target_type=target_type)
    
    target_descriptions = {
        "total_cards": "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å:",
        "card_rarity": "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ä–µ–¥–∫–æ—Å—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10 rare):",
        "specific_cards": "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ä—Ç–æ—á–µ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
        "level": "–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ—Å—Ç–∏—á—å:"
    }
    
    description = target_descriptions.get(target_type, "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–∏:")
    
    await callback.message.edit_text(
        f"üéØ **–¢–∏–ø —Ü–µ–ª–∏:** {target_type.replace('_', ' ').title()}\n\n"
        f"üìù {description}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_events")]
        ])
    )
    
    await state.set_state(EventStates.waiting_for_event_target)
    await callback.answer()


@router.message(EventStates.waiting_for_event_target)
async def create_event_target_value(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–ª–∏"""
    if not is_admin(message.from_user.id):
        return
    
    if not message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        return
    
    data = await state.get_data()
    target_type = data.get("target_type")
    
    try:
        target_value = None
        target_data = {}
        
        if target_type == "total_cards":
            target_value = int(message.text.strip())
        elif target_type == "card_rarity":
            parts = message.text.strip().split()
            if len(parts) != 2:
                raise ValueError("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ä–µ–¥–∫–æ—Å—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
            target_value = int(parts[0])
            target_data["rarity"] = parts[1].lower()
        elif target_type == "specific_cards":
            card_ids = [id.strip() for id in message.text.strip().split(",")]
            target_value = len(card_ids)
            target_data["card_ids"] = card_ids
        elif target_type == "level":
            target_value = int(message.text.strip())
        
        await state.update_data(target_value=target_value, target_data=target_data)
        
        await message.answer(
            f"‚úÖ –¶–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞\n\n"
            "üéÅ –¢–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã.\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –º–æ–Ω–µ—Ç—ã –æ–ø—ã—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 50):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã", callback_data="skip_rewards")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_events")]
            ])
        )
        
        await state.set_state(EventStates.waiting_for_event_rewards)
        
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: {str(e)}")


@router.message(EventStates.waiting_for_event_rewards)
async def create_event_rewards(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ –∑–∞ –∏–≤–µ–Ω—Ç"""
    if not is_admin(message.from_user.id):
        return
    
    if not message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã")
        return
    
    try:
        parts = message.text.strip().split()
        coins = int(parts[0]) if len(parts) > 0 else 0
        experience = int(parts[1]) if len(parts) > 1 else 0
        
        await state.update_data(reward_coins=coins, reward_experience=experience)
        await finalize_event_creation(message, state)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –¥–ª—è –Ω–∞–≥—Ä–∞–¥")


@router.callback_query(F.data == "skip_rewards")
async def skip_event_rewards(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –Ω–∞–≥—Ä–∞–¥"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await state.update_data(reward_coins=0, reward_experience=0)
    await finalize_event_creation(callback.message, state)
    await callback.answer()


async def finalize_event_creation(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≤–µ–Ω—Ç–∞"""
    try:
        data = await state.get_data()
        
        # –°–æ–∑–¥–∞–µ–º –∏–≤–µ–Ω—Ç
        now = datetime.utcnow()
        event_data = {
            "name": data["name"],
            "description": data["description"],
            "start_date": now,
            "end_date": now + timedelta(days=data["duration_days"]),
            "target_type": data["target_type"],
            "target_value": data["target_value"],
            "target_data": data.get("target_data", {}),
            "rewards": {
                "coins": data.get("reward_coins", 0),
                "experience": data.get("reward_experience", 0),
                "cards": []
            },
            "created_by": message.from_user.id
        }
        
        event = await event_service.create_event(event_data)
        
        success_text = (
            f"‚úÖ **–ò–≤–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!**\n\n"
            f"üé™ **{event.name}**\n"
            f"üìù {event.description}\n\n"
            f"üìÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data['duration_days']} –¥–Ω–µ–π\n"
            f"üéØ –¶–µ–ª—å: {event.target_value} {event.target_type.replace('_', ' ')}\n"
        )
        
        if data.get("reward_coins", 0) > 0 or data.get("reward_experience", 0) > 0:
            success_text += f"\nüéÅ –ù–∞–≥—Ä–∞–¥—ã:\n"
            if data.get("reward_coins", 0) > 0:
                success_text += f"ü™ô {data['reward_coins']} –º–æ–Ω–µ—Ç\n"
            if data.get("reward_experience", 0) > 0:
                success_text += f"‚ú® {data['reward_experience']} –æ–ø—ã—Ç–∞\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞–º–∏", callback_data="admin_events")]
        ])
        
        await message.answer(success_text, reply_markup=keyboard)
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error finalizing event creation: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≤–µ–Ω—Ç–∞")
        await state.clear()


@router.callback_query(F.data == "event_templates")
async def event_templates_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —à–∞–±–ª–æ–Ω–æ–≤ –∏–≤–µ–Ω—Ç–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    templates_text = (
        "üéØ **–®–∞–±–ª–æ–Ω—ã –∏–≤–µ–Ω—Ç–æ–≤**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è:"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üé¥ –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä", callback_data="template_collector"),
            InlineKeyboardButton(text="üî• –û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ —Ä–µ–¥–∫–∏–º–∏", callback_data="template_rare_hunter")
        ],
        [
            InlineKeyboardButton(text="‚≠ê –ü–æ–∫–æ—Ä–∏—Ç–µ–ª—å —É—Ä–æ–≤–Ω–µ–π", callback_data="template_level_master"),
            InlineKeyboardButton(text="üèÜ –ß–µ–º–ø–∏–æ–Ω –Ω–µ–¥–µ–ª–∏", callback_data="template_weekly_champion")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_events")]
    ])
    
    await callback.message.edit_text(templates_text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("template_"))
async def create_event_from_template(callback: CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    template_type = callback.data.split("_", 1)[1]
    
    templates = {
        "collector": {
            "name": "–í–µ–ª–∏–∫–∏–π –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä",
            "description": "–°–æ–±–µ—Ä–∏—Ç–µ 50 –∫–∞—Ä—Ç–æ—á–µ–∫ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞",
            "icon": "üé¥",
            "duration_days": 7,
            "target_type": "total_cards",
            "target_value": 50,
            "target_data": {},
            "rewards": {"coins": 200, "experience": 150, "cards": []}
        },
        "rare_hunter": {
            "name": "–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ —Ä–µ–¥–∫–∏–º–∏",
            "description": "–°–æ–±–µ—Ä–∏—Ç–µ 10 —Ä–µ–¥–∫–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–ª–∏ –≤—ã—à–µ",
            "icon": "üî•",
            "duration_days": 10,
            "target_type": "card_rarity",
            "target_value": 10,
            "target_data": {"rarity": "rare"},
            "rewards": {"coins": 300, "experience": 200, "cards": []}
        },
        "level_master": {
            "name": "–ü–æ–∫–æ—Ä–∏—Ç–µ–ª—å —É—Ä–æ–≤–Ω–µ–π",
            "description": "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 15-–≥–æ —É—Ä–æ–≤–Ω—è",
            "icon": "‚≠ê",
            "duration_days": 14,
            "target_type": "level",
            "target_value": 15,
            "target_data": {},
            "rewards": {"coins": 500, "experience": 300, "cards": []}
        },
        "weekly_champion": {
            "name": "–ß–µ–º–ø–∏–æ–Ω –Ω–µ–¥–µ–ª–∏",
            "description": "–°–æ–±–µ—Ä–∏—Ç–µ 30 –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é",
            "icon": "üèÜ",
            "duration_days": 7,
            "target_type": "total_cards",
            "target_value": 30,
            "target_data": {},
            "rewards": {"coins": 150, "experience": 100, "cards": []}
        }
    }
    
    template = templates.get(template_type)
    if not template:
        await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–≤–µ–Ω—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞
        now = datetime.utcnow()
        event_data = {
            **template,
            "start_date": now,
            "end_date": now + timedelta(days=template["duration_days"]),
            "created_by": callback.from_user.id
        }
        
        event = await event_service.create_event(event_data)
        
        success_text = (
            f"‚úÖ **–ò–≤–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –∏–∑ —à–∞–±–ª–æ–Ω–∞!**\n\n"
            f"{event.icon} **{event.name}**\n"
            f"üìù {event.description}\n\n"
            f"üìÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {template['duration_days']} –¥–Ω–µ–π\n"
            f"üéØ –¶–µ–ª—å: {event.target_value} {event.target_type.replace('_', ' ')}\n\n"
            f"üéÅ **–ù–∞–≥—Ä–∞–¥—ã:**\n"
            f"ü™ô {template['rewards']['coins']} –º–æ–Ω–µ—Ç\n"
            f"‚ú® {template['rewards']['experience']} –æ–ø—ã—Ç–∞"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞–º–∏", callback_data="admin_events")]
        ])
        
        await callback.message.edit_text(success_text, reply_markup=keyboard)
        await callback.answer("üéâ –ò–≤–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –∏–∑ —à–∞–±–ª–æ–Ω–∞!")
        
    except Exception as e:
        logger.error(f"Error creating event from template: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≤–µ–Ω—Ç–∞", show_alert=True)
