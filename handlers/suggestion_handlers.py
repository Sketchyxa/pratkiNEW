from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from loguru import logger
from datetime import datetime

from models.user import User
from services.user_service import user_service
from services.card_service import card_service
from config import settings

router = Router()


class SuggestionStates(StatesGroup):
    waiting_for_card_name = State()
    waiting_for_card_description = State()
    waiting_for_card_media = State()


# –ú–æ–¥–µ–ª—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –º–µ–¥–∏–∞
class CardSuggestion:
    def __init__(self, user_id: int, username: str, card_name: str, description: str, media_file_id: str = None, media_type: str = None):
        self.user_id = user_id
        self.username = username
        self.card_name = card_name
        self.description = description
        self.media_file_id = media_file_id  # Telegram file_id –¥–ª—è –≥–∏—Ñ–∫–∏/—Ñ–æ—Ç–æ
        self.media_type = media_type  # 'animation', 'photo', 'video'
        self.created_at = datetime.utcnow()
        self.status = "pending"  # pending, approved, rejected


# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ - MongoDB)
suggestions_storage = []


@router.callback_query(F.data == "suggest_card")
async def suggest_card_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏"""
    try:
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if user.is_suggestion_banned:
            ban_text = (
                "üö´ **–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∫–∞—Ä—Ç–æ—á–µ–∫**\n\n"
                f"**–ü—Ä–∏—á–∏–Ω–∞:** {user.suggestion_ban_reason or '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª'}\n"
                f"**–î–∞—Ç–∞ –±–∞–Ω–∞:** {user.suggestion_ban_date.strftime('%d.%m.%Y %H:%M') if user.suggestion_ban_date else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
                "üìû **–î–ª—è —Ä–∞–∑–±–∞–Ω–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å:** @Siriusatop123"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await callback.message.edit_text(ban_text, reply_markup=keyboard)
            await callback.answer()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3 –≤ –¥–µ–Ω—å)
        user_suggestions_today = [s for s in suggestions_storage 
                                if s.user_id == callback.from_user.id 
                                and s.created_at.date() == datetime.utcnow().date()]
        
        if len(user_suggestions_today) >= 3:
            await callback.answer("‚ùå –õ–∏–º–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω (3/3)", show_alert=True)
            return
        
        await state.set_state(SuggestionStates.waiting_for_card_name)
        
        suggestion_text = (
            "üß© **–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É**\n\n"
            "üí° –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –∏–¥–µ–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –≥–∏—Ñ–∫–æ–π!\n\n"
            "üìù **–®–∞–≥ 1/3:** –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏\n\n"
            "‚ÑπÔ∏è **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**\n"
            "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤\n"
            "‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
            "‚Ä¢ –ë–µ–∑ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π\n\n"
            f"üìä –í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è: {len(user_suggestions_today)}/3"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(suggestion_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error starting suggestion: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.message(StateFilter(SuggestionStates.waiting_for_card_name))
async def process_card_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏"""
    try:
        if not message.text:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏")
            return
        
        card_name = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        if len(card_name) > 50:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        
        if len(card_name) < 3:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
        existing_card = await card_service.get_card_by_name(card_name)
        if existing_card:
            await message.answer(f"‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{card_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–ª–∏ –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        existing_suggestion = any(s.card_name.lower() == card_name.lower() 
                                for s in suggestions_storage 
                                if s.status == "pending")
        if existing_suggestion:
            await message.answer(f"‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ '{card_name}' —É–∂–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º")
            return
        
        await state.update_data(card_name=card_name)
        await state.set_state(SuggestionStates.waiting_for_card_description)
        
        description_text = (
            f"üß© **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏**\n\n"
            f"‚úÖ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {card_name}\n\n"
            f"üìù **–®–∞–≥ 2/3:** –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏\n\n"
            f"‚ÑπÔ∏è **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**\n"
            f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
            f"‚Ä¢ –ë–µ–∑ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
        ])
        
        await message.answer(description_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error processing card name: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è")


@router.message(StateFilter(SuggestionStates.waiting_for_card_description))
async def process_card_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏"""
    try:
        if not message.text:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏")
            return
        
        description = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
        if len(description) > 200:
            await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        
        if len(description) < 10:
            await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        card_name = data.get("card_name")
        
        if not card_name:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–µ–¥–∏–∞
        await state.update_data(card_description=description)
        await state.set_state(SuggestionStates.waiting_for_card_media)
        
        media_text = (
            f"üß© **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏**\n\n"
            f"‚úÖ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {card_name}\n"
            f"‚úÖ **–û–ø–∏—Å–∞–Ω–∏–µ:** {description[:50]}{'...' if len(description) > 50 else ''}\n\n"
            f"üé¨ **–®–∞–≥ 3/3:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–∏—Ñ–∫—É –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n\n"
            f"üìé **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n"
            f"‚Ä¢ GIF –∞–Ω–∏–º–∞—Ü–∏–∏ üé≠\n"
            f"‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ üì∏\n"
            f"‚Ä¢ –í–∏–¥–µ–æ üé•\n\n"
            f"‚ö†Ô∏è **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**\n"
            f"‚Ä¢ –†–∞–∑–º–µ—Ä –¥–æ 50 –ú–ë\n"
            f"‚Ä¢ –ü–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"
            f"‚Ä¢ –ë–µ–∑ –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
        ])
        
        await message.answer(media_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error processing card description: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è")


@router.message(StateFilter(SuggestionStates.waiting_for_card_media))
async def process_card_media(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏"""
    try:
        media_file_id = None
        media_type = None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞
        if message.animation:  # GIF
            media_file_id = message.animation.file_id
            media_type = "animation"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä (50 –ú–ë = 50 * 1024 * 1024 –±–∞–π—Ç)
            if message.animation.file_size and message.animation.file_size > 50 * 1024 * 1024:
                await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 50 –ú–ë)")
                return
                
        elif message.photo:  # –§–æ—Ç–æ
            media_file_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            media_type = "photo"
            
        elif message.video:  # –í–∏–¥–µ–æ
            media_file_id = message.video.file_id
            media_type = "video"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
            if message.video.file_size and message.video.file_size > 50 * 1024 * 1024:
                await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 50 –ú–ë)")
                return
                
        else:
            await message.answer(
                "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
                "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
                "‚Ä¢ GIF –∞–Ω–∏–º–∞—Ü–∏—é üé≠\n"
                "‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é üì∏\n"
                "‚Ä¢ –í–∏–¥–µ–æ üé•"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        card_name = data.get("card_name")
        description = data.get("card_description")
        
        if not card_name or not description:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞
        suggestion = CardSuggestion(
            user_id=message.from_user.id,
            username=message.from_user.username or message.from_user.first_name or f"User{message.from_user.id}",
            card_name=card_name,
            description=description,
            media_file_id=media_file_id,
            media_type=media_type
        )
        
        suggestions_storage.append(suggestion)
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Å –º–µ–¥–∏–∞
        admin_notification = (
            f"üß© **–ù–û–í–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –ö–ê–†–¢–û–ß–ö–ò**\n\n"
            f"üë§ –û—Ç: @{suggestion.username} (ID: {suggestion.user_id})\n"
            f"üé¥ –ù–∞–∑–≤–∞–Ω–∏–µ: {suggestion.card_name}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {suggestion.description}\n"
            f"üé¨ –ú–µ–¥–∏–∞: {media_type}\n"
            f"üìÖ –í—Ä–µ–º—è: {suggestion.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω–∫–µ!"
        )
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –º–µ–¥–∏–∞ + —Ç–µ–∫—Å—Ç
            if media_type == "animation":
                await message.bot.send_animation(
                    chat_id=settings.admin_user_id,
                    animation=media_file_id,
                    caption=admin_notification
                )
            elif media_type == "photo":
                await message.bot.send_photo(
                    chat_id=settings.admin_user_id,
                    photo=media_file_id,
                    caption=admin_notification
                )
            elif media_type == "video":
                await message.bot.send_video(
                    chat_id=settings.admin_user_id,
                    video=media_file_id,
                    caption=admin_notification
                )
        except Exception as e:
            logger.error(f"Failed to send admin notification: {e}")
        
        # –ù–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞
        media_type_names = {
            "animation": "GIF –∞–Ω–∏–º–∞—Ü–∏—è üé≠",
            "photo": "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è üì∏", 
            "video": "–í–∏–¥–µ–æ üé•"
        }
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        success_text = (
            f"‚úÖ **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!**\n\n"
            f"üé¥ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {card_name}\n"
            f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {description[:100]}{'...' if len(description) > 100 else ''}\n"
            f"üé¨ **–ú–µ–¥–∏–∞:** {media_type_names.get(media_type, media_type)}\n\n"
            f"üîî –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
            f"‚è∞ –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è\n\n"
            f"üéÅ **–ü—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:**\n"
            f"‚Ä¢ ü™ô 100 –º–æ–Ω–µ—Ç\n"
            f"‚Ä¢ ‚ú® 50 –æ–ø—ã—Ç–∞\n"
            f"‚Ä¢ üé¥ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—É—é –∫–æ–ø–∏—é –∫–∞—Ä—Ç–æ—á–∫–∏"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üß© –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –µ—â–µ", callback_data="suggest_card"),
                InlineKeyboardButton(text="üìö –ú–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data="my_cards")
            ],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await message.answer(success_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error processing card media: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞")


@router.callback_query(F.data == "admin_suggestions")
async def admin_view_suggestions(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if callback.from_user.id != settings.admin_user_id:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
            return
        
        pending_suggestions = [s for s in suggestions_storage if s.status == "pending"]
        
        if not pending_suggestions:
            suggestions_text = (
                "üß© **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫**\n\n"
                "üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n\n"
                "‚ÑπÔ∏è –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∞—Ç –∫–∞—Ä—Ç–æ—á–∫–∏,\n"
                "–æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_suggestions")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_cards")]
            ])
        else:
            suggestions_text = (
                f"üß© **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫**\n\n"
                f"üìã –ù–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {len(pending_suggestions)}\n\n"
            )
            
            keyboard_buttons = []
            for i, suggestion in enumerate(pending_suggestions[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                button_text = f"{i+1}. {suggestion.card_name[:20]}..."
                keyboard_buttons.append([InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"review_suggestion:{i}"
                )])
            
            if len(pending_suggestions) > 5:
                suggestions_text += f"... –∏ –µ—â–µ {len(pending_suggestions) - 5} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"
            
            keyboard_buttons.extend([
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_suggestions")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_cards")]
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(suggestions_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error viewing suggestions: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("review_suggestion:"))
async def review_suggestion(callback: CallbackQuery):
    """–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    try:
        if callback.from_user.id != settings.admin_user_id:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
            return
        
        suggestion_index = int(callback.data.split(":")[1])
        pending_suggestions = [s for s in suggestions_storage if s.status == "pending"]
        
        if suggestion_index >= len(pending_suggestions):
            await callback.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        suggestion = pending_suggestions[suggestion_index]
        
        media_info = ""
        if suggestion.media_type:
            media_type_names = {
                "animation": "GIF –∞–Ω–∏–º–∞—Ü–∏—è üé≠",
                "photo": "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è üì∏", 
                "video": "–í–∏–¥–µ–æ üé•"
            }
            media_info = f"üé¨ **–ú–µ–¥–∏–∞:** {media_type_names.get(suggestion.media_type, suggestion.media_type)}\n"
        
        review_text = (
            f"üß© **–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è**\n\n"
            f"üë§ **–ê–≤—Ç–æ—Ä:** @{suggestion.username}\n"
            f"üÜî **ID:** {suggestion.user_id}\n"
            f"üìÖ **–î–∞—Ç–∞:** {suggestion.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üé¥ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {suggestion.card_name}\n\n"
            f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**\n{suggestion.description}\n\n"
            f"{media_info}"
            f"**–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º?**"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_suggestion:{suggestion_index}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_suggestion:{suggestion_index}")
            ],
            [
                InlineKeyboardButton(text="üö´ –ó–∞–±–∞–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∞", callback_data=f"ban_suggestion_user:{suggestion_index}")
            ],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="admin_suggestions")]
        ])
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ
        if suggestion.media_file_id and suggestion.media_type:
            try:
                if suggestion.media_type == "animation":
                    await callback.bot.send_animation(
                        chat_id=callback.from_user.id,
                        animation=suggestion.media_file_id,
                        caption=f"üé¨ –ú–µ–¥–∏–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ '{suggestion.card_name}'"
                    )
                elif suggestion.media_type == "photo":
                    await callback.bot.send_photo(
                        chat_id=callback.from_user.id,
                        photo=suggestion.media_file_id,
                        caption=f"üé¨ –ú–µ–¥–∏–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ '{suggestion.card_name}'"
                    )
                elif suggestion.media_type == "video":
                    await callback.bot.send_video(
                        chat_id=callback.from_user.id,
                        video=suggestion.media_file_id,
                        caption=f"üé¨ –ú–µ–¥–∏–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ '{suggestion.card_name}'"
                    )
            except Exception as e:
                logger.error(f"Failed to send media: {e}")
        
        await callback.message.edit_text(review_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error reviewing suggestion: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("approve_suggestion:"))
async def approve_suggestion(callback: CallbackQuery):
    """–ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    try:
        if callback.from_user.id != settings.admin_user_id:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
            return
        
        suggestion_index = int(callback.data.split(":")[1])
        pending_suggestions = [s for s in suggestions_storage if s.status == "pending"]
        
        if suggestion_index >= len(pending_suggestions):
            await callback.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        suggestion = pending_suggestions[suggestion_index]
        suggestion.status = "approved"
        
        # –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_service.get_user_by_telegram_id(suggestion.user_id)
        if user:
            user.coins += 100
            await user_service.add_experience(user, 50)
            await user_service.update_user(user)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            reward_message = (
                f"üéâ **–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!**\n\n"
                f"üé¥ –ö–∞—Ä—Ç–æ—á–∫–∞: **{suggestion.card_name}**\n\n"
                f"üéÅ **–ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞:**\n"
                f"‚Ä¢ ü™ô +100 –º–æ–Ω–µ—Ç\n"
                f"‚Ä¢ ‚ú® +50 –æ–ø—ã—Ç–∞\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏–≥—Ä—ã!"
            )
            
            try:
                await callback.bot.send_message(
                    chat_id=suggestion.user_id,
                    text=reward_message
                )
            except Exception as e:
                logger.error(f"Failed to notify user: {e}")
        
        result_text = (
            f"‚úÖ **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!**\n\n"
            f"üé¥ –ö–∞—Ä—Ç–æ—á–∫–∞: {suggestion.card_name}\n"
            f"üë§ –ê–≤—Ç–æ—Ä: @{suggestion.username}\n"
            f"üéÅ –ù–∞–≥—Ä–∞–¥–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n\n"
            f"üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —ç—Ç—É –∫–∞—Ä—Ç–æ—á–∫—É\n"
            f"—á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data="add_card"),
                InlineKeyboardButton(text="üìã –ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º", callback_data="admin_suggestions")
            ]
        ])
        
        await callback.message.edit_text(result_text, reply_markup=keyboard)
        await callback.answer("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!")
        
    except Exception as e:
        logger.error(f"Error approving suggestion: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("reject_suggestion:"))
async def reject_suggestion(callback: CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    try:
        if callback.from_user.id != settings.admin_user_id:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
            return
        
        suggestion_index = int(callback.data.split(":")[1])
        pending_suggestions = [s for s in suggestions_storage if s.status == "pending"]
        
        if suggestion_index >= len(pending_suggestions):
            await callback.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        suggestion = pending_suggestions[suggestion_index]
        suggestion.status = "rejected"
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        reject_message = (
            f"‚ùå **–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ**\n\n"
            f"üé¥ –ö–∞—Ä—Ç–æ—á–∫–∞: **{suggestion.card_name}**\n\n"
            f"üìù **–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**\n"
            f"‚Ä¢ –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ\n"
            f"‚Ä¢ –°–ª–∏—à–∫–æ–º –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ\n"
            f"‚Ä¢ –ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–º–∞—Ç–∏–∫–µ\n\n"
            f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ!"
        )
        
        try:
            await callback.bot.send_message(
                chat_id=suggestion.user_id,
                text=reject_message
            )
        except Exception as e:
            logger.error(f"Failed to notify user: {e}")
        
        result_text = (
            f"‚ùå **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ**\n\n"
            f"üé¥ –ö–∞—Ä—Ç–æ—á–∫–∞: {suggestion.card_name}\n"
            f"üë§ –ê–≤—Ç–æ—Ä: @{suggestion.username}\n"
            f"üì® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º", callback_data="admin_suggestions")]
        ])
        
        await callback.message.edit_text(result_text, reply_markup=keyboard)
        await callback.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"Error rejecting suggestion: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("ban_suggestion_user:"))
async def ban_suggestion_user(callback: CallbackQuery):
    """–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–ª–æ—Ö–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if callback.from_user.id != settings.admin_user_id:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
            return
        
        suggestion_index = int(callback.data.split(":")[-1])
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        pending_suggestions = [s for s in suggestions_storage if s.status == "pending"]
        if suggestion_index >= len(pending_suggestions):
            await callback.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        suggestion = pending_suggestions[suggestion_index]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from services.user_service import user_service
        user = await user_service.get_user_by_telegram_id(suggestion.user_id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.is_suggestion_banned = True
        user.suggestion_ban_reason = f"–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ '{suggestion.card_name}'"
        user.suggestion_ban_date = datetime.utcnow()
        
        await user_service.update_user(user)
        
        # –û—Ç–∫–ª–æ–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        suggestion.status = "banned"
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –±–∞–Ω–µ
        try:
            ban_notification = (
                f"üö´ **–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∫–∞—Ä—Ç–æ—á–µ–∫**\n\n"
                f"**–ü—Ä–∏—á–∏–Ω–∞:** –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ\n"
                f"**–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:** '{suggestion.card_name}'\n"
                f"**–î–∞—Ç–∞:** {datetime.utcnow().strftime('%d.%m.%Y %H:%M')}\n\n"
                f"‚ùó –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞!\n"
                f"üìû –î–ª—è —Ä–∞–∑–±–∞–Ω–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: @Siriusatop123"
            )
            
            await callback.bot.send_message(
                chat_id=suggestion.user_id,
                text=ban_notification
            )
        except Exception as e:
            logger.error(f"Failed to send ban notification: {e}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await callback.answer(
            f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{suggestion.username} –∑–∞–±–∞–Ω–µ–Ω!\n"
            f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ '{suggestion.card_name}' –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.",
            show_alert=True
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        await admin_view_suggestions(callback)
        
    except Exception as e:
        logger.error(f"Error banning suggestion user: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)