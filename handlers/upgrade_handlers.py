from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from loguru import logger

from models.user import User
from services.user_service import user_service
from services.card_service import card_service
from services.game_service import game_service
from config import settings

router = Router()


@router.callback_query(F.data == "upgrade_menu")
async def upgrade_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫"""
    try:
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
        upgradeable_cards = []
        
        for user_card in user.cards:
            if user_card.quantity >= settings.cards_for_upgrade:
                card = await card_service.get_card_by_id(user_card.card_id)
                if card and card.rarity != "artifact":  # –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–Ω—ã–µ –Ω–µ–ª—å–∑—è —É–ª—É—á—à–∏—Ç—å
                    target_rarity = await card_service.get_upgrade_result(card.rarity)
                    if target_rarity:
                        upgradeable_cards.append((card, user_card.quantity, target_rarity))
        
        if not upgradeable_cards:
            upgrade_text = (
                "üîß **–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫**\n\n"
                f"‚ùå –ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è\n\n"
                f"üí° **–ö–∞–∫ —É–ª—É—á—à–∞—Ç—å:**\n"
                f"‚Ä¢ –°–æ–±–µ—Ä–∏—Ç–µ {settings.cards_for_upgrade} –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏\n"
                f"‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —É–ª—É—á—à–µ–Ω–∏—è\n"
                f"‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å–ª–µ–¥—É—é—â–µ–π —Ä–µ–¥–∫–æ—Å—Ç–∏\n\n"
                f"‚ö™ {settings.cards_for_upgrade}x Common ‚Üí üîµ 1x Rare\n"
                f"üîµ {settings.cards_for_upgrade}x Rare ‚Üí üü£ 1x Epic\n"
                f"üü£ {settings.cards_for_upgrade}x Epic ‚Üí üü° 1x Legendary\n"
                f"üü° {settings.cards_for_upgrade}x Legendary ‚Üí üî¥ 1x Artifact"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üé¥ –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data="daily_card"),
                    InlineKeyboardButton(text="üìö –ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è", callback_data="my_cards")
                ],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
        else:
            upgrade_text = (
                "üîß **–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫**\n\n"
                "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:\n\n"
            )
            
            keyboard_buttons = []
            
            for i, (card, quantity, target_rarity) in enumerate(upgradeable_cards[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 10
                target_emoji = settings.rarities.get(target_rarity, {}).get("emoji", "‚ùì")
                upgrade_text += f"{card.get_rarity_emoji()} **{card.name}** x{quantity}\n"
                upgrade_text += f"   ‚Üí {target_emoji} {target_rarity.title()}\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
                if i < 6:  # –ú–∞–∫—Å–∏–º—É–º 6 –∫–Ω–æ–ø–æ–∫
                    button_text = f"{card.get_rarity_emoji()} {card.name[:15]}..."
                    callback_data = f"upgrade_card:{card.name}"
                    keyboard_buttons.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
            
            if len(upgradeable_cards) > 6:
                upgrade_text += f"... –∏ –µ—â–µ {len(upgradeable_cards) - 6} –∫–∞—Ä—Ç–æ—á–µ–∫\n"
                upgrade_text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /upgrade <–Ω–∞–∑–≤–∞–Ω–∏–µ> –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è\n"
            
            keyboard_buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(upgrade_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in upgrade menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —É–ª—É—á—à–µ–Ω–∏–π", show_alert=True)


@router.callback_query(F.data.startswith("upgrade_card:"))
async def upgrade_card_callback(callback: CallbackQuery):
    """–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —á–µ—Ä–µ–∑ callback"""
    try:
        card_name = callback.data.split(":", 1)[1]
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
        card = await card_service.get_card_by_name(card_name)
        if not card:
            await callback.answer("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        user_card_count = user.get_card_count(str(card.id))
        target_rarity = await card_service.get_upgrade_result(card.rarity)
        
        if user_card_count < settings.cards_for_upgrade:
            await callback.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫! –ù—É–∂–Ω–æ: {settings.cards_for_upgrade}, –µ—Å—Ç—å: {user_card_count}",
                show_alert=True
            )
            return
        
        target_emoji = settings.rarities.get(target_rarity, {}).get("emoji", "‚ùì")
        
        confirm_text = (
            f"üîß **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è**\n\n"
            f"üì§ –û—Ç–¥–∞–µ—Ç–µ: {settings.cards_for_upgrade}x {card.get_rarity_emoji()} {card.name}\n"
            f"üì• –ü–æ–ª—É—á–∏—Ç–µ: 1x {target_emoji} {target_rarity.title()} (—Å–ª—É—á–∞–π–Ω–∞—è)\n\n"
            f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, —É–ª—É—á—à–∏—Ç—å", callback_data=f"confirm_upgrade:{card_name}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="upgrade_menu")
            ]
        ])
        
        await callback.message.edit_text(confirm_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in upgrade callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏", show_alert=True)


@router.callback_query(F.data.startswith("confirm_upgrade:"))
async def confirm_upgrade(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è"""
    try:
        card_name = callback.data.split(":", 1)[1]
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
        success, result_message = await game_service.upgrade_cards(user, card_name)
        
        if success:
            # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ –∞–Ω–∏–º–∞—Ü–∏—é
            result_message = "üéâ " + result_message
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîß –£–ª—É—á—à–∏—Ç—å –µ—â–µ", callback_data="upgrade_menu"),
                    InlineKeyboardButton(text="üìö –ö–æ–ª–ª–µ–∫—Ü–∏—è", callback_data="my_cards")
                ],
                [InlineKeyboardButton(text="üé¥ –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data="daily_card")]
            ])
            
            await callback.answer("üéâ –£–ª—É—á—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!", show_alert=True)
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="upgrade_menu")]
            ])
            
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è", show_alert=True)
        
        await callback.message.edit_text(result_message, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error confirming upgrade: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏", show_alert=True)


@router.message(Command("upgrade"))
async def upgrade_command(message: Message):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /upgrade"""
    try:
        args = message.text.split(maxsplit=1)
        
        if len(args) < 2:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
            user = await user_service.get_user_by_telegram_id(message.from_user.id)
            if not user:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            upgradeable = []
            for user_card in user.cards:
                if user_card.quantity >= settings.cards_for_upgrade:
                    card = await card_service.get_card_by_id(user_card.card_id)
                    if card and card.rarity != "artifact":
                        target_rarity = await card_service.get_upgrade_result(card.rarity)
                        if target_rarity:
                            upgradeable.append(f"‚Ä¢ {card.get_rarity_emoji()} {card.name} x{user_card.quantity}")
            
            if upgradeable:
                response = (
                    f"üîß **–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:**\n\n" + 
                    "\n".join(upgradeable[:10]) +
                    f"\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/upgrade <–Ω–∞–∑–≤–∞–Ω–∏–µ>`\n"
                    f"üì± –ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –º–µ–Ω—é"
                )
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîß –ú–µ–Ω—é —É–ª—É—á—à–µ–Ω–∏–π", callback_data="upgrade_menu")]
                ])
                
                await message.answer(response, reply_markup=keyboard)
            else:
                await message.answer(
                    f"‚ùå –ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è\n\n"
                    f"üí° –°–æ–±–µ—Ä–∏—Ç–µ {settings.cards_for_upgrade} –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ª—é–±–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏ (–∫—Ä–æ–º–µ Artifact)"
                )
            return
        
        card_name = args[1].strip()
        user = await user_service.get_user_by_telegram_id(message.from_user.id)
        
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        success, result_message = await game_service.upgrade_cards(user, card_name)
        await message.answer(result_message)
        
        if success:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîß –£–ª—É—á—à–∏—Ç—å –µ—â–µ", callback_data="upgrade_menu"),
                    InlineKeyboardButton(text="üìö –ö–æ–ª–ª–µ–∫—Ü–∏—è", callback_data="my_cards")
                ]
            ])
            await message.answer("üéØ –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in upgrade command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫")


@router.callback_query(F.data == "mass_upgrade")
async def mass_upgrade_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –º–∞—Å—Å–æ–≤–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è"""
    try:
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–∞—Å—Å–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
        mass_upgrades = {}
        
        for user_card in user.cards:
            if user_card.quantity >= settings.cards_for_upgrade:
                card = await card_service.get_card_by_id(user_card.card_id)
                if card and card.rarity != "artifact":
                    possible_upgrades = user_card.quantity // settings.cards_for_upgrade
                    if possible_upgrades > 1:
                        mass_upgrades[card.name] = {
                            "card": card,
                            "count": possible_upgrades,
                            "total_cards": user_card.quantity
                        }
        
        if not mass_upgrades:
            mass_text = (
                "‚ö° **–ú–∞—Å—Å–æ–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ**\n\n"
                "‚ùå –ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è\n\n"
                "üí° –°–æ–±–µ—Ä–∏—Ç–µ –º–Ω–æ–≥–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è\n"
                "–º–∞—Å—Å–æ–≤–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è (6+ –∫–∞—Ä—Ç–æ—á–µ–∫ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–∞)"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="upgrade_menu")]
            ])
        else:
            mass_text = "‚ö° **–ú–∞—Å—Å–æ–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ**\n\n"
            
            for card_name, info in mass_upgrades.items():
                card = info["card"]
                count = info["count"]
                mass_text += f"{card.get_rarity_emoji()} **{card_name}**\n"
                mass_text += f"   –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å: {count} —Ä–∞–∑\n\n"
            
            mass_text += "‚ö†Ô∏è –ü—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–ª—É—á—à–µ–Ω–∏–∏ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ\n–∫–∞—Ä—Ç–æ—á–∫–∏ –±—É–¥—É—Ç —É–ª—É—á—à–µ–Ω—ã —Å—Ä–∞–∑—É!"
            
            keyboard_buttons = []
            for card_name in list(mass_upgrades.keys())[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 –∫–Ω–æ–ø–æ–∫
                button_text = f"‚ö° {card_name[:20]}..."
                callback_data = f"mass_upgrade_card:{card_name}"
                keyboard_buttons.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
            
            keyboard_buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="upgrade_menu")])
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(mass_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in mass upgrade menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è", show_alert=True)
