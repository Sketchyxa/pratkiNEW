from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from loguru import logger

from services.user_service import user_service
from services.achievement_service import achievement_service

router = Router()


@router.callback_query(F.data == "achievements")
async def achievements_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        stats = await achievement_service.get_user_achievement_stats(user)
        
        achievements_text = (
            f"üèÜ **–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è**\n\n"
            f"üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** {stats['completed']}/{stats['total_possible']} "
            f"({stats['completion_percentage']}%)\n"
            f"‚≠ê **–û—á–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:** {stats['total_points']}\n\n"
            f"üìÇ **–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:**\n"
        )
        
        category_names = {
            "general": "üéØ –û–±—â–∏–µ",
            "collection": "üé¥ –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", 
            "economy": "üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞",
            "social": "üë• –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ",
            "special": "‚≠ê –û—Å–æ–±—ã–µ"
        }
        
        for category, count in stats['categories'].items():
            category_name = category_names.get(category, category.title())
            achievements_text += f"{category_name}: {count}\n"
        
        if not stats['categories']:
            achievements_text += "–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n"
        
        achievements_text += "\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üéØ –û–±—â–∏–µ", callback_data="achievements_general"),
                InlineKeyboardButton(text="üé¥ –ö–æ–ª–ª–µ–∫—Ü–∏–∏", callback_data="achievements_collection")
            ],
            [
                InlineKeyboardButton(text="üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="achievements_economy"),
                InlineKeyboardButton(text="üë• –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ", callback_data="achievements_social")
            ],
            [
                InlineKeyboardButton(text="‚≠ê –û—Å–æ–±—ã–µ", callback_data="achievements_special"),
                InlineKeyboardButton(text="üîç –í—Å–µ", callback_data="achievements_all")
            ],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(achievements_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing achievements menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π", show_alert=True)


@router.callback_query(F.data.startswith("achievements_"))
async def achievements_category(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        category = callback.data.split("_", 1)[1]
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        all_achievements = await achievement_service.get_all_achievements()
        user_achievement_ids = [ua.achievement_id for ua in user.achievements if ua.is_completed]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category != "all":
            filtered_achievements = [a for a in all_achievements if a.category == category]
        else:
            filtered_achievements = all_achievements
        
        if not filtered_achievements:
            await callback.answer("‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π", show_alert=True)
            return
        
        category_names = {
            "general": "üéØ –û–±—â–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
            "collection": "üé¥ –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "economy": "üí∞ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ",
            "social": "üë• –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ",
            "special": "‚≠ê –û—Å–æ–±—ã–µ",
            "all": "üèÜ –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"
        }
        
        achievements_text = f"{category_names.get(category, category.title())}\n\n"
        
        completed_count = 0
        for achievement in filtered_achievements:
            is_completed = str(achievement.id) in user_achievement_ids
            
            if is_completed:
                completed_count += 1
                status = "‚úÖ"
            else:
                # –î–ª—è —Å–∫—Ä—ã—Ç—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
                if achievement.is_hidden:
                    continue
                status = "‚ùå"
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            progress_text = ""
            if not is_completed and not achievement.is_hidden:
                if achievement.condition_type == "cards_count":
                    current = min(user.total_cards, achievement.condition_value)
                    progress_text = f" ({current}/{achievement.condition_value})"
                elif achievement.condition_type == "level":
                    current = min(user.level, achievement.condition_value)
                    progress_text = f" ({current}/{achievement.condition_value})"
                elif achievement.condition_type == "coins_total":
                    current = min(user.coins, achievement.condition_value)
                    progress_text = f" ({current}/{achievement.condition_value})"
            
            achievements_text += (
                f"{status} {achievement.icon} **{achievement.name}**"
                f"{progress_text}\n"
                f"    {achievement.description}\n"
            )
            
            if is_completed:
                achievements_text += f"    üéÅ +{achievement.points} –æ—á–∫–æ–≤"
                if achievement.reward_coins > 0:
                    achievements_text += f", +{achievement.reward_coins} –º–æ–Ω–µ—Ç"
                if achievement.reward_experience > 0:
                    achievements_text += f", +{achievement.reward_experience} –æ–ø—ã—Ç–∞"
                achievements_text += "\n"
            
            achievements_text += "\n"
        
        achievements_text += f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_count}/{len(filtered_achievements)}"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º", callback_data="achievements")]
        ])
        
        await callback.message.edit_text(achievements_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing achievements category: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π", show_alert=True)


async def notify_new_achievements(user, new_achievements: list, bot):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö"""
    if not new_achievements:
        return
    
    try:
        for achievement in new_achievements:
            notification_text = (
                f"üéâ **–ù–û–í–û–ï –î–û–°–¢–ò–ñ–ï–ù–ò–ï!**\n\n"
                f"{achievement.icon} **{achievement.name}**\n"
                f"üìù {achievement.description}\n\n"
                f"üéÅ **–ù–∞–≥—Ä–∞–¥—ã:**\n"
            )
            
            if achievement.reward_coins > 0:
                notification_text += f"ü™ô +{achievement.reward_coins} –º–æ–Ω–µ—Ç\n"
            if achievement.reward_experience > 0:
                notification_text += f"‚ú® +{achievement.reward_experience} –æ–ø—ã—Ç–∞\n"
            
            notification_text += f"‚≠ê +{achievement.points} –æ—á–∫–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üèÜ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements")]
            ])
            
            await bot.send_message(
                chat_id=user.telegram_id,
                text=notification_text,
                reply_markup=keyboard
            )
            
    except Exception as e:
        logger.error(f"Error notifying about new achievements: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ—Å–ª–µ –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
async def check_and_notify_achievements(user, bot=None):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö"""
    try:
        new_achievements = await achievement_service.check_user_achievements(user)
        if new_achievements and bot:
            await notify_new_achievements(user, new_achievements, bot)
        return new_achievements
    except Exception as e:
        logger.error(f"Error checking achievements: {e}")
        return []
