import os
import aiofiles
from datetime import datetime
from typing import List, Optional
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from loguru import logger

from models.user import User
from models.card import Card
from services.user_service import user_service
from services.card_service import card_service
from services.migration_service import migration_service
from config import settings

router = Router()


async def safe_edit_message(callback: CallbackQuery, text: str, reply_markup=None, success_message: str = None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏ 'message is not modified'"""
    try:
        await callback.message.edit_text(text, reply_markup=reply_markup)
        if success_message:
            await callback.answer(success_message)
        else:
            await callback.answer()
    except Exception as e:
        if "message is not modified" in str(e):
            await callback.answer("üìä –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
            logger.error(f"Error editing message: {e}")


class AdminStates(StatesGroup):
    waiting_for_card_name = State()
    waiting_for_card_description = State()
    waiting_for_card_rarity = State()
    waiting_for_card_media = State()
    waiting_for_dump_file = State()
    waiting_for_json_file = State()
    waiting_for_announcement = State()
    waiting_for_user_id = State()
    waiting_for_gift_coins = State()
    waiting_for_gift_exp = State()
    waiting_for_gift_card = State()
    waiting_for_experience = State()
    waiting_for_give_card_user = State()
    waiting_for_give_card_name = State()
    waiting_for_mass_gift_count = State()
    waiting_for_mass_gift_card = State()
    waiting_for_notify_card_name = State()  # –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id == settings.admin_user_id


@router.message(Command("admin"))
async def admin_panel(message: Message):
    """–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìã –ö–∞—Ä—Ç–æ—á–∫–∏", callback_data="admin_cards"),
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
        ],
        [
            InlineKeyboardButton(text="üé™ –ò–≤–µ–Ω—Ç—ã", callback_data="admin_events"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
        ],
        [
            InlineKeyboardButton(text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_analytics"),
            InlineKeyboardButton(text="üí∞ –°–∫–∏–¥–∫–∏", callback_data="admin_discounts")
        ],
        [
            InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="admin_notifications"),
            InlineKeyboardButton(text="‚è∞ –ê–≤—Ç–æ-—Ä–∞–∑–¥–∞—á–∏", callback_data="admin_auto_giveaways")
        ],
        [
            InlineKeyboardButton(text="üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="admin_announce"),
            InlineKeyboardButton(text="üéÅ –†–∞–∑–¥–∞—á–∏", callback_data="admin_gifts")
        ],
        [InlineKeyboardButton(text="üì§ –ò–º–ø–æ—Ä—Ç", callback_data="admin_import")]
    ])
    
    await message.answer("üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@router.callback_query(F.data == "admin_cards")
async def admin_cards_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data="add_card"),
            InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_card_menu")
        ],
        [
            InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫", callback_data="list_cards"),
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data="delete_card_menu")
        ],
        [
            InlineKeyboardButton(text="üé® –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data="admin_suggestions"),
            InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–µ–∫", callback_data="search_cards")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text("üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏**\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@router.callback_query(F.data == "add_card")
async def add_card_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏"""
    if not is_admin(callback.from_user.id):
        return
    
    await state.set_state(AdminStates.waiting_for_card_name)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cards")]
    ])
    
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏:", reply_markup=keyboard)


@router.message(StateFilter(AdminStates.waiting_for_card_name))
async def add_card_name(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏"""
    if not is_admin(message.from_user.id):
        return
    
    card_name = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞
    existing_card = await card_service.get_card_by_name(card_name)
    if existing_card:
        await message.answer("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return
    
    await state.update_data(card_name=card_name)
    await state.set_state(AdminStates.waiting_for_card_description)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cards")]
    ])
    
    await message.answer("üìñ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏:", reply_markup=keyboard)


@router.message(StateFilter(AdminStates.waiting_for_card_description))
async def add_card_description(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏"""
    if not is_admin(message.from_user.id):
        return
    
    if not message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏")
        return
    
    await state.update_data(card_description=message.text.strip())
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ö™ Common", callback_data="rarity_common"),
            InlineKeyboardButton(text="üîµ Rare", callback_data="rarity_rare")
        ],
        [
            InlineKeyboardButton(text="üü£ Epic", callback_data="rarity_epic"),
            InlineKeyboardButton(text="üü° Legendary", callback_data="rarity_legendary")
        ],
        [InlineKeyboardButton(text="üî¥ Artifact", callback_data="rarity_artifact")]
    ])
    
    await state.set_state(AdminStates.waiting_for_card_rarity)
    await message.answer("‚≠ê –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏:", reply_markup=keyboard)


@router.callback_query(F.data.startswith("rarity_"))
async def add_card_rarity(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫–∏"""
    if not is_admin(callback.from_user.id):
        return
    
    rarity = callback.data.split("_")[1]
    await state.update_data(card_rarity=rarity)
    await state.set_state(AdminStates.waiting_for_card_media)
    
    await callback.message.edit_text(
        "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, GIF –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 'skip' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:"
    )


@router.message(StateFilter(AdminStates.waiting_for_card_media))
async def add_card_media(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –∫–∞—Ä—Ç–æ—á–∫–∏"""
    if not is_admin(message.from_user.id):
        return
    
    data = await state.get_data()
    
    image_url = gif_url = video_url = None
    
    if message.text and message.text.lower() == 'skip':
        pass  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª
    elif message.photo:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        file_info = await message.bot.get_file(photo.file_id)
        file_name = f"card_{data['card_name']}_{photo.file_id}.jpg"
        file_path = f"assets/images/{file_name}"
        
        os.makedirs("assets/images", exist_ok=True)
        await message.bot.download_file(file_info.file_path, file_path)
        image_url = file_path
        
    elif message.animation:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º GIF
        animation = message.animation
        file_info = await message.bot.get_file(animation.file_id)
        file_name = f"card_{data['card_name']}_{animation.file_id}.gif"
        file_path = f"assets/images/{file_name}"
        
        os.makedirs("assets/images", exist_ok=True)
        await message.bot.download_file(file_info.file_path, file_path)
        gif_url = file_path
        
    elif message.video:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ
        video = message.video
        file_info = await message.bot.get_file(video.file_id)
        file_name = f"card_{data['card_name']}_{video.file_id}.mp4"
        file_path = f"assets/images/{file_name}"
        
        os.makedirs("assets/images", exist_ok=True)
        await message.bot.download_file(file_info.file_path, file_path)
        video_url = file_path
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    card = await card_service.create_card(
        name=data['card_name'],
        description=data['card_description'],
        rarity=data['card_rarity'],
        image_url=image_url,
        gif_url=gif_url,
        video_url=video_url,
        created_by=message.from_user.id
    )
    
    await state.clear()
    
    if card:
        rarity_emoji = card.get_rarity_emoji()
        await message.answer(
            f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"{rarity_emoji} **{card.name}**\n"
            f"üìñ {card.description}\n"
            f"‚≠ê {card.rarity.title()}"
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏")


@router.callback_query(F.data == "list_cards")
async def list_all_cards(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫"""
    if not is_admin(callback.from_user.id):
        return
    
    cards = await card_service.get_all_cards()
    
    if not cards:
        await callback.message.edit_text("üìã –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
    cards_by_rarity = {}
    for card in cards:
        if card.rarity not in cards_by_rarity:
            cards_by_rarity[card.rarity] = []
        cards_by_rarity[card.rarity].append(card)
    
    text = "üìã **–í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏:**\n\n"
    
    for rarity in ["common", "rare", "epic", "legendary", "artifact"]:
        if rarity in cards_by_rarity:
            rarity_info = settings.rarities.get(rarity, {})
            emoji = rarity_info.get("emoji", "‚ùì")
            name = rarity_info.get("name", rarity.title())
            
            text += f"{emoji} **{name}** ({len(cards_by_rarity[rarity])})\n"
            for card in cards_by_rarity[rarity][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                text += f"   ‚Ä¢ {card.name}\n"
            
            if len(cards_by_rarity[rarity]) > 5:
                text += f"   ... –∏ –µ—â–µ {len(cards_by_rarity[rarity]) - 5}\n"
            text += "\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_cards")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)


@router.callback_query(F.data == "admin_import")
async def admin_import_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    if not is_admin(callback.from_user.id):
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üóÑ MySQL –¥–∞–º–ø", callback_data="import_mysql"),
            InlineKeyboardButton(text="üìÑ JSON –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data="import_json")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(
        "üì§ **–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö**\n\n"
        "üóÑ **MySQL –¥–∞–º–ø** - –∏–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ SQL –¥–∞–º–ø–∞\n"
        "üìÑ **JSON –∫–∞—Ä—Ç–æ—á–∫–∏** - –∏–º–ø–æ—Ä—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ JSON —Ñ–∞–π–ª–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–º–ø–æ—Ä—Ç–∞:",
        reply_markup=keyboard
    )


@router.callback_query(F.data == "import_mysql")
async def import_mysql_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ MySQL –¥–∞–º–ø–∞"""
    if not is_admin(callback.from_user.id):
        return
    
    await state.set_state(AdminStates.waiting_for_dump_file)
    await callback.message.edit_text(
        "üì§ **–ò–º–ø–æ—Ä—Ç MySQL –¥–∞–º–ø–∞**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ .sql —Ñ–∞–π–ª —Å –¥–∞–º–ø–æ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.\n"
        "‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞–º–ø —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∞–±–ª–∏—Ü—ã: users, cards, user_cards"
    )


@router.message(StateFilter(AdminStates.waiting_for_dump_file))
async def import_mysql_file(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ MySQL –¥–∞–º–ø–∞"""
    if not is_admin(message.from_user.id):
        return
    
    if not message.document:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª")
        return
    
    document = message.document
    if not document.file_name.endswith('.sql'):
        await message.answer("‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .sql")
        return
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_info = await message.bot.get_file(document.file_id)
        file_path = f"temp_dump_{document.file_id}.sql"
        
        await message.bot.download_file(file_info.file_path, file_path)
        
        await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        stats = await migration_service.import_mysql_dump(file_path)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(file_path)
        
        if "error" in stats:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {stats['error']}")
        else:
            text = "‚úÖ **–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
            text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users_imported']}\n"
            text += f"üÉè –ö–∞—Ä—Ç–æ—á–µ–∫: {stats['cards_imported']}\n"
            text += f"üé¥ –ö–æ–ª–ª–µ–∫—Ü–∏–π: {stats['user_cards_imported']}\n"
            
            if stats['errors']:
                text += f"\n‚ö†Ô∏è –û—à–∏–±–æ–∫: {len(stats['errors'])}"
            
            await message.answer(text)
        
    except Exception as e:
        logger.error(f"Error importing MySQL dump: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {str(e)}")
    
    await state.clear()


@router.callback_query(F.data == "import_json")
async def import_json_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ JSON –∫–∞—Ä—Ç–æ—á–µ–∫"""
    if not is_admin(callback.from_user.id):
        return
    
    await state.set_state(AdminStates.waiting_for_json_file)
    await callback.message.edit_text(
        "üìÑ **–ò–º–ø–æ—Ä—Ç JSON –∫–∞—Ä—Ç–æ—á–µ–∫**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ .json —Ñ–∞–π–ª —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏.\n"
        "–§–æ—Ä–º–∞—Ç: [{'name': '...', 'description': '...', 'rarity': '...', ...}, ...]"
    )


@router.message(StateFilter(AdminStates.waiting_for_json_file))
async def import_json_file(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ JSON —Ñ–∞–π–ª–∞"""
    if not is_admin(message.from_user.id):
        return
    
    if not message.document:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª")
        return
    
    document = message.document
    if not document.file_name.endswith('.json'):
        await message.answer("‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .json")
        return
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_info = await message.bot.get_file(document.file_id)
        file_path = f"temp_cards_{document.file_id}.json"
        
        await message.bot.download_file(file_info.file_path, file_path)
        
        await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é –∏–º–ø–æ—Ä—Ç –∫–∞—Ä—Ç–æ—á–µ–∫...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
        stats = await migration_service.import_json_cards(file_path)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(file_path)
        
        if "error" in stats:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {stats['error']}")
        else:
            text = "‚úÖ **–ò–º–ø–æ—Ä—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
            text += f"‚ûï –ù–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫: {stats['cards_imported']}\n"
            text += f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {stats['cards_updated']}\n"
            
            if stats['errors']:
                text += f"\n‚ö†Ô∏è –û—à–∏–±–æ–∫: {len(stats['errors'])}"
            
            await message.answer(text)
        
    except Exception as e:
        logger.error(f"Error importing JSON cards: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {str(e)}")
    
    await state.clear()


@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    if not is_admin(callback.from_user.id):
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        user_stats = await user_service.get_user_stats()
        card_stats = await card_service.get_card_stats()
        
        text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n\n"
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        text += "üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
        text += f"   –í—Å–µ–≥–æ: {user_stats.get('total_users', 0)}\n"
        text += f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {user_stats.get('active_users_week', 0)}\n"
        text += f"   –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å: {user_stats.get('average_level', 0)}\n\n"
        
        # –ö–∞—Ä—Ç–æ—á–∫–∏
        text += "üÉè **–ö–∞—Ä—Ç–æ—á–∫–∏:**\n"
        text += f"   –í—Å–µ–≥–æ: {card_stats.get('total_cards', 0)}\n"
        if card_stats.get('most_popular'):
            text += f"   –ü–æ–ø—É–ª—è—Ä–Ω–∞—è: {card_stats['most_popular']}\n"
        if card_stats.get('rarest'):
            text += f"   –†–µ–¥–∫–∞—è: {card_stats['rarest']}\n\n"
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
        if card_stats.get('rarity_distribution'):
            text += "‚≠ê **–ü–æ —Ä–µ–¥–∫–æ—Å—Ç–∏:**\n"
            for rarity, count in card_stats['rarity_distribution'].items():
                emoji = settings.rarities.get(rarity, {}).get('emoji', '‚ùì')
                text += f"   {emoji} {rarity.title()}: {count}\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error getting admin stats: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@router.callback_query(F.data == "admin_back")
async def admin_back(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìã –ö–∞—Ä—Ç–æ—á–∫–∏", callback_data="admin_cards"),
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
        ],
        [
            InlineKeyboardButton(text="üé™ –ò–≤–µ–Ω—Ç—ã", callback_data="admin_events"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
        ],
        [
            InlineKeyboardButton(text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_analytics"),
            InlineKeyboardButton(text="üí∞ –°–∫–∏–¥–∫–∏", callback_data="admin_discounts")
        ],
        [
            InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="admin_notifications"),
            InlineKeyboardButton(text="‚è∞ –ê–≤—Ç–æ-—Ä–∞–∑–¥–∞—á–∏", callback_data="admin_auto_giveaways")
        ],
        [
            InlineKeyboardButton(text="üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="admin_announce"),
            InlineKeyboardButton(text="üéÅ –†–∞–∑–¥–∞—á–∏", callback_data="admin_gifts")
        ],
        [InlineKeyboardButton(text="üì§ –ò–º–ø–æ—Ä—Ç", callback_data="admin_import")]
    ])
    
    await callback.message.edit_text("üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "admin_announce")
async def admin_announce_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await state.set_state(AdminStates.waiting_for_announcement)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(
        "üì¢ **–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è**\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=keyboard
    )
    await callback.answer()


@router.message(StateFilter(AdminStates.waiting_for_announcement))
async def admin_announce_send(message: Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    if not is_admin(message.from_user.id):
        return
    
    announcement_text = message.text.strip()
    
    if not announcement_text:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    
    await state.clear()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await user_service.get_all_users()
        sent_count = 0
        failed_count = 0
        
        await message.answer(f"üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
        
        for user in users:
            try:
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
                safe_announcement = announcement_text.replace('*', '\\*').replace('_', '\\_').replace('[', '\\[').replace(']', '\\]').replace('(', '\\(').replace(')', '\\)').replace('~', '\\~').replace('`', '\\`').replace('>', '\\>').replace('#', '\\#').replace('+', '\\+').replace('-', '\\-').replace('=', '\\=').replace('|', '\\|').replace('{', '\\{').replace('}', '\\}').replace('.', '\\.').replace('!', '\\!')
                full_text = f"üì¢ **–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:**\n\n{safe_announcement}"
                await message.bot.send_message(user.telegram_id, full_text, parse_mode="Markdown")
                sent_count += 1
            except Exception as e:
                failed_count += 1
                logger.error(f"Failed to send announcement to {user.telegram_id}: {e}")
        
        result_text = (
            f"‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
            f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
            f"‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed_count}\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}"
        )
        
        await message.answer(result_text)
        
    except Exception as e:
        logger.error(f"Error sending announcement: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")


@router.callback_query(F.data == "admin_gifts")
async def admin_gifts_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —Ä–∞–∑–¥–∞—á"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    gifts_text = (
        "üéÅ **–†–∞–∑–¥–∞—á–∏ –∏–≥—Ä–æ–∫–∞–º**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–∑–¥–∞—á–∏:"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="ü™ô –†–∞–∑–¥–∞—á–∞ –º–æ–Ω–µ—Ç", callback_data="gift_coins"),
            InlineKeyboardButton(text="üé¥ –†–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç–æ—á–µ–∫", callback_data="gift_cards")
        ],
        [
            InlineKeyboardButton(text="‚ú® –†–∞–∑–¥–∞—á–∞ –æ–ø—ã—Ç–∞", callback_data="gift_exp"),
            InlineKeyboardButton(text="üî• –†–∞–∑–¥–∞—á–∞ + –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="enhanced_giveaway")
        ],
        [
            InlineKeyboardButton(text="üéÅ –û—Å–æ–±–∞—è —Ä–∞–∑–¥–∞—á–∞", callback_data="gift_special")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(gifts_text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("gift_"))
async def admin_gift_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑–¥–∞—á"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    gift_type = callback.data.split("_")[1]
    
    if gift_type == "coins":
        await state.set_state(AdminStates.waiting_for_gift_coins)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_gifts")]
        ])
        
        await callback.message.edit_text(
            "ü™ô **–†–∞–∑–¥–∞—á–∞ –º–æ–Ω–µ—Ç –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è —Ä–∞–∑–¥–∞—á–∏:",
            reply_markup=keyboard
        )
        
    elif gift_type == "exp":
        await state.set_state(AdminStates.waiting_for_gift_exp)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_gifts")]
        ])
        
        await callback.message.edit_text(
            "‚ú® **–†–∞–∑–¥–∞—á–∞ –æ–ø—ã—Ç–∞ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –¥–ª—è —Ä–∞–∑–¥–∞—á–∏:",
            reply_markup=keyboard
        )
        
    elif gift_type == "cards":
        await state.set_state(AdminStates.waiting_for_gift_card)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_gifts")]
        ])
        
        await callback.message.edit_text(
            "üé¥ **–†–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Ä–∞–∑–¥–∞—á–∏:",
            reply_markup=keyboard
        )
        
    elif gift_type == "special":
        special_text = (
            "üéÅ **–û—Å–æ–±—ã–µ —Ä–∞–∑–¥–∞—á–∏**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Å–æ–±–æ–π —Ä–∞–∑–¥–∞—á–∏:"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üé∞ –°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞", callback_data="special_random_card"),
                InlineKeyboardButton(text="üí∞ –ú–æ–Ω–µ—Ç—ã + –û–ø—ã—Ç", callback_data="special_coins_exp")
            ],
            [
                InlineKeyboardButton(text="üî• –†–µ–¥–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞", callback_data="special_rare_card"),
                InlineKeyboardButton(text="üéÅ Mega –±–æ–Ω—É—Å", callback_data="special_mega")
            ],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_gifts")]
        ])
        
        await callback.message.edit_text(special_text, reply_markup=keyboard)
    
    await callback.answer()


@router.callback_query(F.data == "admin_users")
async def admin_users_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    try:
        stats = await user_service.get_user_stats()
        
        users_text = (
            "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**\n\n"
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats.get('active_users_week', 0)}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å: {stats.get('average_level', 0)}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_list"),
                InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="users_search")
            ],
            [
                InlineKeyboardButton(text="‚ö° –¢–æ–ø –∏–≥—Ä–æ–∫–∏", callback_data="users_top"),
                InlineKeyboardButton(text="üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="users_stats")
            ],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        
        await callback.message.edit_text(users_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in admin users menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)


# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
@router.callback_query(F.data.in_(["users_list", "users_search", "users_top", "users_stats"]))
async def admin_users_placeholders(callback: CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    placeholders = {
        "users_list": "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        "users_search": "üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        "users_top": "‚ö° –¢–æ–ø –∏–≥—Ä–æ–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ /leaderboard",
        "users_stats": "üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
    }
    
    message_text = placeholders.get(callback.data, "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    await callback.answer(message_text, show_alert=True)


@router.message(StateFilter(AdminStates.waiting_for_gift_coins))
async def process_gift_coins(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–∞—á–∏ –º–æ–Ω–µ—Ç"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        coins_amount = int(message.text.strip())
        if coins_amount <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return
        
        await state.clear()
        
        users = await user_service.get_all_users()
        success_count = 0
        
        await message.answer(f"ü™ô –ù–∞—á–∏–Ω–∞—é —Ä–∞–∑–¥–∞—á—É {coins_amount} –º–æ–Ω–µ—Ç {len(users)} –∏–≥—Ä–æ–∫–∞–º...")
        
        for user in users:
            try:
                user.coins += coins_amount
                await user_service.update_user(user)
                success_count += 1
            except Exception as e:
                logger.error(f"Error giving coins to user {user.telegram_id}: {e}")
        
        result_text = (
            f"‚úÖ **–†–∞–∑–¥–∞—á–∞ –º–æ–Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
            f"ü™ô –†–æ–∑–¥–∞–Ω–æ: {coins_amount} –º–æ–Ω–µ—Ç\n"
            f"üë• –ü–æ–ª—É—á–∏–ª–∏: {success_count} –∏–≥—Ä–æ–∫–æ–≤\n"
            f"üìä –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(users)}"
        )
        
        await message.answer(result_text)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        logger.error(f"Error processing gift coins: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–¥–∞—á–µ –º–æ–Ω–µ—Ç")


@router.message(StateFilter(AdminStates.waiting_for_gift_exp))
async def process_gift_exp(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–∞—á–∏ –æ–ø—ã—Ç–∞"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        exp_amount = int(message.text.strip())
        if exp_amount <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return
        
        await state.clear()
        
        users = await user_service.get_all_users()
        success_count = 0
        
        await message.answer(f"‚ú® –ù–∞—á–∏–Ω–∞—é —Ä–∞–∑–¥–∞—á—É {exp_amount} –æ–ø—ã—Ç–∞ {len(users)} –∏–≥—Ä–æ–∫–∞–º...")
        
        for user in users:
            try:
                old_level = user.level
                user.experience += exp_amount
                user.level = user.calculate_level()
                await user_service.update_user(user)
                success_count += 1
            except Exception as e:
                logger.error(f"Error giving exp to user {user.telegram_id}: {e}")
        
        result_text = (
            f"‚úÖ **–†–∞–∑–¥–∞—á–∞ –æ–ø—ã—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
            f"‚ú® –†–æ–∑–¥–∞–Ω–æ: {exp_amount} –æ–ø—ã—Ç–∞\n"
            f"üë• –ü–æ–ª—É—á–∏–ª–∏: {success_count} –∏–≥—Ä–æ–∫–æ–≤\n"
            f"üìä –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(users)}"
        )
        
        await message.answer(result_text)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        logger.error(f"Error processing gift exp: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–¥–∞—á–µ –æ–ø—ã—Ç–∞")


@router.message(StateFilter(AdminStates.waiting_for_gift_card))
async def process_gift_card(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–∞—á–∏ –∫–∞—Ä—Ç–æ—á–µ–∫"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        card_name = message.text.strip()
        if not card_name:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        from services.card_service import card_service
        card = await card_service.get_card_by_name(card_name)
        if not card:
            await message.answer(f"‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ '{card_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        await state.clear()
        
        users = await user_service.get_all_users()
        success_count = 0
        
        await message.answer(f"üé¥ –ù–∞—á–∏–Ω–∞—é —Ä–∞–∑–¥–∞—á—É –∫–∞—Ä—Ç–æ—á–∫–∏ '{card_name}' {len(users)} –∏–≥—Ä–æ–∫–∞–º...")
        
        for user in users:
            try:
                await user_service.add_card_to_user(user, str(card.id))
                success_count += 1
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    username = user.username if user.username else "Anonymous"
                    notification_text = (
                        f"üéÅ **–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!**\n\n"
                        f"üé¥ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É:\n"
                        f"{card.get_rarity_emoji()} **{card.name}**\n"
                        f"üìù {card.description}\n\n"
                        f"üíù –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ!"
                    )
                    await message.bot.send_message(user.telegram_id, notification_text, parse_mode="Markdown")
                except Exception as notify_error:
                    logger.error(f"Failed to notify user {user.telegram_id} about gift: {notify_error}")
                    
            except Exception as e:
                logger.error(f"Error giving card to user {user.telegram_id}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ä—Ç–æ—á–∫–∏
        await card_service.update_card_stats(card_name, success_count, success_count)
        
        result_text = (
            f"‚úÖ **–†–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
            f"üé¥ –†–æ–∑–¥–∞–Ω–æ: '{card_name}'\n"
            f"üë• –ü–æ–ª—É—á–∏–ª–∏: {success_count} –∏–≥—Ä–æ–∫–æ–≤\n"
            f"üìä –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(users)}"
        )
        
        await message.answer(result_text)
        
    except Exception as e:
        logger.error(f"Error processing gift card: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–¥–∞—á–µ –∫–∞—Ä—Ç–æ—á–∫–∏")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å–æ–±—ã—Ö —Ä–∞–∑–¥–∞—á
@router.callback_query(F.data.startswith("special_"))
async def handle_special_giveaways(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–æ–±—ã—Ö —Ä–∞–∑–¥–∞—á"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    special_type = callback.data.split("_", 1)[1]
    
    try:
        users = await user_service.get_all_users()
        if not users:
            await callback.answer("‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)
            return
        
        await callback.message.edit_text(f"üéÅ –ù–∞—á–∏–Ω–∞—é –æ—Å–æ–±—É—é —Ä–∞–∑–¥–∞—á—É –¥–ª—è {len(users)} –∏–≥—Ä–æ–∫–æ–≤...")
        
        from services.card_service import card_service
        success_count = 0
        
        if special_type == "random_card":
            # –°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
            for user in users:
                try:
                    card = await card_service.get_random_card()
                    if card:
                        await user_service.add_card_to_user(user, str(card.id))
                        success_count += 1
                except Exception as e:
                    logger.error(f"Error giving random card to user {user.telegram_id}: {e}")
            
            result_text = (
                f"‚úÖ **–†–∞–∑–¥–∞—á–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                f"üé∞ –†–æ–∑–¥–∞–Ω–æ: —Å–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏\n"
                f"üë• –ü–æ–ª—É—á–∏–ª–∏: {success_count} –∏–≥—Ä–æ–∫–æ–≤\n"
                f"üìä –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(users)}"
            )
            
        elif special_type == "coins_exp":
            # –ú–æ–Ω–µ—Ç—ã + –æ–ø—ã—Ç
            coins_amount = 100
            exp_amount = 50
            
            for user in users:
                try:
                    user.coins += coins_amount
                    user.experience += exp_amount
                    user.level = user.calculate_level()
                    await user_service.update_user(user)
                    success_count += 1
                except Exception as e:
                    logger.error(f"Error giving coins+exp to user {user.telegram_id}: {e}")
            
            result_text = (
                f"‚úÖ **–ö–æ–º–±–æ —Ä–∞–∑–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                f"ü™ô –†–æ–∑–¥–∞–Ω–æ: {coins_amount} –º–æ–Ω–µ—Ç\n"
                f"‚ú® –†–æ–∑–¥–∞–Ω–æ: {exp_amount} –æ–ø—ã—Ç–∞\n"
                f"üë• –ü–æ–ª—É—á–∏–ª–∏: {success_count} –∏–≥—Ä–æ–∫–æ–≤\n"
                f"üìä –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(users)}"
            )
            
        elif special_type == "rare_card":
            # –†–µ–¥–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ (Epic –∏–ª–∏ –≤—ã—à–µ)
            for user in users:
                try:
                    import random
                    rand = random.uniform(0, 100)
                    if rand <= 50:  # 50% Epic
                        rarity = "epic"
                    elif rand <= 85:  # 35% Legendary
                        rarity = "legendary"
                    else:  # 15% Artifact
                        rarity = "artifact"
                    
                    card = await card_service.get_random_card_by_rarity(rarity)
                    if card:
                        await user_service.add_card_to_user(user, str(card.id))
                        success_count += 1
                except Exception as e:
                    logger.error(f"Error giving rare card to user {user.telegram_id}: {e}")
            
            result_text = (
                f"‚úÖ **–†–∞–∑–¥–∞—á–∞ —Ä–µ–¥–∫–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                f"üî• –†–æ–∑–¥–∞–Ω–æ: Epic/Legendary/Artifact –∫–∞—Ä—Ç–æ—á–∫–∏\n"
                f"üë• –ü–æ–ª—É—á–∏–ª–∏: {success_count} –∏–≥—Ä–æ–∫–æ–≤\n"
                f"üìä –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(users)}"
            )
            
        elif special_type == "mega":
            # –ú–µ–≥–∞ –±–æ–Ω—É—Å: 3 —Å–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ + 200 –º–æ–Ω–µ—Ç + 100 –æ–ø—ã—Ç–∞
            coins_amount = 200
            exp_amount = 100
            cards_count = 3
            
            for user in users:
                try:
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã –∏ –æ–ø—ã—Ç
                    user.coins += coins_amount
                    user.experience += exp_amount
                    user.level = user.calculate_level()
                    await user_service.update_user(user)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º 3 —Å–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
                    for _ in range(cards_count):
                        card = await card_service.get_random_card()
                        if card:
                            await user_service.add_card_to_user(user, str(card.id))
                    
                    success_count += 1
                except Exception as e:
                    logger.error(f"Error giving mega bonus to user {user.telegram_id}: {e}")
            
            result_text = (
                f"‚úÖ **–ú–µ–≥–∞ —Ä–∞–∑–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                f"üé¥ –†–æ–∑–¥–∞–Ω–æ: {cards_count} —Å–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏\n"
                f"ü™ô –†–æ–∑–¥–∞–Ω–æ: {coins_amount} –º–æ–Ω–µ—Ç\n"
                f"‚ú® –†–æ–∑–¥–∞–Ω–æ: {exp_amount} –æ–ø—ã—Ç–∞\n"
                f"üë• –ü–æ–ª—É—á–∏–ª–∏: {success_count} –∏–≥—Ä–æ–∫–æ–≤\n"
                f"üìä –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(users)}"
            )
        
        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Å–æ–±–æ–π —Ä–∞–∑–¥–∞—á–∏", show_alert=True)
            return
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéÅ –ö —Ä–∞–∑–¥–∞—á–∞–º", callback_data="admin_gifts")]
        ])
        
        await callback.message.edit_text(result_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error processing special giveaway: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Å–æ–±–æ–π —Ä–∞–∑–¥–∞—á–∏", show_alert=True)


@router.callback_query(F.data == "admin_analytics")
async def admin_analytics_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    analytics_text = (
        "üìà **–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="analytics_users"),
            InlineKeyboardButton(text="üé¥ –ö–∞—Ä—Ç–æ—á–∫–∏", callback_data="analytics_cards")
        ],
        [
            InlineKeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="analytics_activity"),
            InlineKeyboardButton(text="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="analytics_achievements")
        ],
        [
            InlineKeyboardButton(text="üìà –†–æ—Å—Ç", callback_data="analytics_growth"),
            InlineKeyboardButton(text="üíæ –°–Ω–∏–º–æ–∫", callback_data="analytics_snapshot")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(analytics_text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("analytics_"))
async def admin_analytics_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    analytics_type = callback.data.split("_", 1)[1]
    
    try:
        from services.analytics_service import analytics_service
        
        await callback.message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É...")
        
        if analytics_type == "users":
            stats = await analytics_service.get_general_stats()
            users_stats = stats["users"]
            economy_stats = stats["economy"]
            
            text = (
                f"üë• **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
                f"üìä **–û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ:**\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_stats['total']}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {users_stats['active_7d']} ({users_stats['active_percentage']}%)\n"
                f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {users_stats['new_7d']}\n\n"
                f"üí∞ **–≠–∫–æ–Ω–æ–º–∏–∫–∞:**\n"
                f"‚Ä¢ –û–±—â–∏–µ –º–æ–Ω–µ—Ç—ã: {economy_stats['total_coins']:,}\n"
                f"‚Ä¢ –û–±—â–∏–π –æ–ø—ã—Ç: {economy_stats['total_experience']:,}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –º–æ–Ω–µ—Ç: {economy_stats['avg_coins']}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –æ–ø—ã—Ç: {economy_stats['avg_experience']}\n\n"
                f"üìà **–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º:**\n"
            )
            
            for level in sorted(users_stats['level_distribution'].keys(), reverse=True)[:10]:
                count = users_stats['level_distribution'][level]
                text += f"   –£—Ä–æ–≤–µ–Ω—å {level}: {count} –∏–≥—Ä–æ–∫–æ–≤\n"
            
            # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            text += "\nüèÜ **–¢–æ–ø –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º:**\n"
            for i, user in enumerate(stats["top_users"]["by_cards"][:5], 1):
                text += f"   {i}. {user['name']}: {user['value']} –∫–∞—Ä—Ç–æ—á–µ–∫\n"
        
        elif analytics_type == "cards":
            card_stats = await analytics_service.get_card_stats()
            
            text = (
                f"üé¥ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫**\n\n"
                f"üìä **–û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ:**\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –±–∞–∑–µ: {card_stats['total_cards']}\n\n"
                f"üéØ **–ü–æ —Ä–µ–¥–∫–æ—Å—Ç–∏:**\n"
            )
            
            for rarity, data in card_stats['by_rarity'].items():
                emoji = {
                    "common": "‚ö™", "rare": "üîµ", "epic": "üü£", 
                    "legendary": "üü°", "artifact": "üî¥"
                }.get(rarity, "‚ùì")
                
                text += (
                    f"{emoji} **{rarity.title()}:**\n"
                    f"   ‚Ä¢ –ö–∞—Ä—Ç–æ—á–µ–∫: {data['count']}\n"
                    f"   ‚Ä¢ –≠–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: {data['total_owned']}\n"
                    f"   ‚Ä¢ –í–ª–∞–¥–µ–ª—å—Ü–µ–≤: {data['total_owners']}\n\n"
                )
            
            text += "üî• **–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ:**\n"
            for i, card in enumerate(card_stats['most_popular'][:5], 1):
                emoji = {
                    "common": "‚ö™", "rare": "üîµ", "epic": "üü£", 
                    "legendary": "üü°", "artifact": "üî¥"
                }.get(card['rarity'], "‚ùì")
                text += f"   {i}. {emoji} {card['name']}: {card['owners']} –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤\n"
        
        elif analytics_type == "activity":
            activity_stats = await analytics_service.get_activity_stats(7)
            
            text = (
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (7 –¥–Ω–µ–π)**\n\n"
                f"üîÑ **–£–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n"
                f"‚Ä¢ 7 –¥–Ω–µ–π: {activity_stats['retention']['7d']} ({activity_stats['retention']['7d_percentage']}%)\n"
                f"‚Ä¢ 30 –¥–Ω–µ–π: {activity_stats['retention']['30d']} ({activity_stats['retention']['30d_percentage']}%)\n\n"
                f"üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º:**\n"
            )
            
            for day in activity_stats['daily_active'][-7:]:
                text += f"   {day['date']}: {day['count']} –∞–∫—Ç–∏–≤–Ω—ã—Ö\n"
            
            text += "\nüë• **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º:**\n"
            for day in activity_stats['registrations'][-7:]:
                if day['count'] > 0:
                    text += f"   {day['date']}: {day['count']} –Ω–æ–≤—ã—Ö\n"
        
        elif analytics_type == "achievements":
            achievement_stats = await analytics_service.get_achievement_stats()
            
            text = (
                f"üèÜ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π**\n\n"
                f"üìä **–û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ:**\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {achievement_stats['total_achievements']}\n"
                f"‚Ä¢ –û–±—â–∏–µ –æ—á–∫–∏: {achievement_stats['user_stats']['total_points']}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –æ—á–∫–∏: {achievement_stats['user_stats']['avg_points']}\n\n"
                f"üéØ **–¢–æ–ø –ø–æ –æ—á–∫–∞–º:**\n"
            )
            
            for i, user in enumerate(achievement_stats['user_stats']['top_achievers'][:5], 1):
                text += f"   {i}. {user['name']}: {user['points']} –æ—á–∫–æ–≤ ({user['completed']} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π)\n"
            
            text += "\nüìà **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**\n"
            popular_achievements = sorted(
                achievement_stats['achievements'].items(),
                key=lambda x: x[1]['total_earned'],
                reverse=True
            )[:5]
            
            for name, data in popular_achievements:
                text += f"   ‚Ä¢ {name}: {data['total_earned']} ({data['completion_rate']}%)\n"
        
        elif analytics_type == "growth":
            growth_stats = await analytics_service.get_growth_stats(30)
            
            if growth_stats.get('data_points', 0) < 2:
                text = "üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ—Å—Ç–∞**\n\n‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–æ—Å—Ç–∞"
            else:
                text = (
                    f"üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ—Å—Ç–∞ (30 –¥–Ω–µ–π)**\n\n"
                    f"üî¢ **–û–±—â–∏–π —Ä–æ—Å—Ç:**\n"
                    f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: +{growth_stats['growth']['users']}\n"
                    f"‚Ä¢ –ú–æ–Ω–µ—Ç—ã: +{growth_stats['growth']['coins']:,}\n"
                    f"‚Ä¢ –ö–∞—Ä—Ç–æ—á–∫–∏: +{growth_stats['growth']['cards']:,}\n\n"
                    f"üìä **–°—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç –≤ –¥–µ–Ω—å:**\n"
                    f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: +{growth_stats['trends']['users_per_day']}\n"
                    f"‚Ä¢ –ú–æ–Ω–µ—Ç—ã: +{growth_stats['trends']['coins_per_day']:,}\n"
                    f"‚Ä¢ –ö–∞—Ä—Ç–æ—á–∫–∏: +{growth_stats['trends']['cards_per_day']:,}\n\n"
                    f"üìã –î–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥: {growth_stats['data_points']} —Ç–æ—á–µ–∫"
                )
        
        elif analytics_type == "snapshot":
            await analytics_service.save_daily_snapshot()
            text = (
                "üíæ **–°–Ω–∏–º–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω**\n\n"
                "‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–Ω–∏–º–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n"
                "üìä –°–Ω–∏–º–æ–∫ –≤–∫–ª—é—á–∞–µ—Ç:\n"
                "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ\n"
                "‚Ä¢ –î–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º\n"
                "‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏\n\n"
                f"üïê –í—Ä–µ–º—è: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC"
            )
        
        else:
            text = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"analytics_{analytics_type}")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ö –∞–Ω–∞–ª–∏—Ç–∏–∫–µ", callback_data="admin_analytics")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in analytics handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", show_alert=True)


# –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
@router.callback_query(F.data == "admin_discounts")
async def admin_discounts_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–∏–¥–∫–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    discounts_text = (
        "üí∞ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏**\n\n"
        "üìä –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∫–∏–¥–∫–∏ –Ω–∞ –ø–∞–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ:\n\n"
        "üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n"
        "‚Ä¢ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–∫–∏–¥–∫—É\n"
        "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–∏–¥–∫–∏\n"
        "‚Ä¢ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–∫–∏–¥–∫—É\n"
        "‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Ñ–ª–µ—à-—Ä–∞—Å–ø—Ä–æ–¥–∞–∂—É\n\n"
        "üí° –°–∫–∏–¥–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç —Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ –∏ —Å–æ–∑–¥–∞—é—Ç –¥–∏–Ω–∞–º–∏–∫—É –≤ —ç–∫–æ–Ω–æ–º–∏–∫–µ –∏–≥—Ä—ã!"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Å–∫–∏–¥–∫—É", callback_data="create_discount"),
            InlineKeyboardButton(text="üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–∏–¥–∫–∏", callback_data="active_discounts")
        ],
        [
            InlineKeyboardButton(text="‚ö° –§–ª–µ—à-—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞", callback_data="flash_sale"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∏–¥–æ–∫", callback_data="discount_stats")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(discounts_text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "admin_notifications")
async def admin_notifications_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    notifications_text = (
        "üîî **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏**\n\n"
        "üì® –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n"
        "üéØ **–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**\n"
        "‚Ä¢ üÜï –ù–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏\n"
        "‚Ä¢ üé™ –ù–æ–≤—ã–µ –∏–≤–µ–Ω—Ç—ã\n"
        "‚Ä¢ üí∞ –°–∫–∏–¥–∫–∏ –∏ –∞–∫—Ü–∏–∏\n"
        "‚Ä¢ üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤\n"
        "‚Ä¢ üì¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
        "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
        "‚Ä¢ –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏\n"
        "‚Ä¢ –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üÜï –£–≤–µ–¥–æ–º–∏—Ç—å –æ –∫–∞—Ä—Ç–æ—á–∫–µ", callback_data="notify_card"),
            InlineKeyboardButton(text="üé™ –û –Ω–æ–≤—ã—Ö –∏–≤–µ–Ω—Ç–∞—Ö", callback_data="notify_new_events")
        ],
        [
            InlineKeyboardButton(text="üí∞ –û —Å–∫–∏–¥–∫–∞—Ö", callback_data="notify_discounts"),
            InlineKeyboardButton(text="üèÜ –û –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö", callback_data="notify_achievements")
        ],
        [
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="notification_settings"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="notification_stats")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(notifications_text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "admin_auto_giveaways")
async def admin_auto_giveaways_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ-—Ä–∞–∑–¥–∞—á–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    auto_giveaways_text = (
        "‚è∞ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–¥–∞—á–∏**\n\n"
        "ü§ñ –ó–¥–µ—Å—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ä–∞–∑–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é:\n\n"
        "üéØ **–¢–∏–ø—ã –∞–≤—Ç–æ-—Ä–∞–∑–¥–∞—á:**\n"
        "‚Ä¢ üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã\n"
        "‚Ä¢ üé¥ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏\n"
        "‚Ä¢ üí∞ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –º–æ–Ω–µ—Ç—ã\n"
        "‚Ä¢ üé™ –°–µ–∑–æ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã\n"
        "‚Ä¢ üèÜ –ü—Ä–∏–∑—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n\n"
        "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
        "‚Ä¢ –í—Ä–µ–º—è –≤—ã–¥–∞—á–∏\n"
        "‚Ä¢ –†–∞–∑–º–µ—Ä –Ω–∞–≥—Ä–∞–¥\n"
        "‚Ä¢ –£—Å–ª–æ–≤–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã", callback_data="auto_daily_bonus"),
            InlineKeyboardButton(text="üé¥ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data="auto_weekly_cards")
        ],
        [
            InlineKeyboardButton(text="üí∞ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –º–æ–Ω–µ—Ç—ã", callback_data="auto_monthly_coins"),
            InlineKeyboardButton(text="üé™ –°–µ–∑–æ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã", callback_data="auto_seasonal_rewards")
        ],
        [
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback_data="auto_schedule_settings"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–¥–∞—á", callback_data="auto_giveaway_stats")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(auto_giveaways_text, reply_markup=keyboard)
    await callback.answer()


# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π (–±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –ø–æ–∑–∂–µ)
@router.callback_query(F.data.in_([
    "create_discount", "active_discounts", "flash_sale", "discount_stats",
    "notify_new_cards", "notify_new_events", "notify_discounts", "notify_achievements", 
    "notification_settings", "notification_stats",
    "auto_daily_bonus", "auto_weekly_cards", "auto_monthly_coins", "auto_seasonal_rewards",
    "auto_schedule_settings", "auto_giveaway_stats"
]))
async def admin_new_features_placeholders(callback: CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    feature_names = {
        "create_discount": "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–∏–¥–∫–∏",
        "active_discounts": "–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∏–¥–æ–∫",
        "flash_sale": "–§–ª–µ—à-—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞",
        "discount_stats": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∏–¥–æ–∫",
        "notify_new_cards": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö",
        "notify_new_events": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∏–≤–µ–Ω—Ç–∞—Ö",
        "notify_discounts": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–∏–¥–∫–∞—Ö",
        "notify_achievements": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö",
        "notification_settings": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        "notification_stats": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        "auto_daily_bonus": "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∞–≤—Ç–æ-–±–æ–Ω—É—Å—ã",
        "auto_weekly_cards": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∞–≤—Ç–æ-–∫–∞—Ä—Ç–æ—á–∫–∏",
        "auto_monthly_coins": "–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –∞–≤—Ç–æ-–º–æ–Ω–µ—Ç—ã",
        "auto_seasonal_rewards": "–°–µ–∑–æ–Ω–Ω—ã–µ –∞–≤—Ç–æ-–Ω–∞–≥—Ä–∞–¥—ã",
        "auto_schedule_settings": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
        "auto_giveaway_stats": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ-—Ä–∞–∑–¥–∞—á"
    }
    
    feature_name = feature_names.get(callback.data, "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è")
    
    await callback.answer(
        f"üöß {feature_name} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!\n\n"
        "–§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.",
        show_alert=True
    )


@router.callback_query(F.data == "edit_card_menu")
async def edit_card_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        cards = await card_service.get_all_cards()
        
        if not cards:
            await callback.message.edit_text(
                "üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫**\n\n‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_cards")]
                ])
            )
            return
        
        text = "üìù **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**\n\n"
        
        keyboard_buttons = []
        for i, card in enumerate(cards[:8]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 8
            text += f"{i+1}. {card.get_rarity_emoji()} {card.name}\n"
            button_text = f"{card.get_rarity_emoji()} {card.name[:20]}..."
            keyboard_buttons.append([InlineKeyboardButton(
                text=button_text, 
                callback_data=f"edit_card:{card.name}"
            )])
        
        if len(cards) > 8:
            text += f"\n... –∏ –µ—â–µ {len(cards) - 8} –∫–∞—Ä—Ç–æ—á–µ–∫"
            keyboard_buttons.append([InlineKeyboardButton(
                text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", 
                callback_data="edit_card_all"
            )])
        
        keyboard_buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_cards")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in edit card menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç–æ—á–µ–∫", show_alert=True)


@router.callback_query(F.data == "delete_card_menu")
async def delete_card_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    try:
        cards = await card_service.get_all_cards()
        
        if not cards:
            await callback.message.edit_text(
                "üóë **–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫**\n\n‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_cards")]
                ])
            )
            return
        
        text = "üóë **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:**\n\n‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!\n\n"
        
        keyboard_buttons = []
        for i, card in enumerate(cards[:8]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 8
            text += f"{i+1}. {card.get_rarity_emoji()} {card.name} (–≤–ª–∞–¥–µ–ª—å—Ü–µ–≤: {card.unique_owners})\n"
            button_text = f"üóë {card.name[:20]}..."
            keyboard_buttons.append([InlineKeyboardButton(
                text=button_text, 
                callback_data=f"delete_card:{card.name}"
            )])
        
        if len(cards) > 8:
            text += f"\n... –∏ –µ—â–µ {len(cards) - 8} –∫–∞—Ä—Ç–æ—á–µ–∫"
        
        keyboard_buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_cards")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in delete card menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç–æ—á–µ–∫", show_alert=True)


@router.callback_query(F.data.startswith("delete_card:"))
async def delete_card_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    card_name = callback.data.split(":", 1)[1]
    card = await card_service.get_card_by_name(card_name)
    
    if not card:
        await callback.answer("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    confirm_text = (
        f"üóë **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n"
        f"–ö–∞—Ä—Ç–æ—á–∫–∞: {card.get_rarity_emoji()} **{card.name}**\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {card.description}\n"
        f"–í–ª–∞–¥–µ–ª—å—Ü–µ–≤: {card.unique_owners}\n"
        f"–í—Å–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: {card.total_owned}\n\n"
        f"‚ö†Ô∏è **–≠–¢–û –î–ï–ô–°–¢–í–ò–ï –ù–ï–û–ë–†–ê–¢–ò–ú–û!**\n"
        f"–ö–∞—Ä—Ç–æ—á–∫–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ —É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤!"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ùå –£–î–ê–õ–ò–¢–¨", callback_data=f"confirm_delete:{card_name}"),
            InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="delete_card_menu")
        ]
    ])
    
    await callback.message.edit_text(confirm_text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_delete:"))
async def confirm_delete_card(callback: CallbackQuery):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    card_name = callback.data.split(":", 1)[1]
    
    success = await card_service.delete_card(card_name)
    
    if success:
        await callback.message.edit_text(
            f"‚úÖ **–ö–∞—Ä—Ç–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞!**\n\n"
            f"üóë –ö–∞—Ä—Ç–æ—á–∫–∞ '{card_name}' –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_cards")]
            ])
        )
        await callback.answer("‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏", show_alert=True)


@router.callback_query(F.data == "view_suggestions")
async def view_suggestions(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∫–∞—Ä—Ç–æ—á–µ–∫"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ - –≤ –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–∑ –ë–î
    suggestions_text = (
        "üé® **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫**\n\n"
        "üìã –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        "üîß **–§—É–Ω–∫—Ü–∏–∏:**\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n"
        "‚Ä¢ –ü—Ä–∏–Ω—è—Ç–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∏–≥—Ä–æ–∫–∞–º\n\n"
        "‚ö†Ô∏è –ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="view_suggestions")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_cards")]
    ])
    
    await safe_edit_message(callback, suggestions_text, keyboard)


# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
@router.callback_query(F.data.in_(["edit_card_all", "search_cards"]))
async def admin_card_placeholders(callback: CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –∫–∞—Ä—Ç–æ—á–µ–∫"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    placeholders = {
        "edit_card_all": "üìù –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        "search_cards": "üîç –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
    }
    
    message_text = placeholders.get(callback.data, "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    await callback.answer(message_text, show_alert=True)


@router.message(StateFilter(AdminStates.waiting_for_gift_coins))
async def process_gift_coins(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–∞—á–∏ –º–æ–Ω–µ—Ç"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        coins_amount = int(message.text.strip())
        if coins_amount <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return
        
        await state.clear()
        
        users = await user_service.get_all_users()
        success_count = 0
        
        await message.answer(f"ü™ô –ù–∞—á–∏–Ω–∞—é —Ä–∞–∑–¥–∞—á—É {coins_amount} –º–æ–Ω–µ—Ç {len(users)} –∏–≥—Ä–æ–∫–∞–º...")
        
        for user in users:
            try:
                user.coins += coins_amount
                await user_service.update_user(user)
                success_count += 1
            except Exception as e:
                logger.error(f"Error giving coins to user {user.telegram_id}: {e}")
        
        result_text = (
            f"‚úÖ **–†–∞–∑–¥–∞—á–∞ –º–æ–Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
            f"ü™ô –†–æ–∑–¥–∞–Ω–æ: {coins_amount} –º–æ–Ω–µ—Ç\n"
            f"üë• –ü–æ–ª—É—á–∏–ª–∏: {success_count} –∏–≥—Ä–æ–∫–æ–≤\n"
            f"üìä –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(users)}"
        )
        
        await message.answer(result_text)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        logger.error(f"Error processing gift coins: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–¥–∞—á–µ –º–æ–Ω–µ—Ç")


@router.message(StateFilter(AdminStates.waiting_for_gift_exp))
async def process_gift_exp(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–∞—á–∏ –æ–ø—ã—Ç–∞"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        exp_amount = int(message.text.strip())
        if exp_amount <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return
        
        await state.clear()
        
        users = await user_service.get_all_users()
        success_count = 0
        
        await message.answer(f"‚ú® –ù–∞—á–∏–Ω–∞—é —Ä–∞–∑–¥–∞—á—É {exp_amount} –æ–ø—ã—Ç–∞ {len(users)} –∏–≥—Ä–æ–∫–∞–º...")
        
        for user in users:
            try:
                old_level = user.level
                user.experience += exp_amount
                user.level = user.calculate_level()
                await user_service.update_user(user)
                success_count += 1
            except Exception as e:
                logger.error(f"Error giving exp to user {user.telegram_id}: {e}")
        
        result_text = (
            f"‚úÖ **–†–∞–∑–¥–∞—á–∞ –æ–ø—ã—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
            f"‚ú® –†–æ–∑–¥–∞–Ω–æ: {exp_amount} –æ–ø—ã—Ç–∞\n"
            f"üë• –ü–æ–ª—É—á–∏–ª–∏: {success_count} –∏–≥—Ä–æ–∫–æ–≤\n"
            f"üìä –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(users)}"
        )
        
        await message.answer(result_text)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        logger.error(f"Error processing gift exp: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–¥–∞—á–µ –æ–ø—ã—Ç–∞")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å–æ–±—ã—Ö —Ä–∞–∑–¥–∞—á
@router.callback_query(F.data.startswith("special_"))
async def handle_special_giveaways(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–æ–±—ã—Ö —Ä–∞–∑–¥–∞—á"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    special_type = callback.data.split("_", 1)[1]
    
    try:
        users = await user_service.get_all_users()
        if not users:
            await callback.answer("‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)
            return
        
        await callback.message.edit_text(f"üéÅ –ù–∞—á–∏–Ω–∞—é –æ—Å–æ–±—É—é —Ä–∞–∑–¥–∞—á—É –¥–ª—è {len(users)} –∏–≥—Ä–æ–∫–æ–≤...")
        
        from services.card_service import card_service
        success_count = 0
        
        if special_type == "random_card":
            # –°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
            for user in users:
                try:
                    card = await card_service.get_random_card()
                    if card:
                        await user_service.add_card_to_user(user, str(card.id))
                        success_count += 1
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        try:
                            notification_text = (
                                f"üéÅ **–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!**\n\n"
                                f"üé¥ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É:\n"
                                f"{card.get_rarity_emoji()} **{card.name}**\n"
                                f"üìù {card.description}\n\n"
                                f"üíù –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ!"
                            )
                            await callback.message.bot.send_message(user.telegram_id, notification_text, parse_mode="Markdown")
                        except Exception as notify_error:
                            logger.error(f"Failed to notify user {user.telegram_id} about random gift: {notify_error}")
                            
                except Exception as e:
                    logger.error(f"Error giving random card to user {user.telegram_id}: {e}")
            
            result_text = (
                f"‚úÖ **–†–∞–∑–¥–∞—á–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                f"üé∞ –†–æ–∑–¥–∞–Ω–æ: —Å–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏\n"
                f"üë• –ü–æ–ª—É—á–∏–ª–∏: {success_count} –∏–≥—Ä–æ–∫–æ–≤\n"
                f"üìä –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(users)}"
            )
            
        elif special_type == "coins_exp":
            # –ú–æ–Ω–µ—Ç—ã + –æ–ø—ã—Ç
            coins_amount = 100
            exp_amount = 50
            
            for user in users:
                try:
                    user.coins += coins_amount
                    user.experience += exp_amount
                    user.level = user.calculate_level()
                    await user_service.update_user(user)
                    success_count += 1
                except Exception as e:
                    logger.error(f"Error giving coins+exp to user {user.telegram_id}: {e}")
            
            result_text = (
                f"‚úÖ **–ö–æ–º–±–æ —Ä–∞–∑–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                f"ü™ô –†–æ–∑–¥–∞–Ω–æ: {coins_amount} –º–æ–Ω–µ—Ç\n"
                f"‚ú® –†–æ–∑–¥–∞–Ω–æ: {exp_amount} –æ–ø—ã—Ç–∞\n"
                f"üë• –ü–æ–ª—É—á–∏–ª–∏: {success_count} –∏–≥—Ä–æ–∫–æ–≤\n"
                f"üìä –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(users)}"
            )
            
        elif special_type == "rare_card":
            # –†–µ–¥–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ (Epic –∏–ª–∏ –≤—ã—à–µ)
            for user in users:
                try:
                    import random
                    rand = random.uniform(0, 100)
                    if rand <= 50:  # 50% Epic
                        rarity = "epic"
                    elif rand <= 85:  # 35% Legendary
                        rarity = "legendary"
                    else:  # 15% Artifact
                        rarity = "artifact"
                    
                    card = await card_service.get_random_card_by_rarity(rarity)
                    if card:
                        await user_service.add_card_to_user(user, str(card.id))
                        success_count += 1
                except Exception as e:
                    logger.error(f"Error giving rare card to user {user.telegram_id}: {e}")
            
            result_text = (
                f"‚úÖ **–†–∞–∑–¥–∞—á–∞ —Ä–µ–¥–∫–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                f"üî• –†–æ–∑–¥–∞–Ω–æ: Epic/Legendary/Artifact –∫–∞—Ä—Ç–æ—á–∫–∏\n"
                f"üë• –ü–æ–ª—É—á–∏–ª–∏: {success_count} –∏–≥—Ä–æ–∫–æ–≤\n"
                f"üìä –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(users)}"
            )
            
        elif special_type == "mega":
            # –ú–µ–≥–∞ –±–æ–Ω—É—Å: 3 —Å–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ + 200 –º–æ–Ω–µ—Ç + 100 –æ–ø—ã—Ç–∞
            coins_amount = 200
            exp_amount = 100
            cards_count = 3
            
            for user in users:
                try:
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã –∏ –æ–ø—ã—Ç
                    user.coins += coins_amount
                    user.experience += exp_amount
                    user.level = user.calculate_level()
                    await user_service.update_user(user)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º 3 —Å–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
                    for _ in range(cards_count):
                        card = await card_service.get_random_card()
                        if card:
                            await user_service.add_card_to_user(user, str(card.id))
                    
                    success_count += 1
                except Exception as e:
                    logger.error(f"Error giving mega bonus to user {user.telegram_id}: {e}")
            
            result_text = (
                f"‚úÖ **–ú–µ–≥–∞ —Ä–∞–∑–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                f"üé¥ –†–æ–∑–¥–∞–Ω–æ: {cards_count} —Å–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏\n"
                f"ü™ô –†–æ–∑–¥–∞–Ω–æ: {coins_amount} –º–æ–Ω–µ—Ç\n"
                f"‚ú® –†–æ–∑–¥–∞–Ω–æ: {exp_amount} –æ–ø—ã—Ç–∞\n"
                f"üë• –ü–æ–ª—É—á–∏–ª–∏: {success_count} –∏–≥—Ä–æ–∫–æ–≤\n"
                f"üìä –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(users)}"
            )
        
        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Å–æ–±–æ–π —Ä–∞–∑–¥–∞—á–∏", show_alert=True)
            return
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéÅ –ö —Ä–∞–∑–¥–∞—á–∞–º", callback_data="admin_gifts")]
        ])
        
        await callback.message.edit_text(result_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error processing special giveaway: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Å–æ–±–æ–π —Ä–∞–∑–¥–∞—á–∏", show_alert=True)


@router.callback_query(F.data == "admin_analytics")
async def admin_analytics_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    analytics_text = (
        "üìà **–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="analytics_users"),
            InlineKeyboardButton(text="üé¥ –ö–∞—Ä—Ç–æ—á–∫–∏", callback_data="analytics_cards")
        ],
        [
            InlineKeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="analytics_activity"),
            InlineKeyboardButton(text="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="analytics_achievements")
        ],
        [
            InlineKeyboardButton(text="üìà –†–æ—Å—Ç", callback_data="analytics_growth"),
            InlineKeyboardButton(text="üíæ –°–Ω–∏–º–æ–∫", callback_data="analytics_snapshot")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(analytics_text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("analytics_"))
async def admin_analytics_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    analytics_type = callback.data.split("_", 1)[1]
    
    try:
        from services.analytics_service import analytics_service
        
        await callback.message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É...")
        
        if analytics_type == "users":
            stats = await analytics_service.get_general_stats()
            users_stats = stats["users"]
            economy_stats = stats["economy"]
            
            text = (
                f"üë• **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
                f"üìä **–û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ:**\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_stats['total']}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {users_stats['active_7d']} ({users_stats['active_percentage']}%)\n"
                f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {users_stats['new_7d']}\n\n"
                f"üí∞ **–≠–∫–æ–Ω–æ–º–∏–∫–∞:**\n"
                f"‚Ä¢ –û–±—â–∏–µ –º–æ–Ω–µ—Ç—ã: {economy_stats['total_coins']:,}\n"
                f"‚Ä¢ –û–±—â–∏–π –æ–ø—ã—Ç: {economy_stats['total_experience']:,}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –º–æ–Ω–µ—Ç: {economy_stats['avg_coins']}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –æ–ø—ã—Ç: {economy_stats['avg_experience']}\n\n"
                f"üìà **–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º:**\n"
            )
            
            for level in sorted(users_stats['level_distribution'].keys(), reverse=True)[:10]:
                count = users_stats['level_distribution'][level]
                text += f"   –£—Ä–æ–≤–µ–Ω—å {level}: {count} –∏–≥—Ä–æ–∫–æ–≤\n"
            
            # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            text += "\nüèÜ **–¢–æ–ø –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º:**\n"
            for i, user in enumerate(stats["top_users"]["by_cards"][:5], 1):
                text += f"   {i}. {user['name']}: {user['value']} –∫–∞—Ä—Ç–æ—á–µ–∫\n"
        
        elif analytics_type == "cards":
            card_stats = await analytics_service.get_card_stats()
            
            text = (
                f"üé¥ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫**\n\n"
                f"üìä **–û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ:**\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –±–∞–∑–µ: {card_stats['total_cards']}\n\n"
                f"üéØ **–ü–æ —Ä–µ–¥–∫–æ—Å—Ç–∏:**\n"
            )
            
            for rarity, data in card_stats['by_rarity'].items():
                emoji = {
                    "common": "‚ö™", "rare": "üîµ", "epic": "üü£", 
                    "legendary": "üü°", "artifact": "üî¥"
                }.get(rarity, "‚ùì")
                
                text += (
                    f"{emoji} **{rarity.title()}:**\n"
                    f"   ‚Ä¢ –ö–∞—Ä—Ç–æ—á–µ–∫: {data['count']}\n"
                    f"   ‚Ä¢ –≠–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: {data['total_owned']}\n"
                    f"   ‚Ä¢ –í–ª–∞–¥–µ–ª—å—Ü–µ–≤: {data['total_owners']}\n\n"
                )
            
            text += "üî• **–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ:**\n"
            for i, card in enumerate(card_stats['most_popular'][:5], 1):
                emoji = {
                    "common": "‚ö™", "rare": "üîµ", "epic": "üü£", 
                    "legendary": "üü°", "artifact": "üî¥"
                }.get(card['rarity'], "‚ùì")
                text += f"   {i}. {emoji} {card['name']}: {card['owners']} –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤\n"
        
        elif analytics_type == "activity":
            activity_stats = await analytics_service.get_activity_stats(7)
            
            text = (
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (7 –¥–Ω–µ–π)**\n\n"
                f"üîÑ **–£–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n"
                f"‚Ä¢ 7 –¥–Ω–µ–π: {activity_stats['retention']['7d']} ({activity_stats['retention']['7d_percentage']}%)\n"
                f"‚Ä¢ 30 –¥–Ω–µ–π: {activity_stats['retention']['30d']} ({activity_stats['retention']['30d_percentage']}%)\n\n"
                f"üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º:**\n"
            )
            
            for day in activity_stats['daily_active'][-7:]:
                text += f"   {day['date']}: {day['count']} –∞–∫—Ç–∏–≤–Ω—ã—Ö\n"
            
            text += "\nüë• **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º:**\n"
            for day in activity_stats['registrations'][-7:]:
                if day['count'] > 0:
                    text += f"   {day['date']}: {day['count']} –Ω–æ–≤—ã—Ö\n"
        
        elif analytics_type == "achievements":
            achievement_stats = await analytics_service.get_achievement_stats()
            
            text = (
                f"üèÜ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π**\n\n"
                f"üìä **–û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ:**\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {achievement_stats['total_achievements']}\n"
                f"‚Ä¢ –û–±—â–∏–µ –æ—á–∫–∏: {achievement_stats['user_stats']['total_points']}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –æ—á–∫–∏: {achievement_stats['user_stats']['avg_points']}\n\n"
                f"üéØ **–¢–æ–ø –ø–æ –æ—á–∫–∞–º:**\n"
            )
            
            for i, user in enumerate(achievement_stats['user_stats']['top_achievers'][:5], 1):
                text += f"   {i}. {user['name']}: {user['points']} –æ—á–∫–æ–≤ ({user['completed']} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π)\n"
            
            text += "\nüìà **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**\n"
            popular_achievements = sorted(
                achievement_stats['achievements'].items(),
                key=lambda x: x[1]['total_earned'],
                reverse=True
            )[:5]
            
            for name, data in popular_achievements:
                text += f"   ‚Ä¢ {name}: {data['total_earned']} ({data['completion_rate']}%)\n"
        
        elif analytics_type == "growth":
            growth_stats = await analytics_service.get_growth_stats(30)
            
            if growth_stats.get('data_points', 0) < 2:
                text = "üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ—Å—Ç–∞**\n\n‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–æ—Å—Ç–∞"
            else:
                text = (
                    f"üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ—Å—Ç–∞ (30 –¥–Ω–µ–π)**\n\n"
                    f"üî¢ **–û–±—â–∏–π —Ä–æ—Å—Ç:**\n"
                    f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: +{growth_stats['growth']['users']}\n"
                    f"‚Ä¢ –ú–æ–Ω–µ—Ç—ã: +{growth_stats['growth']['coins']:,}\n"
                    f"‚Ä¢ –ö–∞—Ä—Ç–æ—á–∫–∏: +{growth_stats['growth']['cards']:,}\n\n"
                    f"üìä **–°—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç –≤ –¥–µ–Ω—å:**\n"
                    f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: +{growth_stats['trends']['users_per_day']}\n"
                    f"‚Ä¢ –ú–æ–Ω–µ—Ç—ã: +{growth_stats['trends']['coins_per_day']:,}\n"
                    f"‚Ä¢ –ö–∞—Ä—Ç–æ—á–∫–∏: +{growth_stats['trends']['cards_per_day']:,}\n\n"
                    f"üìã –î–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥: {growth_stats['data_points']} —Ç–æ—á–µ–∫"
                )
        
        elif analytics_type == "snapshot":
            await analytics_service.save_daily_snapshot()
            text = (
                "üíæ **–°–Ω–∏–º–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω**\n\n"
                "‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–Ω–∏–º–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n"
                "üìä –°–Ω–∏–º–æ–∫ –≤–∫–ª—é—á–∞–µ—Ç:\n"
                "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ\n"
                "‚Ä¢ –î–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º\n"
                "‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏\n\n"
                f"üïê –í—Ä–µ–º—è: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC"
            )
        
        else:
            text = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"analytics_{analytics_type}")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ö –∞–Ω–∞–ª–∏—Ç–∏–∫–µ", callback_data="admin_analytics")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in analytics handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", show_alert=True)


# –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
@router.callback_query(F.data == "admin_discounts")
async def admin_discounts_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–∏–¥–∫–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    discounts_text = (
        "üí∞ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏**\n\n"
        "üìä –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∫–∏–¥–∫–∏ –Ω–∞ –ø–∞–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ:\n\n"
        "üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n"
        "‚Ä¢ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–∫–∏–¥–∫—É\n"
        "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–∏–¥–∫–∏\n"
        "‚Ä¢ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–∫–∏–¥–∫—É\n"
        "‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Ñ–ª–µ—à-—Ä–∞—Å–ø—Ä–æ–¥–∞–∂—É\n\n"
        "üí° –°–∫–∏–¥–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç —Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ –∏ —Å–æ–∑–¥–∞—é—Ç –¥–∏–Ω–∞–º–∏–∫—É –≤ —ç–∫–æ–Ω–æ–º–∏–∫–µ –∏–≥—Ä—ã!"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Å–∫–∏–¥–∫—É", callback_data="create_discount"),
            InlineKeyboardButton(text="üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–∏–¥–∫–∏", callback_data="active_discounts")
        ],
        [
            InlineKeyboardButton(text="‚ö° –§–ª–µ—à-—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞", callback_data="flash_sale"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∏–¥–æ–∫", callback_data="discount_stats")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(discounts_text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "admin_notifications")
async def admin_notifications_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    notifications_text = (
        "üîî **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏**\n\n"
        "üì® –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n"
        "üéØ **–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**\n"
        "‚Ä¢ üÜï –ù–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏\n"
        "‚Ä¢ üé™ –ù–æ–≤—ã–µ –∏–≤–µ–Ω—Ç—ã\n"
        "‚Ä¢ üí∞ –°–∫–∏–¥–∫–∏ –∏ –∞–∫—Ü–∏–∏\n"
        "‚Ä¢ üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤\n"
        "‚Ä¢ üì¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
        "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
        "‚Ä¢ –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏\n"
        "‚Ä¢ –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üÜï –£–≤–µ–¥–æ–º–∏—Ç—å –æ –∫–∞—Ä—Ç–æ—á–∫–µ", callback_data="notify_card"),
            InlineKeyboardButton(text="üé™ –û –Ω–æ–≤—ã—Ö –∏–≤–µ–Ω—Ç–∞—Ö", callback_data="notify_new_events")
        ],
        [
            InlineKeyboardButton(text="üí∞ –û —Å–∫–∏–¥–∫–∞—Ö", callback_data="notify_discounts"),
            InlineKeyboardButton(text="üèÜ –û –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö", callback_data="notify_achievements")
        ],
        [
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="notification_settings"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="notification_stats")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(notifications_text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "admin_auto_giveaways")
async def admin_auto_giveaways_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ-—Ä–∞–∑–¥–∞—á–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    auto_giveaways_text = (
        "‚è∞ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–¥–∞—á–∏**\n\n"
        "ü§ñ –ó–¥–µ—Å—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ä–∞–∑–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é:\n\n"
        "üéØ **–¢–∏–ø—ã –∞–≤—Ç–æ-—Ä–∞–∑–¥–∞—á:**\n"
        "‚Ä¢ üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã\n"
        "‚Ä¢ üé¥ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏\n"
        "‚Ä¢ üí∞ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –º–æ–Ω–µ—Ç—ã\n"
        "‚Ä¢ üé™ –°–µ–∑–æ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã\n"
        "‚Ä¢ üèÜ –ü—Ä–∏–∑—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n\n"
        "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
        "‚Ä¢ –í—Ä–µ–º—è –≤—ã–¥–∞—á–∏\n"
        "‚Ä¢ –†–∞–∑–º–µ—Ä –Ω–∞–≥—Ä–∞–¥\n"
        "‚Ä¢ –£—Å–ª–æ–≤–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã", callback_data="auto_daily_bonus"),
            InlineKeyboardButton(text="üé¥ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data="auto_weekly_cards")
        ],
        [
            InlineKeyboardButton(text="üí∞ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –º–æ–Ω–µ—Ç—ã", callback_data="auto_monthly_coins"),
            InlineKeyboardButton(text="üé™ –°–µ–∑–æ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã", callback_data="auto_seasonal_rewards")
        ],
        [
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback_data="auto_schedule_settings"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–¥–∞—á", callback_data="auto_giveaway_stats")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(auto_giveaways_text, reply_markup=keyboard)
    await callback.answer()


# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π (–±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –ø–æ–∑–∂–µ)
@router.callback_query(F.data.in_([
    "create_discount", "active_discounts", "flash_sale", "discount_stats",
    "notify_new_cards", "notify_new_events", "notify_discounts", "notify_achievements", 
    "notification_settings", "notification_stats",
    "auto_daily_bonus", "auto_weekly_cards", "auto_monthly_coins", "auto_seasonal_rewards",
    "auto_schedule_settings", "auto_giveaway_stats"
]))
async def admin_new_features_placeholders(callback: CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    feature_names = {
        "create_discount": "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–∏–¥–∫–∏",
        "active_discounts": "–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∏–¥–æ–∫",
        "flash_sale": "–§–ª–µ—à-—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞",
        "discount_stats": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∏–¥–æ–∫",
        "notify_new_cards": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö",
        "notify_new_events": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∏–≤–µ–Ω—Ç–∞—Ö",
        "notify_discounts": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–∏–¥–∫–∞—Ö",
        "notify_achievements": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö",
        "notification_settings": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        "notification_stats": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        "auto_daily_bonus": "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∞–≤—Ç–æ-–±–æ–Ω—É—Å—ã",
        "auto_weekly_cards": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∞–≤—Ç–æ-–∫–∞—Ä—Ç–æ—á–∫–∏",
        "auto_monthly_coins": "–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –∞–≤—Ç–æ-–º–æ–Ω–µ—Ç—ã",
        "auto_seasonal_rewards": "–°–µ–∑–æ–Ω–Ω—ã–µ –∞–≤—Ç–æ-–Ω–∞–≥—Ä–∞–¥—ã",
        "auto_schedule_settings": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
        "auto_giveaway_stats": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ-—Ä–∞–∑–¥–∞—á"
    }
    
    feature_name = feature_names.get(callback.data, "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è")
    
    await callback.answer(
        f"üöß {feature_name} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!\n\n"
        "–§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.",
        show_alert=True
    )
