from datetime import datetime, timedelta
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command, CommandStart
from loguru import logger

from models.user import User
from services.user_service import user_service
from services.card_service import card_service
from services.game_service import game_service
from config import settings

router = Router()

async def safe_edit_message(callback, text: str, reply_markup=None, success_message: str = None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        await callback.message.edit_text(text, reply_markup=reply_markup)
        if success_message:
            await callback.answer(success_message)
        else:
            await callback.answer()
    except Exception as e:
        if "message is not modified" in str(e):
            await callback.answer("üìä –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
        elif "there is no text in the message to edit" in str(e):
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer(text, reply_markup=reply_markup)
            await callback.answer()
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
            logger.error(f"Error editing message: {e}")

async def safe_edit_message_update(update, text: str, reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è update (CallbackQuery –∏–ª–∏ Message)"""
    if isinstance(update, CallbackQuery):
        try:
            await update.message.edit_text(text, reply_markup=reply_markup)
        except Exception as e:
            if "message is not modified" in str(e):
                await update.answer("üìä –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
            elif "there is no text in the message to edit" in str(e):
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await update.message.answer(text, reply_markup=reply_markup)
                await update.answer()
            else:
                await update.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
                logger.error(f"Error editing message: {e}")
        else:
            await update.answer()
    else:
        await update.answer(text, reply_markup=reply_markup)


@router.message(CommandStart())
async def start_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    try:
        user = await user_service.get_or_create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        
        welcome_text = (
            "üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Pratki Card Bot!**\n\n"
            "üé¥ –°–æ–±–∏—Ä–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏\n"
            "‚ö° –£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é\n"
            "üèÜ –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏\n\n"
            "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üé¥ –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–Ω—è", callback_data="daily_card"),
                InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
            ],
            [
                InlineKeyboardButton(text="üìö –ú–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data="my_cards"),
                InlineKeyboardButton(text="üè™ –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")
            ],
            [
                InlineKeyboardButton(text="‚öîÔ∏è –ë–æ–π", callback_data="battle_menu"),
                InlineKeyboardButton(text="üîß –£–ª—É—á—à–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data="upgrade_menu")
            ],
            [
                InlineKeyboardButton(text="‚ö° –õ–∏–¥–µ—Ä–±–æ—Ä–¥", callback_data="leaderboard"),
                InlineKeyboardButton(text="üé™ –ò–≤–µ–Ω—Ç—ã", callback_data="events")
            ],
            [
                InlineKeyboardButton(text="üíé NFT –ö–∞—Ä—Ç–æ—á–∫–∏", callback_data="nft_cards"),
                InlineKeyboardButton(text="üéÅ –ë–æ–Ω—É—Å", callback_data="bonus")
            ],
            [
                InlineKeyboardButton(text="ü•ö –ü–ê–°–•–ê–õ–ö–ê", callback_data="easter_egg"),
                InlineKeyboardButton(text="üß© –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data="suggest_card")
            ],
            [
                InlineKeyboardButton(text="üîß –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
            ]
        ])
        
        await message.answer(welcome_text, reply_markup=keyboard)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        try:
            from handlers.achievement_handlers import check_and_notify_achievements
            await check_and_notify_achievements(user, message.bot)
        except Exception as achievement_error:
            logger.error(f"Error checking achievements on start: {achievement_error}")
        
    except Exception as e:
        logger.error(f"Error in start command for user {message.from_user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Command("help"))
async def help_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = (
        "üìã **–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:**\n\n"
        "üéØ **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
        "/dailycard - –ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É\n"
        "/mycards - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é\n"
        "/profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/upgrade <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –£–ª—É—á—à–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏\n"
        "/leaderboard - –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤\n"
        "/cardinfo <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–æ—á–∫–µ\n\n"
        "‚≠ê **–°–∏—Å—Ç–µ–º–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏:**\n"
        "‚ö™ Common (69.89%)\n"
        "üîµ Rare (20%)\n"
        "üü£ Epic (8%)\n"
        "üü° Legendary (2%)\n"
        "üî¥ Artifact (0.1%)\n\n"
        "üîÑ **–£–ª—É—á—à–µ–Ω–∏–µ:**\n"
        "3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ ‚Üí 1 —Å–ª–µ–¥—É—é—â–µ–π —Ä–µ–¥–∫–æ—Å—Ç–∏\n\n"
        "üíé **–ê—Ä—Ç–µ—Ñ–∞–∫—Ç–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏:**\n"
        "–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏: 50% —à–∞–Ω—Å –Ω–∞ –±–æ–Ω—É—Å/—à—Ç—Ä–∞—Ñ"
    )
    
    await message.answer(help_text)


@router.callback_query(F.data == "daily_card")
@router.message(Command("dailycard"))
async def daily_card_handler(update):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏"""
    try:
        if isinstance(update, CallbackQuery):
            message = update.message
            user_id = update.from_user.id
        else:
            message = update
            user_id = update.from_user.id
        
        user = await user_service.get_or_create_user(
            telegram_id=user_id,
            username=getattr(update.from_user, 'username', None),
            first_name=getattr(update.from_user, 'first_name', None),
            last_name=getattr(update.from_user, 'last_name', None)
        )
        
        card, bonus_card, message_text = await game_service.give_daily_card(user)
        
        if not card:
            if isinstance(update, CallbackQuery):
                await update.answer(message_text, show_alert=True)
            else:
                await message.answer(message_text)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–º
        media_url = card.get_media_url()
        
        if media_url and media_url.startswith('assets/'):
            try:
                if media_url.endswith('.mp4'):
                    await message.answer_video(FSInputFile(media_url), caption=message_text)
                elif media_url.endswith('.gif'):
                    await message.answer_animation(FSInputFile(media_url), caption=message_text)
                else:
                    await message.answer_photo(FSInputFile(media_url), caption=message_text)
            except:
                await message.answer(message_text)
        else:
            await message.answer(message_text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
        if card.rarity == "artifact":
            effect_happened, effect_text = await game_service.handle_artifact_effect(user)
            if effect_happened:
                await message.answer(effect_text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
        try:
            from handlers.achievement_handlers import check_and_notify_achievements
            await check_and_notify_achievements(user, message.bot)
        except Exception as achievement_error:
            logger.error(f"Error checking achievements after daily card: {achievement_error}")
        
        if isinstance(update, CallbackQuery):
            await update.answer()
            
    except Exception as e:
        logger.error(f"Error in daily card for user {user_id}: {e}")
        error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏"
        if isinstance(update, CallbackQuery):
            await update.answer(error_msg, show_alert=True)
        else:
            await message.answer(error_msg)


@router.callback_query(F.data == "profile")
@router.message(Command("profile"))
async def profile_handler(update):
    """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if isinstance(update, CallbackQuery):
            message = update.message
            user_id = update.from_user.id
        else:
            message = update
            user_id = update.from_user.id
        
        user = await user_service.get_user_by_telegram_id(user_id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        # –í—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏
        cooldown_text = ""
        if user.last_daily_card:
            next_card_time = user.last_daily_card + timedelta(hours=settings.daily_card_cooldown_hours)
            if datetime.utcnow() < next_card_time:
                remaining = next_card_time - datetime.utcnow()
                hours = remaining.seconds // 3600
                minutes = (remaining.seconds % 3600) // 60
                cooldown_text = f"\n‚è∞ –°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —á–µ—Ä–µ–∑: {hours}—á {minutes}–º"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—é–±–∏–º—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
        favorite_cards_text = "üíñ **–õ—é–±–∏–º—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏:**\n"
        if user.favorite_cards:
            from services.card_service import card_service
            for card_id in user.favorite_cards:
                card = await card_service.get_card_by_id(card_id)
                if card:
                    rarity_emoji = {
                        "common": "‚ö™",
                        "rare": "üîµ", 
                        "epic": "üü£",
                        "legendary": "üü°",
                        "artifact": "üî¥"
                    }.get(card.rarity.lower(), "‚ö™")
                    favorite_cards_text += f"{rarity_emoji} {card.name}\n"
                else:
                    favorite_cards_text += f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞\n"
        else:
            favorite_cards_text += "–ü–æ–∫–∞ –Ω–µ—Ç –ª—é–±–∏–º—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫\n"
        
        profile_text = (
            f"üë§ **–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞**\n\n"
            f"üÜî ID: {user.telegram_id}\n"
            f"üë§ –ò–º—è: {user.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"üéØ –£—Ä–æ–≤–µ–Ω—å: {user.level}\n"
            f"‚ú® –û–ø—ã—Ç: {user.experience}\n"
            f"ü™ô –ú–æ–Ω–µ—Ç—ã: {user.coins}\n"
            f"üÉè –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {user.total_cards}\n"
            f"üé¥ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫: {len(user.cards)}\n\n"
            f"{favorite_cards_text}\n"
            f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y')}"
            f"{cooldown_text}"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìö –ú–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data="my_cards"),
                InlineKeyboardButton(text="üé¥ –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–Ω—è", callback_data="daily_card")
            ],
            [
                InlineKeyboardButton(text="üè™ –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop"),
                InlineKeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data="leaderboard")
            ],
            [
                InlineKeyboardButton(text="üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements"),
                InlineKeyboardButton(text="üíñ –õ—é–±–∏–º—ã–µ", callback_data="manage_favorites")
            ],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        if isinstance(update, CallbackQuery):
            await safe_edit_message(update, profile_text, reply_markup=keyboard)
        else:
            await message.answer(profile_text, reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"Error in profile for user {user_id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")


@router.callback_query(F.data.startswith("my_cards"))
@router.message(Command("mycards"))
async def my_cards_handler(update):
    """–ö–æ–ª–ª–µ–∫—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if isinstance(update, CallbackQuery):
            message = update.message
            user_id = update.from_user.id
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ callback_data (my_cards:page)
            page = 1
            if ":" in update.data and len(update.data.split(":")) > 1:
                try:
                    page = int(update.data.split(":")[1])
                except (ValueError, IndexError):
                    page = 1
        else:
            message = update
            user_id = update.from_user.id
            page = 1
        
        user = await user_service.get_user_by_telegram_id(user_id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        if not user.cards or len(user.cards) == 0 or user.total_cards == 0:
            text = "üìö **–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /dailycard —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É!"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üé¥ –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data="daily_card")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            if isinstance(update, CallbackQuery):
                await safe_edit_message(update, text, reply_markup=keyboard)
            else:
                await message.answer(text, reply_markup=keyboard)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        try:
            collection, total_items, total_pages = await game_service.get_user_collection(user, page, 10)
        except Exception as e:
            logger.error(f"Error getting user collection: {e}")
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if isinstance(update, CallbackQuery):
                await safe_edit_message(update, text)
            else:
                await message.answer(text)
            return
        
        if not collection:
            text = "üìö **–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /dailycard —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É!"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üé¥ –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data="daily_card")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            if isinstance(update, CallbackQuery):
                await safe_edit_message(update, text, reply_markup=keyboard)
            else:
                await message.answer(text, reply_markup=keyboard)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = f"üìö **–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è** (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages})\n\n"
        
        keyboard_buttons = []
        for i, (card, quantity) in enumerate(collection):
            text += f"{card.get_rarity_emoji()} **{card.name}** x{quantity}\n"
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
            keyboard_buttons.append([InlineKeyboardButton(
                text=f"{card.get_rarity_emoji()} {card.name} x{quantity}",
                callback_data=f"view_card:{card.name}"
            )])
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        
        if page > 1:
            nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"my_cards:{page-1}"))
        
        nav_buttons.append(InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="ignore"))
        
        if page < total_pages:
            nav_buttons.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"my_cards:{page+1}"))
        
        if nav_buttons:
            keyboard_buttons.append(nav_buttons)
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîÑ –£–ª—É—á—à–∏—Ç—å", callback_data="upgrade_menu"),
            InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
        ])
        keyboard_buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        if isinstance(update, CallbackQuery):
            await safe_edit_message(update, text, reply_markup=keyboard)
        else:
            await message.answer(text, reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"Error in my_cards for user {user_id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")


@router.callback_query(F.data.startswith("view_card:"))
async def view_card_detail(callback: CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ä—Ç–æ—á–∫–∏"""
    try:
        card_name = callback.data.split(":", 1)[1]
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ù–∞–π—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫—É
        card = await card_service.get_card_by_name(card_name)
        if not card:
            await callback.answer("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        quantity = user.get_card_count(str(card.id))
        
        # –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–¥–∫–æ—Å—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        rarity_names = {
            "common": "–û–±—ã—á–Ω–∞—è",
            "rare": "–†–µ–¥–∫–∞—è", 
            "epic": "–≠–ø–∏—á–µ—Å–∫–∞—è",
            "legendary": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è",
            "artifact": "–ê—Ä—Ç–µ—Ñ–∞–∫—Ç"
        }
        rarity_name = rarity_names.get(card.rarity, card.rarity.title())
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        detail_text = (
            f"üé¥ **–î–µ—Ç–∞–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∏**\n\n"
            f"{card.get_rarity_emoji()} **{card.name}**\n\n"
            f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**\n{card.description}\n\n"
            f"üîπ **–†–µ–¥–∫–æ—Å—Ç—å:** {rarity_name}\n"
            f"üìä **–£ –≤–∞—Å:** {quantity} —à—Ç.\n"
            f"üë• **–í—Å–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤:** {card.unique_owners}\n"
            f"üé¥ **–í—Å–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤:** {card.total_owned}\n"
            f"üìÖ **–î–æ–±–∞–≤–ª–µ–Ω–∞:** {card.created_at.strftime('%d.%m.%Y')}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ñ—Ñ–µ–∫—Ç–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
        if card.rarity == "artifact" and hasattr(card, 'effect') and card.effect:
            effect_text = "‚ú® **–û—Å–æ–±—ã–π —ç—Ñ—Ñ–µ–∫—Ç**" if card.effect.get('type') == 'bonus' else "‚ö†Ô∏è **–ü—Ä–æ–∫–ª—è—Ç–∏–µ**"
            detail_text += f"\n\n{effect_text}\n{card.effect.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –≤ –ª—é–±–∏–º—ã—Ö
        card_id = str(card.id)
        is_favorite = card_id in user.favorite_cards
        favorite_button_text = "üíî –£–±—Ä–∞—Ç—å –∏–∑ –ª—é–±–∏–º—ã—Ö" if is_favorite else "üíñ –í –ª—é–±–∏–º—ã–µ"
        favorite_callback = f"remove_favorite:{card_id}" if is_favorite else f"add_favorite:{card_id}"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üí∞ –ü—Ä–æ–¥–∞—Ç—å", callback_data=f"sell_card:{card_name}"),
                InlineKeyboardButton(text="üîÑ –£–ª—É—á—à–∏—Ç—å", callback_data=f"upgrade_card:{card_name}")
            ],
            [
                InlineKeyboardButton(text=favorite_button_text, callback_data=favorite_callback)
            ],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ö –∫–æ–ª–ª–µ–∫—Ü–∏–∏", callback_data="my_cards")]
        ])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
        media_url = card.get_media_url()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        logger.info(f"Card {card_name} - Media URL: {media_url}")
        logger.info(f"Card {card_name} - GIF URL: {card.gif_url}")
        logger.info(f"Card {card_name} - Video URL: {card.video_url}")
        logger.info(f"Card {card_name} - Image URL: {card.image_url}")
        
        if media_url and media_url.startswith('assets/'):
            logger.info(f"Attempting to send media for card {card_name}: {media_url}")
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
                if media_url.endswith('.gif'):
                    from aiogram.types import InputMediaAnimation
                    media = InputMediaAnimation(
                        media=FSInputFile(media_url),
                        caption=detail_text,
                        parse_mode="Markdown"
                    )
                    await callback.message.edit_media(media, reply_markup=keyboard)
                    logger.info(f"Successfully sent GIF for card {card_name}")
                elif media_url.endswith('.mp4'):
                    from aiogram.types import InputMediaVideo
                    media = InputMediaVideo(
                        media=FSInputFile(media_url),
                        caption=detail_text,
                        parse_mode="Markdown"
                    )
                    await callback.message.edit_media(media, reply_markup=keyboard)
                    logger.info(f"Successfully sent video for card {card_name}")
                elif media_url.endswith(('.jpg', '.jpeg', '.png')):
                    from aiogram.types import InputMediaPhoto
                    media = InputMediaPhoto(
                        media=FSInputFile(media_url),
                        caption=detail_text,
                        parse_mode="Markdown"
                    )
                    await callback.message.edit_media(media, reply_markup=keyboard)
                    logger.info(f"Successfully sent image for card {card_name}")
                else:
                    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await safe_edit_message(callback, detail_text, reply_markup=keyboard)
            except Exception as media_error:
                logger.error(f"Error sending media for card {card_name}: {media_error}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await safe_edit_message(callback, detail_text, reply_markup=keyboard)
        else:
            logger.info(f"No media found for card {card_name}, sending text only")
            # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await safe_edit_message(callback, detail_text, reply_markup=keyboard)
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error viewing card detail: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏", show_alert=True)


@router.callback_query(F.data == "main_menu")
async def main_menu_handler(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    welcome_text = (
        "üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Pratki Card Bot!**\n\n"
        "üé¥ –°–æ–±–∏—Ä–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏\n"
        "‚ö° –£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é\n"
        "üèÜ –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏\n\n"
        "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üé¥ –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–Ω—è", callback_data="daily_card"),
            InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
        ],
        [
            InlineKeyboardButton(text="üìö –ú–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data="my_cards"),
            InlineKeyboardButton(text="üè™ –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")
        ],
        [
            InlineKeyboardButton(text="‚öîÔ∏è –ë–æ–π", callback_data="battle_menu"),
            InlineKeyboardButton(text="üîß –£–ª—É—á—à–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data="upgrade_menu")
        ],
        [
            InlineKeyboardButton(text="‚ö° –õ–∏–¥–µ—Ä–±–æ—Ä–¥", callback_data="leaderboard"),
            InlineKeyboardButton(text="üé™ –ò–≤–µ–Ω—Ç—ã", callback_data="events")
        ],
        [
            InlineKeyboardButton(text="üíé NFT –ö–∞—Ä—Ç–æ—á–∫–∏", callback_data="nft_cards"),
            InlineKeyboardButton(text="üéÅ –ë–æ–Ω—É—Å", callback_data="bonus")
        ],
        [
            InlineKeyboardButton(text="ü•ö –ü–ê–°–•–ê–õ–ö–ê", callback_data="easter_egg"),
            InlineKeyboardButton(text="üß© –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data="suggest_card")
        ],
        [
            InlineKeyboardButton(text="üîß –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
        ]
    ])
    
    await safe_edit_message(callback, welcome_text, reply_markup=keyboard)


@router.callback_query(F.data == "leaderboard")
@router.message(Command("leaderboard"))
async def leaderboard_handler(update):
    """–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        if isinstance(update, CallbackQuery):
            message = update.message
        else:
            message = update
        
        text = "üèÜ **–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤**\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n\n"
        text += "üìä **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏:**\n"
        text += "‚Ä¢ üéØ –ü–æ —É—Ä–æ–≤–Ω—é –∏ –æ–ø—ã—Ç—É\n"
        text += "‚Ä¢ üí∞ –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–æ–Ω–µ—Ç\n"
        text += "‚Ä¢ üÉè –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞—Ä—Ç–æ—á–µ–∫\n"
        text += "‚Ä¢ ‚öîÔ∏è –ü–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É –≤ –±–æ—è—Ö\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üéØ –ü–æ —É—Ä–æ–≤–Ω—é", callback_data="leaderboard_experience"),
                InlineKeyboardButton(text="üí∞ –ü–æ –º–æ–Ω–µ—Ç–∞–º", callback_data="leaderboard_coins")
            ],
            [
                InlineKeyboardButton(text="üÉè –ü–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º", callback_data="leaderboard_cards"),
                InlineKeyboardButton(text="‚öîÔ∏è –ü–æ –±–æ—è–º", callback_data="leaderboard_battles")
            ],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        if isinstance(update, CallbackQuery):
            try:
                await update.message.edit_text(text, reply_markup=keyboard)
            except Exception as e:
                if "message is not modified" in str(e):
                    await update.answer("üìä –ú–µ–Ω—é –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞")
                else:
                    await update.message.answer(text, reply_markup=keyboard)
            await update.answer()
        else:
            await message.answer(text, reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"Error in leaderboard menu: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞")


@router.callback_query(F.data == "leaderboard_experience")
async def leaderboard_experience(callback: CallbackQuery):
    """–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ —É—Ä–æ–≤–Ω—é –∏ –æ–ø—ã—Ç—É"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ–ø—ã—Ç—É
        top_users = await user_service.get_leaderboard(limit=10, sort_by="experience")
        
        if not top_users:
            await callback.message.edit_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤")
            return
        
        text = "üèÜ **–¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é –∏ –æ–ø—ã—Ç—É**\n\n"
        
        for i, user in enumerate(top_users, 1):
            if i == 1:
                medal = "ü•á"
            elif i == 2:
                medal = "ü•à"
            elif i == 3:
                medal = "ü•â"
            else:
                medal = f"{i}."
            
            name = user.first_name or user.username or f"User{user.telegram_id}"
            text += f"{medal} **{name}**\n"
            text += f"   üéØ –£—Ä–æ–≤–µ–Ω—å: {user.level} | ‚ú® –û–ø—ã—Ç: {user.experience:,}\n"
            text += f"   üÉè –ö–∞—Ä—Ç–æ—á–µ–∫: {user.total_cards} | üí∞ –ú–æ–Ω–µ—Ç: {user.coins:,}\n\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="leaderboard_experience")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ö –ª–∏–¥–µ—Ä–±–æ—Ä–¥—É", callback_data="leaderboard")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in experience leaderboard: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–ø–∞ –ø–æ –æ–ø—ã—Ç—É", show_alert=True)


@router.callback_query(F.data == "leaderboard_coins")
async def leaderboard_coins(callback: CallbackQuery):
    """–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ –º–æ–Ω–µ—Ç–∞–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –º–æ–Ω–µ—Ç–∞–º
        top_users = await user_service.get_leaderboard(limit=10, sort_by="coins")
        
        if not top_users:
            await callback.message.edit_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤")
            return
        
        text = "üí∞ **–¢–æ–ø –ø–æ –º–æ–Ω–µ—Ç–∞–º**\n\n"
        
        for i, user in enumerate(top_users, 1):
            if i == 1:
                medal = "ü•á"
            elif i == 2:
                medal = "ü•à"
            elif i == 3:
                medal = "ü•â"
            else:
                medal = f"{i}."
            
            name = user.first_name or user.username or f"User{user.telegram_id}"
            text += f"{medal} **{name}**\n"
            text += f"   üí∞ –ú–æ–Ω–µ—Ç: {user.coins:,} | üéØ –£—Ä–æ–≤–µ–Ω—å: {user.level}\n"
            text += f"   ‚ú® –û–ø—ã—Ç: {user.experience:,} | üÉè –ö–∞—Ä—Ç–æ—á–µ–∫: {user.total_cards}\n\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="leaderboard_coins")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ö –ª–∏–¥–µ—Ä–±–æ—Ä–¥—É", callback_data="leaderboard")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in coins leaderboard: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–ø–∞ –ø–æ –º–æ–Ω–µ—Ç–∞–º", show_alert=True)


@router.callback_query(F.data == "leaderboard_cards")
async def leaderboard_cards(callback: CallbackQuery):
    """–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º
        top_users = await user_service.get_leaderboard(limit=10, sort_by="total_cards")
        
        if not top_users:
            await callback.message.edit_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤")
            return
        
        text = "üÉè **–¢–æ–ø –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º**\n\n"
        
        for i, user in enumerate(top_users, 1):
            if i == 1:
                medal = "ü•á"
            elif i == 2:
                medal = "ü•à"
            elif i == 3:
                medal = "ü•â"
            else:
                medal = f"{i}."
            
            name = user.first_name or user.username or f"User{user.telegram_id}"
            text += f"{medal} **{name}**\n"
            text += f"   üÉè –ö–∞—Ä—Ç–æ—á–µ–∫: {user.total_cards} | üéØ –£—Ä–æ–≤–µ–Ω—å: {user.level}\n"
            text += f"   ‚ú® –û–ø—ã—Ç: {user.experience:,} | üí∞ –ú–æ–Ω–µ—Ç: {user.coins:,}\n\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="leaderboard_cards")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ö –ª–∏–¥–µ—Ä–±–æ—Ä–¥—É", callback_data="leaderboard")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in cards leaderboard: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–ø–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º", show_alert=True)


@router.callback_query(F.data == "leaderboard_battles")
async def leaderboard_battles(callback: CallbackQuery):
    """–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ –±–æ—è–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–æ—è–º
        top_users = await user_service.get_battle_leaderboard(limit=10)
        
        if not top_users:
            await callback.message.edit_text("‚öîÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±–æ—è—Ö")
            return
        
        text = "‚öîÔ∏è **–¢–æ–ø –ø–æ –±–æ—è–º**\n\n"
        
        for i, user in enumerate(top_users, 1):
            if i == 1:
                medal = "ü•á"
            elif i == 2:
                medal = "ü•à"
            elif i == 3:
                medal = "ü•â"
            else:
                medal = f"{i}."
            
            name = user.first_name or user.username or f"User{user.telegram_id}"
            battle_progress = user.battle_progress
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–¥–∏—é –≤ –±–æ—è—Ö
            stage_text = "üî∞ –ù–æ–≤–∏—á–æ–∫"
            if battle_progress.total_battles >= 100:
                stage_text = "üèÜ –ß–µ–º–ø–∏–æ–Ω"
            elif battle_progress.total_battles >= 50:
                stage_text = "‚öîÔ∏è –í–æ–∏–Ω"
            elif battle_progress.total_battles >= 20:
                stage_text = "üõ°Ô∏è –ó–∞—â–∏—Ç–Ω–∏–∫"
            elif battle_progress.total_battles >= 10:
                stage_text = "‚ö° –ë–æ–µ—Ü"
            elif battle_progress.total_battles >= 5:
                stage_text = "üéØ –°—Ç—Ä–µ–ª–æ–∫"
            
            text += f"{medal} **{name}**\n"
            text += f"   ‚öîÔ∏è –ë–æ–µ–≤: {battle_progress.total_battles} | {stage_text}\n"
            text += f"   üéØ –£—Ä–æ–≤–µ–Ω—å: {user.level} | üÉè –ö–∞—Ä—Ç–æ—á–µ–∫: {user.total_cards}\n\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="leaderboard_battles")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ö –ª–∏–¥–µ—Ä–±–æ—Ä–¥—É", callback_data="leaderboard")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in battles leaderboard: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–ø–∞ –ø–æ –±–æ—è–º", show_alert=True)


@router.message(Command("cardinfo"))
async def card_info_command(message: Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–æ—á–∫–µ"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.answer("‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /cardinfo <–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–∞—Ä—Ç–æ—á–∫–∏>")
            return
        
        card_name = args[1].strip()
        card = await card_service.get_card_by_name(card_name)
        
        if not card:
            await message.answer(f"‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ '{card_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        rarity_info = settings.rarities.get(card.rarity, {})
        probability = rarity_info.get('probability', 0)
        
        card_text = (
            f"{card.get_rarity_emoji()} **{card.name}**\n\n"
            f"üìñ {card.description}\n"
            f"‚≠ê –†–µ–¥–∫–æ—Å—Ç—å: {card.rarity.title()}\n"
            f"üé≤ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probability}%\n"
            f"üë• –í–ª–∞–¥–µ–ª—å—Ü–µ–≤: {card.unique_owners}\n"
            f"üî¢ –í—Å–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: {card.total_owned}"
        )
        
        if card.tags:
            card_text += f"\nüè∑ –¢–µ–≥–∏: {', '.join(card.tags)}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–º –µ—Å–ª–∏ –µ—Å—Ç—å
        media_url = card.get_media_url()
        
        if media_url and media_url.startswith('assets/'):
            try:
                if media_url.endswith('.mp4'):
                    await message.answer_video(FSInputFile(media_url), caption=card_text)
                elif media_url.endswith('.gif'):
                    await message.answer_animation(FSInputFile(media_url), caption=card_text)
                else:
                    await message.answer_photo(FSInputFile(media_url), caption=card_text)
            except:
                await message.answer(card_text)
        else:
            await message.answer(card_text)
            
    except Exception as e:
        logger.error(f"Error in card_info: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—Ç–æ—á–∫–µ")


@router.message(Command("upgrade"))
async def upgrade_command(message: Message):
    """–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.answer(
                "‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /upgrade <–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–∞—Ä—Ç–æ—á–∫–∏>\n\n"
                f"–î–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω—É–∂–Ω–æ {settings.cards_for_upgrade} –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏"
            )
            return
        
        card_name = args[1].strip()
        
        user = await user_service.get_user_by_telegram_id(message.from_user.id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        success, result_message = await game_service.upgrade_cards(user, card_name)
        await message.answer(result_message)
        
    except Exception as e:
        logger.error(f"Error in upgrade command: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫")


# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data.in_(["support", "ignore"]))
async def placeholder_handlers(callback: CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        
    if callback.data == "support":
        support_text = (
            "üîß **–ü–æ–¥–¥–µ—Ä–∂–∫–∞**\n\n"
            "‚ùì **–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?**\n"
            "–°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º!\n\n"
            "üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã:**\n"
            "‚Ä¢ Telegram: @Siriusatop123\n\n"
            "üêõ **–ù–∞—à–ª–∏ –±–∞–≥?**\n"
            "–°–æ–æ–±—â–∏—Ç–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n\n"
            "‚ö° **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:**\n"
            "–î–µ–ª–∏—Ç–µ—Å—å –∏–¥–µ—è–º–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞!"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await safe_edit_message(callback, support_text, reply_markup=keyboard)
        
    elif callback.data == "ignore":
        await callback.answer()
    else:
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
        await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)


@router.callback_query(F.data.startswith("manage_favorites"))
async def manage_favorites_handler(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª—é–±–∏–º—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ callback_data (manage_favorites:page)
        page = 1
        if ":" in callback.data and len(callback.data.split(":")) > 1:
            try:
                page = int(callback.data.split(":")[1])
            except (ValueError, IndexError):
                page = 1
        
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        from services.game_service import game_service
        cards_per_page = 12  # 6 —Ä—è–¥–æ–≤ –ø–æ 2 –∫–∞—Ä—Ç–æ—á–∫–∏
        collection, total_pages, current_page = await game_service.get_user_collection(user, page, cards_per_page)
        
        if not collection:
            await safe_edit_message(
                callback,
                "üíñ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª—é–±–∏–º—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏**\n\n"
                "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ª—é–±–∏–º—ã–µ!\n"
                "–ü–æ–ª—É—á–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –ø–æ–º–æ—â—å—é /dailycard",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
                ])
            )
            return
        
        favorites_text = (
            f"üíñ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª—é–±–∏–º—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏**\n\n"
            f"üìä **–¢–µ–∫—É—â–∏–µ –ª—é–±–∏–º—ã–µ ({len(user.favorite_cards)}/3):**\n"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª—é–±–∏–º—ã–µ
        if user.favorite_cards:
            from services.card_service import card_service
            for card_id in user.favorite_cards:
                card = await card_service.get_card_by_id(card_id)
                if card:
                    rarity_emoji = {
                        "common": "‚ö™",
                        "rare": "üîµ", 
                        "epic": "üü£",
                        "legendary": "üü°",
                        "artifact": "üî¥"
                    }.get(card.rarity.lower(), "‚ö™")
                    favorites_text += f"{rarity_emoji} {card.name}\n"
        else:
            favorites_text += "–ü–æ–∫–∞ –Ω–µ—Ç –ª—é–±–∏–º—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫\n"
        
        favorites_text += f"\nüé¥ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (—Å—Ç—Ä. {page}/{total_pages}):**\n"
        favorites_text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å –∏–∑ –ª—é–±–∏–º—ã—Ö"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ (–ø–æ 2 –≤ —Ä—è–¥)
        keyboard_buttons = []
        for i in range(0, len(collection), 2):
            row = []
            for j in range(2):
                if i + j < len(collection):
                    card, quantity = collection[i + j]
                    card_id = str(card.id)
                    is_favorite = card_id in user.favorite_cards
                    emoji = "üíñ" if is_favorite else card.get_rarity_emoji()
                    button_text = f"{emoji} {card.name[:15]}"
                    if is_favorite:
                        callback_data = f"remove_favorite:{card_id}"
                    else:
                        callback_data = f"add_favorite:{card_id}"
                    row.append(InlineKeyboardButton(text=button_text, callback_data=callback_data))
            keyboard_buttons.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        navigation_buttons = []
        if total_pages > 1:
            nav_row = []
            if page > 1:
                nav_row.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"manage_favorites:{page-1}"))
            nav_row.append(InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="no_action"))
            if page < total_pages:
                nav_row.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"manage_favorites:{page+1}"))
            navigation_buttons.append(nav_row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard_buttons.extend(navigation_buttons)
        keyboard_buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await safe_edit_message(callback, favorites_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error managing favorites: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("add_favorite:"))
async def add_favorite_handler(callback: CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –ª—é–±–∏–º—ã–µ"""
    try:
        card_id = callback.data.split(":", 1)[1]
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        success = user.add_to_favorites(card_id)
        
        if success:
            await user_service.update_user(user)
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            from services.card_service import card_service
            card = await card_service.get_card_by_id(card_id)
            card_name = card.name if card else "–∫–∞—Ä—Ç–æ—á–∫–∞"
            await callback.answer(f"üíñ {card_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ª—é–±–∏–º—ã–µ!")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É)
            callback.data = "manage_favorites:1"
            await manage_favorites_handler(callback)
        else:
            if len(user.favorite_cards) >= 3:
                await callback.answer("‚ùå –ú–∞–∫—Å–∏–º—É–º 3 –ª—é–±–∏–º—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏!", show_alert=True)
            elif user.get_card_count(card_id) == 0:
                await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏!", show_alert=True)
            else:
                await callback.answer("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ —É–∂–µ –≤ –ª—é–±–∏–º—ã—Ö!", show_alert=True)
                
    except Exception as e:
        logger.error(f"Error adding favorite: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "no_action")
async def no_action_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è"""
    await callback.answer()


@router.callback_query(F.data.startswith("remove_favorite:"))
async def remove_favorite_handler(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –ª—é–±–∏–º—ã—Ö"""
    try:
        card_id = callback.data.split(":", 1)[1]
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        success = user.remove_from_favorites(card_id)
        
        if success:
            await user_service.update_user(user)
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            from services.card_service import card_service
            card = await card_service.get_card_by_id(card_id)
            card_name = card.name if card else "–∫–∞—Ä—Ç–æ—á–∫–∞"
            await callback.answer(f"üíî {card_name} —É–±—Ä–∞–Ω–∞ –∏–∑ –ª—é–±–∏–º—ã—Ö!")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            if callback.data.startswith("remove_favorite:") and ":from_detail" not in callback.data:
                await manage_favorites_handler(callback)
            else:
                # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
                await view_card_detail_by_id(callback, card_id)
        else:
            await callback.answer("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ—Ç –≤ –ª—é–±–∏–º—ã—Ö!", show_alert=True)
                
    except Exception as e:
        logger.error(f"Error removing favorite: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


async def view_card_detail_by_id(callback: CallbackQuery, card_id: str):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ ID"""
    try:
        from services.card_service import card_service
        card = await card_service.get_card_by_id(card_id)
        if card:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º callback —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
            new_callback_data = f"card_detail:{card.name}"
            original_data = callback.data
            callback.data = new_callback_data
            await view_card_detail(callback)
            callback.data = original_data
    except Exception as e:
        logger.error(f"Error updating card detail: {e}")
