from datetime import datetime, timedelta
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from loguru import logger

from models.user import User
from services.user_service import user_service
from services.card_service import card_service
from services.game_service import game_service

router = Router()


@router.callback_query(F.data == "bonus")
async def bonus_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –±–æ–Ω—É—Å–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    try:
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ–Ω—É—Å—ã
        bonuses_text = "üéÅ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ–Ω—É—Å—ã:**\n\n"
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
        can_get_daily = await user_service.can_get_daily_card(user)
        if can_get_daily:
            bonuses_text += "üé¥ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ - **–î–û–°–¢–£–ü–ù–ê**\n"
        else:
            if user.last_daily_card:
                next_time = user.last_daily_card + timedelta(hours=2)
                remaining = next_time - datetime.utcnow()
                if remaining.total_seconds() > 0:
                    hours = remaining.seconds // 3600
                    minutes = (remaining.seconds % 3600) // 60
                    bonuses_text += f"üé¥ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ - —á–µ—Ä–µ–∑ {hours}—á {minutes}–º\n"
                else:
                    bonuses_text += "üé¥ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ - **–î–û–°–¢–£–ü–ù–ê**\n"
        
        # –ë–æ–Ω—É—Å –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤
        if not user.newbie_bonus_received:
            bonuses_text += "üÜï –ë–æ–Ω—É—Å –Ω–æ–≤–∏—á–∫–∞ - **–î–û–°–¢–£–ü–ï–ù**\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—ã—Ç–∞
        exp_to_next = user.get_experience_to_next_level()
        bonuses_text += f"\nüìà **–ü—Ä–æ–≥—Ä–µ—Å—Å:**\n"
        bonuses_text += f"üéØ –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {user.level}\n"
        bonuses_text += f"‚ú® –û–ø—ã—Ç: {user.experience}\n"
        bonuses_text += f"‚¨ÜÔ∏è –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {exp_to_next} –æ–ø—ã—Ç–∞\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        bonuses_text += f"\nüí° **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –æ–ø—ã—Ç:**\n"
        bonuses_text += f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫: 10-250 –æ–ø—ã—Ç–∞\n"
        bonuses_text += f"‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫: 50+ –æ–ø—ã—Ç–∞\n"
        bonuses_text += f"‚Ä¢ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏: 250 –æ–ø—ã—Ç–∞\n"
        bonuses_text += f"‚Ä¢ –ü–æ–∫—É–ø–∫–∞ –ø–∞–∫–æ–≤: 25-100 –æ–ø—ã—Ç–∞\n"
        bonuses_text += f"‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ —Å–æ–±—ã—Ç–∏—è—Ö: 100+ –æ–ø—ã—Ç–∞\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üé¥ –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data="daily_card"),
                InlineKeyboardButton(text="üéÅ –ù–æ–≤–∏—á–æ–∫ –±–æ–Ω—É—Å", callback_data="newbie_bonus")
            ],
            [
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="bonus_stats"),
                InlineKeyboardButton(text="üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements")
            ],
            [
                InlineKeyboardButton(text="üé™ –°–æ–±—ã—Ç–∏—è", callback_data="events"),
                InlineKeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞", callback_data="random_card")
            ],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(bonuses_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in bonus menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–æ–Ω—É—Å–æ–≤", show_alert=True)


@router.callback_query(F.data == "newbie_bonus")
async def newbie_bonus(callback: CallbackQuery):
    """–ë–æ–Ω—É—Å –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤"""
    try:
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        if user.newbie_bonus_received:
            await callback.answer("‚ùå –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –Ω–æ–≤–∏—á–∫–∞!", show_alert=True)
            return
        
        # –í—ã–¥–∞–µ–º –±–æ–Ω—É—Å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Ä–µ–¥–∫–æ—Å—Ç–∏ rare –∏–ª–∏ –≤—ã—à–µ
        import random
        bonus_rarities = ["rare", "epic", "legendary"]
        chosen_rarity = random.choice(bonus_rarities)
        
        bonus_card = await card_service.get_random_card_by_rarity(chosen_rarity)
        
        if bonus_card:
            await user_service.add_card_to_user(user, str(bonus_card.id))
            await card_service.update_card_stats(bonus_card.name, 1, 1)
            
            # –ü–æ–º–µ—á–∞–µ–º –±–æ–Ω—É—Å –∫–∞–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π
            user.newbie_bonus_received = True
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã –∏ –æ–ø—ã—Ç
            bonus_coins = 50
            user.coins += bonus_coins
            await user_service.update_user(user)
            await user_service.add_experience(user, 100)
            
            message_text = (
                f"üéâ **–ë–æ–Ω—É—Å –Ω–æ–≤–∏—á–∫–∞ –ø–æ–ª—É—á–µ–Ω!**\n\n"
                f"{bonus_card.get_rarity_emoji()} **{bonus_card.name}**\n"
                f"üìñ {bonus_card.description}\n\n"
                f"‚ú® +100 –æ–ø—ã—Ç–∞\n"
                f"ü™ô +{bonus_coins} –º–æ–Ω–µ—Ç!"
            )
            
            await callback.message.edit_text(message_text)
            await callback.answer("üéÅ –ë–æ–Ω—É—Å –Ω–æ–≤–∏—á–∫–∞ –ø–æ–ª—É—á–µ–Ω!")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –±–æ–Ω—É—Å–∞", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error in newbie bonus: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞", show_alert=True)


@router.callback_query(F.data == "bonus_stats")
async def bonus_stats(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–Ω—É—Å–æ–≤ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    try:
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º
        rarity_stats = {}
        for user_card in user.cards:
            card = await card_service.get_card_by_id(user_card.card_id)
            if card:
                if card.rarity not in rarity_stats:
                    rarity_stats[card.rarity] = 0
                rarity_stats[card.rarity] += user_card.quantity
        
        stats_text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏**\n\n"
        stats_text += f"üë§ **{user.first_name or '–ò–≥—Ä–æ–∫'}**\n"
        stats_text += f"üéØ –£—Ä–æ–≤–µ–Ω—å: {user.level}\n"
        stats_text += f"‚ú® –û–ø—ã—Ç: {user.experience}\n"
        stats_text += f"üÉè –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {user.total_cards}\n"
        stats_text += f"üé¥ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {len(user.cards)}\n\n"
        
        stats_text += "üìà **–ü–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º:**\n"
        for rarity in ["common", "rare", "epic", "legendary", "artifact"]:
            count = rarity_stats.get(rarity, 0)
            emoji = {"common": "‚ö™", "rare": "üîµ", "epic": "üü£", 
                    "legendary": "üü°", "artifact": "üî¥"}.get(rarity, "‚ùì")
            stats_text += f"{emoji} {rarity.title()}: {count}\n"
        
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievements = []
        if user.total_cards >= 10:
            achievements.append("üèÜ –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä (10+ –∫–∞—Ä—Ç–æ—á–µ–∫)")
        if user.level >= 5:
            achievements.append("‚≠ê –û–ø—ã—Ç–Ω—ã–π –∏–≥—Ä–æ–∫ (5+ —É—Ä–æ–≤–µ–Ω—å)")
        if rarity_stats.get("artifact", 0) > 0:
            achievements.append("üíé –í–ª–∞–¥–µ–ª–µ—Ü –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞")
        if len(user.cards) >= 5:
            achievements.append("üéØ –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ (5+ –≤–∏–¥–æ–≤)")
        
        if achievements:
            stats_text += f"\nüèÖ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**\n"
            for achievement in achievements:
                stats_text += f"‚Ä¢ {achievement}\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="bonus")]
        ])
        
        await callback.message.edit_text(stats_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in bonus stats: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


@router.callback_query(F.data == "achievements")
async def achievements_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π - –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    await show_achievements_page(callback, page=0)


@router.callback_query(F.data.startswith("achievements_page_"))
async def achievements_page(callback: CallbackQuery):
    """–ú–µ–Ω—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    try:
        page = int(callback.data.replace("achievements_page_", ""))
        await show_achievements_page(callback, page)
    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏", show_alert=True)


async def show_achievements_page(callback: CallbackQuery, page: int = 0):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    try:
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        from services.achievement_service import achievement_service
        stats = await achievement_service.get_user_achievement_stats(user)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        all_achievements = await achievement_service.get_all_achievements()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        achievements_per_page = 8
        total_pages = (len(all_achievements) + achievements_per_page - 1) // achievements_per_page
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if page >= total_pages:
            page = total_pages - 1
        if page < 0:
            page = 0
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = page * achievements_per_page
        end_idx = start_idx + achievements_per_page
        page_achievements = all_achievements[start_idx:end_idx]
        
        achievements_text = (
            f"üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è**\n\n"
            f"üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** {stats['completed']}/{stats['total_possible']} "
            f"({stats['completion_percentage']}%)\n"
            f"‚≠ê **–û—á–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:** {stats['total_points']}\n"
            f"üìÑ **–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}**\n\n"
            f"üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**\n"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        for i, achievement in enumerate(page_achievements, start_idx + 1):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–µ–Ω–æ –ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            is_completed = any(ua.achievement_id == str(achievement.id) and ua.is_completed 
                             for ua in user.achievements)
            
            status = "‚úÖ" if is_completed else "üîí"
            difficulty_emoji = achievement.get_difficulty_emoji()
            
            achievements_text += (
                f"{i}. {status} {difficulty_emoji} **{achievement.name}**\n"
                f"   üìù {achievement.description}\n"
                f"   üéÅ {achievement.reward_coins} –º–æ–Ω–µ—Ç, {achievement.reward_experience} XP\n\n"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        keyboard_buttons = []
        
        if total_pages > 1:
            pagination_buttons = []
            
            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            if page > 0:
                pagination_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"achievements_page_{page - 1}"))
            
            # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            pagination_buttons.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="achievements_page_info"))
            
            # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
            if page < total_pages - 1:
                pagination_buttons.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"achievements_page_{page + 1}"))
            
            keyboard_buttons.append(pagination_buttons)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        keyboard_buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="bonus")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(achievements_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in achievements page: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π", show_alert=True)


@router.callback_query(F.data == "achievements_page_info")
async def achievements_page_info(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    await callback.answer("üìÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π", show_alert=True)


@router.callback_query(F.data == "events")
async def events_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —Å–æ–±—ã—Ç–∏–π"""
    try:
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        events_text = "üé™ **–°–æ–±—ã—Ç–∏—è**\n\n"
        events_text += "üéâ **–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:**\n"
        events_text += "‚Ä¢ üéä –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –±–æ—Ç–∞ - –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ —à–∞–Ω—Å—ã –Ω–∞ —Ä–µ–¥–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏\n"
        events_text += "‚Ä¢ üåü –ó–≤–µ–∑–¥–Ω–∞—è –Ω–æ—á—å - –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—É—á–∞—é—Ç +50% –æ–ø—ã—Ç–∞\n"
        events_text += "‚Ä¢ üíé –ê–ª–º–∞–∑–Ω–∞—è –ª–∏—Ö–æ—Ä–∞–¥–∫–∞ - —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —à–∞–Ω—Å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤\n"
        events_text += "‚Ä¢ üéØ –î–µ–Ω—å –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä–∞ - –±–æ–Ω—É—Å –∑–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏\n"
        
        events_text += "\n‚ùì **–ó–∞–≥–∞–¥–æ—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:**\n"
        events_text += "‚Ä¢ ??? –¢–∞–π–Ω–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ\n"
        events_text += "‚Ä¢ ??? –°–∫—Ä—ã—Ç—ã–π —Ç—É—Ä–Ω–∏—Ä\n"
        events_text += "‚Ä¢ ??? –ú–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ–¥–µ–ª—è\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="bonus")]
        ])
        
        await callback.message.edit_text(events_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in events menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–±—ã—Ç–∏–π", show_alert=True)


@router.callback_query(F.data == "random_card")
async def random_card_bonus(callback: CallbackQuery):
    """–°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∑–∞ –º–æ–Ω–µ—Ç—ã"""
    try:
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
        cost = 25
        
        if user.coins < cost:
            await callback.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ: {cost}, —É –≤–∞—Å: {user.coins}", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        card = await card_service.get_random_card()
        if not card:
            await callback.answer("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", show_alert=True)
            return
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã –∏ –≤—ã–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        user.coins -= cost
        await user_service.add_card_to_user(user, str(card.id))
        await user_service.update_user(user)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç
        exp_gained = 10
        if card.rarity == "rare":
            exp_gained = 25
        elif card.rarity == "epic":
            exp_gained = 50
        elif card.rarity == "legendary":
            exp_gained = 100
        elif card.rarity == "artifact":
            exp_gained = 250
        
        await user_service.add_experience(user, exp_gained)
        
        message_text = (
            f"üé≤ **–°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞!**\n\n"
            f"{card.get_rarity_emoji()} **{card.name}**\n"
            f"üìñ {card.description}\n\n"
            f"‚ú® +{exp_gained} –æ–ø—ã—Ç–∞\n"
            f"ü™ô -{cost} –º–æ–Ω–µ—Ç"
        )
        
        await callback.message.edit_text(message_text)
        await callback.answer("üé≤ –ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞!")
        
    except Exception as e:
        logger.error(f"Error in random card bonus: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏", show_alert=True)


@router.callback_query(F.data == "main_menu")
async def main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    welcome_text = (
        "üéÆ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ä—Ç–æ—á–Ω—É—é –∏–≥—Ä—É!**\n\n"
        "üÉè –°–æ–±–∏—Ä–∞–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–¥–∫–æ—Å—Ç–µ–π\n"
        "üîß –£–ª—É—á—à–∞–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –ø–æ–≤—ã—à–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å\n"
        "üèÜ –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üé¥ –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–Ω—è", callback_data="daily_card"),
            InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
        ],
        [
            InlineKeyboardButton(text="üìö –ú–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data="my_cards"),
            InlineKeyboardButton(text="üè™ –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")
        ],
        [
            InlineKeyboardButton(text="üîß –£–ª—É—á—à–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data="upgrade_menu"),
            InlineKeyboardButton(text="‚ö° –õ–∏–¥–µ—Ä–±–æ—Ä–¥", callback_data="leaderboard")
        ],
        [InlineKeyboardButton(text="üíé NFT –ö–∞—Ä—Ç–æ—á–∫–∏", callback_data="nft_cards")],
        [
            InlineKeyboardButton(text="üéÅ –ë–æ–Ω—É—Å", callback_data="bonus"),
            InlineKeyboardButton(text="ü•ö –ü–ê–°–•–ê–õ–ö–ê", callback_data="easter_egg")
        ],
        [
            InlineKeyboardButton(text="üéÅ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≥–∏—Ñ–∫—É", callback_data="suggest_gif"),
            InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
        ]
    ])
    
    await callback.message.edit_text(welcome_text, reply_markup=keyboard)
    await callback.answer()
