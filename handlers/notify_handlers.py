from aiogram import F, Router
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from loguru import logger

from config import settings

router = Router()


class NotifyStates(StatesGroup):
    waiting_for_notify_card_name = State()
    waiting_for_giveaway_card_name = State()
    waiting_for_broadcast_message = State()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id in settings.admin_ids


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
@router.callback_query(F.data == "notify_card")
async def notify_card_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞—Ä—Ç–æ—á–∫–µ"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üÜï **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ**\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_notifications")]
        ])
    )
    
    await state.set_state(NotifyStates.waiting_for_notify_card_name)
    await callback.answer()


@router.message(StateFilter(NotifyStates.waiting_for_notify_card_name))
async def notify_card_process(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞—Ä—Ç–æ—á–∫–µ"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        card_name = message.text.strip()
        if not card_name:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        from services.card_service import card_service
        card = await card_service.get_card_by_name(card_name)
        if not card:
            await message.answer(f"‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ '{card_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        from services.notification_service import notification_service
        
        await message.answer(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞—Ä—Ç–æ—á–∫–µ '{card_name}'...")
        
        notification_count = await notification_service.notify_new_card(card)
        
        result_text = (
            f"‚úÖ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!**\n\n"
            f"üé¥ –ö–∞—Ä—Ç–æ—á–∫–∞: '{card_name}'\n"
            f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {notification_count}\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"
        )
        
        await message.answer(result_text)
        
    except Exception as e:
        logger.error(f"Error processing card notification: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        await state.clear()


# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
@router.callback_query(F.data == "enhanced_giveaway")
async def enhanced_giveaway_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–∞–∑–¥–∞—á–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üéÅ **–†–∞–∑–¥–∞—á–∞ + –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è**\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º.\n"
        "–ö–∞—Ä—Ç–æ—á–∫–∞ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–∞ + –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_gifts")]
        ])
    )
    
    await state.set_state(NotifyStates.waiting_for_giveaway_card_name)
    await callback.answer()


@router.message(StateFilter(NotifyStates.waiting_for_giveaway_card_name))
async def enhanced_giveaway_process(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–∞–∑–¥–∞—á–∏ –∫–∞—Ä—Ç–æ—á–∫–∏"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        card_name = message.text.strip()
        if not card_name:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        from services.card_service import card_service
        from services.user_service import user_service
        
        card = await card_service.get_card_by_name(card_name)
        if not card:
            await message.answer(f"‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ '{card_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        await state.clear()
        
        await message.answer(f"üéÅ –ù–∞—á–∏–Ω–∞—é —Ä–∞–∑–¥–∞—á—É –∫–∞—Ä—Ç–æ—á–∫–∏ '{card_name}' + —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await user_service.get_all_users()
        success_count = 0
        
        # –†–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
        for user in users:
            try:
                await user_service.add_card_to_user(user, str(card.id))
                success_count += 1
            except Exception as e:
                logger.error(f"Error giving card to user {user.telegram_id}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ä—Ç–æ—á–∫–∏
        await card_service.update_card_stats(card_name, success_count, success_count)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        from services.notification_service import notification_service
        notification_count = await notification_service.notify_new_card(card)
        
        result_text = (
            f"‚úÖ **–†–∞–∑–¥–∞—á–∞ + —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã!**\n\n"
            f"üé¥ –ö–∞—Ä—Ç–æ—á–∫–∞: '{card_name}'\n"
            f"üë• –ü–æ–ª—É—á–∏–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É: {success_count} –∏–≥—Ä–æ–∫–æ–≤\n"
            f"üì® –ü–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {notification_count} –∏–≥—Ä–æ–∫–æ–≤\n"
            f"üìä –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(users)}\n\n"
            f"üéâ –ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏ –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã!"
        )
        
        await message.answer(result_text)
        
    except Exception as e:
        logger.error(f"Error processing enhanced giveaway: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–¥–∞—á–µ –∫–∞—Ä—Ç–æ—á–∫–∏")
        await state.clear()


# –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@router.callback_query(F.data == "broadcast_message")
async def broadcast_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üì¢ **–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞**\n\n"
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:\n\n"
        "üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_notifications")]
        ])
    )
    
    await state.set_state(NotifyStates.waiting_for_broadcast_message)
    await callback.answer()


@router.message(StateFilter(NotifyStates.waiting_for_broadcast_message))
async def broadcast_process(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        broadcast_text = message.text.strip()
        if not broadcast_text:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
            return
        
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        from services.notification_service import notification_service
        
        await message.answer(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–∞—Å—Å—ã–ª–∫—É...")
        
        sent_count = await notification_service.broadcast_message(broadcast_text)
        
        result_text = (
            f"‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
            f"üì® –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏\n\n"
            f"üìù **–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**\n{broadcast_text[:100]}{'...' if len(broadcast_text) > 100 else ''}"
        )
        
        await message.answer(result_text)
        
    except Exception as e:
        logger.error(f"Error processing broadcast: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏")
        await state.clear()


# –°–±—Ä–æ—Å rate limits
@router.callback_query(F.data == "admin_reset_limits")
async def reset_limits_handler(callback: CallbackQuery):
    """–°–±—Ä–æ—Å rate limits –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    try:
        from middleware.rate_limiter import rate_limiter
        rate_limiter.reset_all_limits()
        
        await callback.answer("‚úÖ –í—Å–µ rate limits —Å–±—Ä–æ—à–µ–Ω—ã!", show_alert=True)
        logger.info(f"Admin {callback.from_user.id} reset all rate limits")
        
    except Exception as e:
        logger.error(f"Error resetting rate limits: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ª–∏–º–∏—Ç–æ–≤", show_alert=True)
