from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from loguru import logger
import random

from models.user import User
from services.user_service import user_service
from services.card_service import card_service
from services.nft_service import nft_service

router = Router()


@router.callback_query(F.data == "nft_cards")
async def nft_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é NFT –∫–∞—Ä—Ç–æ—á–µ–∫"""
    try:
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º NFT –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_nfts = await nft_service.get_user_nfts(user)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ NFT
        available_nfts = await nft_service.get_available_nft_cards()
        
        nft_text = (
            "üíé **NFT –°–∏—Å—Ç–µ–º–∞**\n\n"
            f"üèÜ –í–∞—à–∏—Ö NFT: {len(user_nfts)}\n"
            f"üõí –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏: {len(available_nfts)}\n\n"
        )
        
        if user_nfts:
            nft_text += "üî¥ **–í–∞—à–∏ NFT –∫–∞—Ä—Ç–æ—á–∫–∏:**\n\n"
            for card, user_nft in user_nfts:
                nft_text += f"üî¥ **{card.name}**\n"
                nft_text += f"   üìÖ –ü—Ä–∏—Å–≤–æ–µ–Ω–∞: {user_nft.assigned_at.strftime('%d.%m.%Y')}\n"
                nft_text += f"   üîÑ –ü–µ—Ä–µ–¥–∞—á: {user_nft.transfer_count}\n\n"
        else:
            nft_text += (
                "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç NFT –∫–∞—Ä—Ç–æ—á–µ–∫\n\n"
                "üí° **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å NFT:**\n"
                "‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º\n"
                "‚Ä¢ –ö—É–ø–∏—Ç–µ –µ—ë –∫–∞–∫ NFT –∑–∞ –æ–ø—ã—Ç\n"
                "‚Ä¢ –°—Ç–∞–Ω—å—Ç–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–º!\n\n"
                "üí∞ –¶–µ–Ω—ã: 1000-5000 XP –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–¥–∫–æ—Å—Ç–∏"
            )
        
        if available_nfts:
            nft_text += f"\nüõí **–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ NFT:**\n"
            for i, card in enumerate(available_nfts[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                nft_text += f"{i}. {card.get_rarity_emoji()} **{card.name}** - {card.nft_price} XP\n"
            if len(available_nfts) > 5:
                nft_text += f"... –∏ –µ—â–µ {len(available_nfts) - 5} –∫–∞—Ä—Ç–æ—á–µ–∫\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å NFT", callback_data="nft_shop"),
                InlineKeyboardButton(text="üìä –ú–æ–∏ NFT", callback_data="my_nfts")
            ],
            [
                InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–¥–∞—Ç—å NFT", callback_data="nft_transfer"),
                InlineKeyboardButton(text="üí∞ –ü—Ä–æ–¥–∞—Ç—å NFT", callback_data="nft_sell")
            ],
            [
                InlineKeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥ NFT", callback_data="nft_leaderboard"),
                InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="nft_stats")
            ],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(nft_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in NFT menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ NFT –º–µ–Ω—é", show_alert=True)


@router.callback_query(F.data == "nft_shop")
async def nft_shop(callback: CallbackQuery):
    """–ú–∞–≥–∞–∑–∏–Ω NFT –∫–∞—Ä—Ç–æ—á–µ–∫ - –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    await show_nft_shop_page(callback, page=0)


@router.callback_query(F.data.startswith("nft_shop_page_"))
async def nft_shop_page(callback: CallbackQuery):
    """–ú–∞–≥–∞–∑–∏–Ω NFT –∫–∞—Ä—Ç–æ—á–µ–∫ - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    try:
        page = int(callback.data.replace("nft_shop_page_", ""))
        await show_nft_shop_page(callback, page)
    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏", show_alert=True)


async def show_nft_shop_page(callback: CallbackQuery, page: int = 0):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É NFT –º–∞–≥–∞–∑–∏–Ω–∞"""
    try:
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ NFT
        available_nfts = await nft_service.get_available_nft_cards()
        
        if not available_nfts:
            shop_text = (
                "üõí **NFT –ú–∞–≥–∞–∑–∏–Ω**\n\n"
                "‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–∞–∫ NFT\n\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º!"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nft_cards")]
            ])
        else:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            cards_per_page = 8
            total_pages = (len(available_nfts) + cards_per_page - 1) // cards_per_page
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if page >= total_pages:
                page = total_pages - 1
            if page < 0:
                page = 0
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            start_idx = page * cards_per_page
            end_idx = start_idx + cards_per_page
            page_cards = available_nfts[start_idx:end_idx]
            
            shop_text = (
                "üõí **NFT –ú–∞–≥–∞–∑–∏–Ω**\n\n"
                f"üí∞ –í–∞—à –æ–ø—ã—Ç: {user.experience} XP\n"
                f"üõí –î–æ—Å—Ç—É–ø–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(available_nfts)}\n"
                f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n\n"
                "üí° **–ö–∞–∫ –∫—É–ø–∏—Ç—å NFT:**\n"
                "1. –ü–æ–ª—É—á–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º\n"
                "2. –ö—É–ø–∏—Ç–µ –µ—ë –∫–∞–∫ NFT –∑–∞ –æ–ø—ã—Ç\n"
                "3. –°—Ç–∞–Ω—å—Ç–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–º!\n\n"
                "üî¥ **–î–æ—Å—Ç—É–ø–Ω—ã–µ NFT:**\n"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            for i, card in enumerate(page_cards, start_idx + 1):
                has_card = user.get_card_count(str(card.id)) > 0
                status = "‚úÖ –ï—Å—Ç—å" if has_card else "‚ùå –ù–µ—Ç"
                shop_text += f"{i}. {card.get_rarity_emoji()} **{card.name}** - {card.nft_price} XP ({status})\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (–≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
            keyboard_buttons = []
            for card in page_cards:
                has_card = user.get_card_count(str(card.id)) > 0
                can_afford = user.experience >= card.nft_price
                
                if has_card and can_afford:
                    button_text = f"üíé {card.name[:15]}... ({card.nft_price} XP)"
                    callback_data = f"buy_nft_{card.name}"
                elif has_card:
                    button_text = f"‚ùå {card.name[:15]}... (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ XP)"
                    callback_data = "nft_insufficient_xp"
                else:
                    button_text = f"üîí {card.name[:15]}... (–Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏)"
                    callback_data = "nft_no_card"
                
                keyboard_buttons.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
            
            # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            pagination_buttons = []
            
            if total_pages > 1:
                # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
                if page > 0:
                    pagination_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"nft_shop_page_{page - 1}"))
                
                # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                pagination_buttons.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="nft_page_info"))
                
                # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
                if page < total_pages - 1:
                    pagination_buttons.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"nft_shop_page_{page + 1}"))
                
                keyboard_buttons.append(pagination_buttons)
            
            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            keyboard_buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nft_cards")])
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(shop_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in NFT shop page: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞–≥–∞–∑–∏–Ω–∞", show_alert=True)


@router.callback_query(F.data == "nft_page_info")
async def nft_page_info(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    await callback.answer("üìÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º", show_alert=True)


@router.callback_query(F.data.startswith("buy_nft_"))
async def buy_nft(callback: CallbackQuery):
    """–ü–æ–∫—É–ø–∫–∞ NFT –∫–∞—Ä—Ç–æ—á–∫–∏"""
    try:
        card_name = callback.data.replace("buy_nft_", "")
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        success, message = await nft_service.buy_nft(user, card_name)
        
        if success:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å –µ—â–µ", callback_data="nft_shop"),
                    InlineKeyboardButton(text="üíé –ú–æ–∏ NFT", callback_data="my_nfts")
                ],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nft_cards")]
            ])
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üõí –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ", callback_data="nft_shop")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nft_cards")]
            ])
        
        await callback.message.edit_text(message, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error buying NFT: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ NFT", show_alert=True)


@router.callback_query(F.data == "my_nfts")
async def my_nfts(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    await show_my_nfts_page(callback, page=0)


@router.callback_query(F.data.startswith("my_nfts_page_"))
async def my_nfts_page(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    try:
        page = int(callback.data.replace("my_nfts_page_", ""))
        await show_my_nfts_page(callback, page)
    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏", show_alert=True)


async def show_my_nfts_page(callback: CallbackQuery, page: int = 0):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        user_nfts = await nft_service.get_user_nfts(user)
        
        if not user_nfts:
            nft_text = (
                "üíé **–ú–æ–∏ NFT**\n\n"
                "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç NFT –∫–∞—Ä—Ç–æ—á–µ–∫\n\n"
                "üí° –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –≤ –º–∞–≥–∞–∑–∏–Ω, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —Å–≤–æ—é –ø–µ—Ä–≤—É—é NFT!"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üõí NFT –ú–∞–≥–∞–∑–∏–Ω", callback_data="nft_shop")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nft_cards")]
            ])
        else:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            nfts_per_page = 8
            total_pages = (len(user_nfts) + nfts_per_page - 1) // nfts_per_page
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if page >= total_pages:
                page = total_pages - 1
            if page < 0:
                page = 0
            
            # –ü–æ–ª—É—á–∞–µ–º NFT –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            start_idx = page * nfts_per_page
            end_idx = start_idx + nfts_per_page
            page_nfts = user_nfts[start_idx:end_idx]
            
            nft_text = f"üíé **–ú–æ–∏ NFT –∫–∞—Ä—Ç–æ—á–∫–∏** ({len(user_nfts)})\n"
            nft_text += f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n\n"
            
            for i, (card, user_nft) in enumerate(page_nfts, start_idx + 1):
                nft_text += f"{i}. {card.get_rarity_emoji()} **{card.name}**\n"
                nft_text += f"   üìÖ –ü—Ä–∏—Å–≤–æ–µ–Ω–∞: {user_nft.assigned_at.strftime('%d.%m.%Y %H:%M')}\n"
                nft_text += f"   üîÑ –ü–µ—Ä–µ–¥–∞—á: {user_nft.transfer_count}\n"
                nft_text += f"   üí∞ –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {card.nft_price} XP\n\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è NFT (–≤—Å–µ NFT –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
            keyboard_buttons = []
            for card, user_nft in page_nfts:
                keyboard_buttons.append([
                    InlineKeyboardButton(text=f"üëÅÔ∏è {card.name[:15]}...", callback_data=f"view_card:{card.name}"),
                    InlineKeyboardButton(text=f"üîÑ –ü–µ—Ä–µ–¥–∞—Ç—å", callback_data=f"transfer_nft_{card.name}")
                ])
                keyboard_buttons.append([
                    InlineKeyboardButton(text=f"üí∞ –ü—Ä–æ–¥–∞—Ç—å", callback_data=f"sell_nft_{card.name}")
                ])
            
            # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            if total_pages > 1:
                pagination_buttons = []
                
                # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
                if page > 0:
                    pagination_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"my_nfts_page_{page - 1}"))
                
                # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                pagination_buttons.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="nft_page_info"))
                
                # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
                if page < total_pages - 1:
                    pagination_buttons.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"my_nfts_page_{page + 1}"))
                
                keyboard_buttons.append(pagination_buttons)
            
            keyboard_buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nft_cards")])
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(nft_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing user NFTs page: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ NFT", show_alert=True)


@router.callback_query(F.data == "nft_leaderboard")
async def nft_leaderboard(callback: CallbackQuery):
    """–†–µ–π—Ç–∏–Ω–≥ NFT –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤"""
    try:
        leaderboard = await nft_service.get_nft_leaderboard()
        
        if not leaderboard:
            leaderboard_text = (
                "üèÜ **–†–µ–π—Ç–∏–Ω–≥ NFT –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤**\n\n"
                "‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ —Å NFT –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏\n\n"
                "üí° –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –∫—É–ø–∏—Ç NFT!"
            )
        else:
            leaderboard_text = "üèÜ **–†–µ–π—Ç–∏–Ω–≥ NFT –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤**\n\n"
            
            for i, (user, nft_count) in enumerate(leaderboard, 1):
                username = user.username if user.username else f"User{user.telegram_id}"
                leaderboard_text += f"{i}. üë§ @{username} - {nft_count} NFT\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nft_cards")]
        ])
        
        await callback.message.edit_text(leaderboard_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing NFT leaderboard: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞", show_alert=True)


@router.callback_query(F.data == "nft_stats")
async def nft_stats(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ NFT —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        available_nfts = await nft_service.get_available_nft_cards()
        all_users = await user_service.get_all_users()
        
        total_nfts_owned = 0
        for user in all_users:
            total_nfts_owned += len([nft for nft in user.nfts if nft.is_active])
        
        stats_text = (
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ NFT —Å–∏—Å—Ç–µ–º—ã**\n\n"
            f"üõí –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏: {len(available_nfts)}\n"
            f"üíé –í—Å–µ–≥–æ –ø—Ä–∏—Å–≤–æ–µ–Ω–æ NFT: {total_nfts_owned}\n"
            f"üë• –ò–≥—Ä–æ–∫–æ–≤ —Å NFT: {len([u for u in all_users if any(nft.is_active for nft in u.nfts)])}\n\n"
        )
        
        if available_nfts:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º
            rarity_stats = {}
            for card in available_nfts:
                rarity_stats[card.rarity] = rarity_stats.get(card.rarity, 0) + 1
            
            stats_text += "üìà **–ü–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º:**\n"
            for rarity, count in rarity_stats.items():
                stats_text += f"‚Ä¢ {rarity.title()}: {count} –∫–∞—Ä—Ç–æ—á–µ–∫\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nft_cards")]
        ])
        
        await callback.message.edit_text(stats_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing NFT stats: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
@router.callback_query(F.data.in_(["nft_transfer", "nft_sell", "nft_insufficient_xp", "nft_no_card"]))
async def nft_placeholders(callback: CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è NFT —Ñ—É–Ω–∫—Ü–∏–π"""
    placeholders = {
        "nft_transfer": "üîÑ –ü–µ—Ä–µ–¥–∞—á–∞ NFT –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        "nft_sell": "üí∞ –ü—Ä–æ–¥–∞–∂–∞ NFT –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        "nft_insufficient_xp": "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ NFT",
        "nft_no_card": "üîí –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º"
    }
    
    message_text = placeholders.get(callback.data, "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    await callback.answer(message_text, show_alert=True)
