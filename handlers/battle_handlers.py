from datetime import datetime
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from loguru import logger

from models.user import User
from models.card import Mob
from services.user_service import user_service
from services.card_service import card_service
from services.battle_service import battle_service

router = Router()


@router.callback_query(F.data == "battle_menu")
async def battle_menu(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    try:
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±–æ—è
        can_battle = user.can_battle()
        time_left = ""
        
        if not can_battle and user.battle_progress.last_battle_time:
            time_passed = (datetime.utcnow() - user.battle_progress.last_battle_time).total_seconds()
            time_left_seconds = max(0, 3600 - time_passed)
            if time_left_seconds > 0:
                minutes = int(time_left_seconds // 60)
                seconds = int(time_left_seconds % 60)
                time_left = f"\n‚è∞ –°–ª–µ–¥—É—é—â–∏–π –±–æ–π —á–µ—Ä–µ–∑: {minutes:02d}:{seconds:02d}"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–±–æ–≤
        available_mobs = await battle_service.get_available_mobs(user)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–ª—É –∫–æ–ª–æ–¥—ã
        deck_power = await battle_service.get_user_deck_power(user)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = (
            f"‚öîÔ∏è **–ë–æ–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞**\n\n"
            f"üèÜ –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {user.battle_progress.current_level}/50\n"
            f"üí™ –ü–æ–±–µ–¥: {user.battle_progress.battles_won}/{user.battle_progress.total_battles}\n"
            f"üé¥ –ö–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ: {len(user.battle_deck.card_ids)}/5\n"
            f"üí™ –°–∏–ª–∞ –∫–æ–ª–æ–¥—ã: {deck_power}\n"
            f"{time_left}\n\n"
        )
        
        if not user.battle_deck.card_ids or len(user.battle_deck.card_ids) < 5:
            text += "‚ùå **–°–æ–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–¥—É –∏–∑ 5 –∫–∞—Ä—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –±–æ—è—Ö!**\n\n"
        elif not can_battle:
            text += "‚è∞ **–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –±–æ–µ–º**\n\n"
        else:
            text += "‚úÖ **–ì–æ—Ç–æ–≤ –∫ –±–æ—é!**\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–±–∞—Ö
        if available_mobs:
            text += "üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–±—ã:**\n"
            for mob in available_mobs[:3]:
                can_fight = await battle_service.can_battle_mob(user, mob.level)
                status = "‚úÖ" if can_fight else "üîí"
                text += f"{status} {mob.name} (–°–∏–ª–∞: {mob.power})\n"
            text += "\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–¥–æ–π
        keyboard.append([
            InlineKeyboardButton(
                text="üé¥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–¥–æ–π", 
                callback_data="battle_deck_manage"
            )
        ])
        
        # –ö–Ω–æ–ø–∫–∏ –º–æ–±–æ–≤ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö)
        if available_mobs:
            mob_buttons = []
            for mob in available_mobs[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 –º–æ–±–∞
                can_fight = await battle_service.can_battle_mob(user, mob.level)
                button_text = f"{mob.get_difficulty_emoji()} {mob.name} ({mob.power})"
                if not can_fight:
                    button_text += " üîí"
                
                mob_buttons.append(
                    InlineKeyboardButton(
                        text=button_text,
                        callback_data=f"battle_mob_{mob.level}"
                    )
                )
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ä—è–¥—ã –ø–æ 2 –∫–Ω–æ–ø–∫–∏
            for i in range(0, len(mob_buttons), 2):
                row = mob_buttons[i:i+2]
                keyboard.append(row)
        
        # –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        keyboard.append([
            InlineKeyboardButton(
                text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–µ–≤", 
                callback_data="battle_stats"
            )
        ])
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
        ])
        
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(text, reply_markup=markup)
        
    except Exception as e:
        logger.error(f"Error in battle_menu: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "battle_deck_manage")
async def battle_deck_manage(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–µ–≤–æ–π –∫–æ–ª–æ–¥–æ–π"""
    try:
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_cards = []
        for user_card in user.cards:
            try:
                card_info = await card_service.get_card_by_id(user_card.card_id)
                if card_info:
                    user_cards.append({
                        "card": card_info,
                        "quantity": user_card.quantity
                    })
            except:
                continue
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏ (–æ—Ç —Å–∏–ª—å–Ω—ã—Ö –∫ —Å–ª–∞–±—ã–º)
        rarity_order = {"artifact": 5, "legendary": 4, "epic": 3, "rare": 2, "common": 1}
        user_cards.sort(key=lambda x: rarity_order.get(x["card"].rarity, 0), reverse=True)
        
        text = "üé¥ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–µ–≤–æ–π –∫–æ–ª–æ–¥–æ–π**\n\n"
        
        if user.battle_deck.card_ids:
            text += "**–¢–µ–∫—É—â–∞—è –∫–æ–ª–æ–¥–∞:**\n"
            for i, card_id in enumerate(user.battle_deck.card_ids, 1):
                try:
                    card_info = await card_service.get_card_by_id(card_id)
                    if card_info:
                        text += f"{i}. {card_info.get_rarity_emoji()} {card_info.name}\n"
                except:
                    text += f"{i}. ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞\n"
            text += "\n"
        
        text += f"**–í–∞—à–∏ –∫–∞—Ä—Ç—ã:** ({len(user_cards)} —à—Ç.)\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—ã –¥–ª—è –∫–æ–ª–æ–¥—ã (–º–∞–∫—Å–∏–º—É–º 5):\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ä—Ç
        keyboard = []
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for user_card_data in user_cards[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∫–∞—Ä—Ç
            card = user_card_data["card"]
            quantity = user_card_data["quantity"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç–∞ —É–∂–µ –≤ –∫–æ–ª–æ–¥–µ
            in_deck = str(card.id) in user.battle_deck.card_ids
            
            button_text = f"{card.get_rarity_emoji()} {card.name} ({quantity})"
            if in_deck:
                button_text += " ‚úÖ"
            
            keyboard.append([
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"deck_card_{card.id}"
                )
            ])
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard.append([
            InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–ª–æ–¥—É", callback_data="deck_clear"),
            InlineKeyboardButton(text="üé≤ –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="deck_auto")
        ])
        
        keyboard.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="battle_menu")
        ])
        
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(text, reply_markup=markup)
        
    except Exception as e:
        logger.error(f"Error in battle_deck_manage: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("deck_card_"))
async def deck_card_toggle(callback: CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã"""
    try:
        card_id = callback.data.replace("deck_card_", "")
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not user.get_card_count(card_id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–π –∫–∞—Ä—Ç—ã")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã
        if card_id in user.battle_deck.card_ids:
            user.battle_deck.card_ids.remove(card_id)
            await callback.answer("üóëÔ∏è –ö–∞—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–æ–ª–æ–¥—ã")
        else:
            if len(user.battle_deck.card_ids) >= 5:
                await callback.answer("‚ùå –ö–æ–ª–æ–¥–∞ —É–∂–µ –ø–æ–ª–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º 5 –∫–∞—Ä—Ç)")
                return
            user.battle_deck.card_ids.append(card_id)
            await callback.answer("‚úÖ –ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ–ª–æ–¥—É")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await user_service.update_user(user)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        await battle_deck_manage(callback)
        
    except Exception as e:
        logger.error(f"Error in deck_card_toggle: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "deck_clear")
async def deck_clear(callback: CallbackQuery):
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ–ª–æ–¥—ã"""
    try:
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        user.battle_deck.card_ids.clear()
        await user_service.update_user(user)
        
        await callback.answer("üóëÔ∏è –ö–æ–ª–æ–¥–∞ –æ—á–∏—â–µ–Ω–∞")
        await battle_deck_manage(callback)
        
    except Exception as e:
        logger.error(f"Error in deck_clear: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "deck_auto")
async def deck_auto_fill(callback: CallbackQuery):
    """–ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–ª–æ–¥—ã –ª—É—á—à–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏"""
    try:
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_cards = []
        for user_card in user.cards:
            try:
                card_info = await card_service.get_card_by_id(user_card.card_id)
                if card_info:
                    user_cards.append({
                        "card": card_info,
                        "quantity": user_card.quantity
                    })
            except:
                continue
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏ –∏ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ
        rarity_order = {"artifact": 5, "legendary": 4, "epic": 3, "rare": 2, "common": 1}
        user_cards.sort(key=lambda x: rarity_order.get(x["card"].rarity, 0), reverse=True)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–ª–æ–¥—É –ª—É—á—à–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏
        user.battle_deck.card_ids = [str(card_data["card"].id) for card_data in user_cards[:5]]
        
        await user_service.update_user(user)
        
        await callback.answer("üé≤ –ö–æ–ª–æ–¥–∞ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ª—É—á—à–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏")
        await battle_deck_manage(callback)
        
    except Exception as e:
        logger.error(f"Error in deck_auto_fill: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("battle_mob_"))
async def battle_mob(callback: CallbackQuery):
    """–ë–æ–π —Å –º–æ–±–æ–º"""
    try:
        mob_level = int(callback.data.replace("battle_mob_", ""))
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±–æ—è
        if not await battle_service.can_battle_mob(user, mob_level):
            await callback.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å—Ä–∞–∂–∞—Ç—å—Å—è —Å —ç—Ç–∏–º –º–æ–±–æ–º")
            return
        
        # –ü—Ä–æ–≤–æ–¥–∏–º –±–æ–π
        victory, message, rewards = await battle_service.battle_mob(user, mob_level)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await user_service.update_user(user)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = []
        if victory:
            keyboard.append([
                InlineKeyboardButton(text="üéâ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="battle_menu")
            ])
        else:
            keyboard.append([
                InlineKeyboardButton(text="üí™ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"battle_mob_{mob_level}"),
                InlineKeyboardButton(text="üîô –ö –º–æ–±–∞–º", callback_data="battle_menu")
            ])
        
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(message, reply_markup=markup)
        
    except Exception as e:
        logger.error(f"Error in battle_mob: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "battle_stats")
async def battle_stats(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–µ–≤"""
    try:
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        win_rate = 0
        if user.battle_progress.total_battles > 0:
            win_rate = (user.battle_progress.battles_won / user.battle_progress.total_battles) * 100
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–ª—É –∫–æ–ª–æ–¥—ã
        deck_power = await battle_service.get_user_deck_power(user)
        
        text = (
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–µ–≤**\n\n"
            f"üèÜ –£—Ä–æ–≤–µ–Ω—å: {user.battle_progress.current_level}/50\n"
            f"‚öîÔ∏è –í—Å–µ–≥–æ –±–æ–µ–≤: {user.battle_progress.total_battles}\n"
            f"üéâ –ü–æ–±–µ–¥: {user.battle_progress.battles_won}\n"
            f"üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {user.battle_progress.total_battles - user.battle_progress.battles_won}\n"
            f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {win_rate:.1f}%\n\n"
            f"üí™ –°–∏–ª–∞ –∫–æ–ª–æ–¥—ã: {deck_power}\n"
            f"üé¥ –ö–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ: {len(user.battle_deck.card_ids)}/5\n\n"
        )
        
        if user.battle_deck.card_ids:
            text += "**–¢–µ–∫—É—â–∞—è –∫–æ–ª–æ–¥–∞:**\n"
            for i, card_id in enumerate(user.battle_deck.card_ids, 1):
                try:
                    card_info = await card_service.get_card_by_id(card_id)
                    if card_info:
                        text += f"{i}. {card_info.get_rarity_emoji()} {card_info.name}\n"
                except:
                    text += f"{i}. ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞\n"
        
        keyboard = [
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="battle_menu")]
        ]
        
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(text, reply_markup=markup)
        
    except Exception as e:
        logger.error(f"Error in battle_stats: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
